{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/core/formatters/number/formatter.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidebar/sidebar-animations.ts","../../packages/mosaic/sidebar/sidebar.component.ts","../../packages/mosaic/sidebar/sidebar.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/tree/node.directive.ts","../../packages/mosaic/tree/padding.directive.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.component.ts","../../packages/mosaic/tree/tree-selection.component.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.directive.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/popover/popover-animations.ts","../../packages/mosaic/popover/popover.component.ts","../../packages/mosaic/popover/popover.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/core/highlight/highlight.pipe.ts","../../packages/mosaic/core/highlight/index.ts","../../packages/mosaic/core/formatters/index.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts"],"sourcesContent":["export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { ScrollStrategy, Overlay, RepositionScrollStrategy } from '@angular/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","/* tslint:disable:naming-convention */\nimport { Inject, Injectable, InjectionToken, Optional, Pipe, PipeTransform } from '@angular/core';\n\n\nexport const MC_LOCALE_ID = new InjectionToken<string>('McLocaleId');\n\nexport const DEFAULT_MC_LOCALE_ID = 'ru';\n\n\nfunction isEmpty(value: any): boolean {\n    return value == null || value === '' || value !== value;\n}\n\nfunction strToNumber(value: number | string): number {\n    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n        return Number(value);\n    }\n\n    if (typeof value !== 'number') {\n        throw new Error(`${value} is not a number`);\n    }\n\n    return value;\n}\n\nexport const NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n\nconst minIntGroupPosition = 1;\nconst minFractionGroupPosition = 3;\nconst maxFractionGroupPosition = 5;\n\ninterface NumberFormatOptions {\n    useGrouping: boolean;\n\n    minimumIntegerDigits: number;\n    minimumFractionDigits: number;\n    maximumFractionDigits: number;\n    minimumSignificantDigits: number;\n    maximumSignificantDigits: number;\n\n    localeMatcher?: string;\n    style?: string;\n\n    currency?: string;\n    currencyDisplay?: string;\n}\n\nclass ParsedDigitsInfo {\n    minimumIntegerDigits: number;\n    minimumFractionDigits: number;\n    maximumFractionDigits: number;\n}\n\nfunction parseDigitsInfo(digitsInfo: string): ParsedDigitsInfo {\n    const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n\n    if (parts === null) {\n        throw new Error(`${digitsInfo} is not a valid digit info`);\n    }\n\n    const minIntPart = parts[minIntGroupPosition];\n    const minFractionPart = parts[minFractionGroupPosition];\n    const maxFractionPart = parts[maxFractionGroupPosition];\n\n    const result = new ParsedDigitsInfo();\n\n    if (minIntPart != null) {\n        result.minimumIntegerDigits = parseInt(minIntPart);\n    }\n\n    if (minFractionPart != null) {\n        result.minimumFractionDigits = parseInt(minFractionPart);\n    }\n\n    if (maxFractionPart != null) {\n        result.maximumFractionDigits = parseInt(maxFractionPart);\n    } else if (minFractionPart != null && result.minimumFractionDigits > result.maximumFractionDigits) {\n        result.maximumFractionDigits = result.minimumFractionDigits;\n    }\n\n    return result;\n}\n\n\n@Injectable({ providedIn: 'root' })\n@Pipe({name: 'mcNumber'})\nexport class McDecimalPipe implements PipeTransform {\n    constructor(@Optional() @Inject(MC_LOCALE_ID) private _locale: string) {}\n\n    /**\n     * @param value The number to be formatted.\n     * @param digitsInfo Decimal representation options, specified by a string\n     * in the following format:<br>\n     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n     * Default is `1`.\n     *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n     * Default is `0`.\n     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n     * Default is `3`.\n     * @param locale A locale code for the locale format rules to use.\n     * When not supplied, uses the value of `MC_LOCALE_ID`, which is `ru` by default.\n     */\n    transform(value: any, digitsInfo?: string, locale?: string): string | null {\n        if (isEmpty(value)) { return null; }\n\n        const currentLocale = locale || this._locale || DEFAULT_MC_LOCALE_ID;\n\n        let parsedDigitsInfo;\n\n        if (digitsInfo) {\n            parsedDigitsInfo = parseDigitsInfo(digitsInfo);\n        }\n\n        const options: NumberFormatOptions = {\n            useGrouping: true,\n            minimumIntegerDigits: 1,\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 3,\n            ...parsedDigitsInfo\n        };\n\n        try {\n            const num = strToNumber(value);\n\n            return Intl.NumberFormat.call(this, currentLocale, options).format(num);\n        } catch (error) {\n            throw Error(`InvalidPipeArgument: McDecimalPipe for pipe '${JSON.stringify(error.message)}'`);\n        }\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy, ConnectedPosition\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import { Direction, Directionality } from '@angular/cdk/bidi';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': 'handleMousedown($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe((reason) => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    private _opened: boolean = false;\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n\n    private _overlayRef: OverlayRef | null = null;\n\n    private _closeSubscription = Subscription.EMPTY;\n\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Handles mouse presses on the trigger. */\n    handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe((change) => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\nconst enum StyleProperty {\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n\n@Directive({\n    selector: 'mc-gutter',\n    host: {\n        class: 'mc-gutter',\n        '[class.mc-gutter_vertical]': 'isVertical()',\n        '[class.mc-gutter_dragged]': 'dragged',\n        '(mousedown)': 'dragged = true'\n    }\n})\nexport class McGutterDirective implements OnInit {\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    private _direction: Direction = Direction.Vertical;\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    private _order: number = 0;\n\n    get size(): number {\n        return this._size;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    private _size: number = 6;\n\n    dragged: boolean = false;\n\n    constructor(\n        private elementRef: ElementRef,\n        private renderer: Renderer2\n    ) {}\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n\n@Component({\n    selector: 'mc-splitter',\n    exportAs: 'mcSplitter',\n    host: {\n        class: 'mc-splitter'\n    },\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    @ViewChildren(McGutterDirective) gutters: QueryList<McGutterDirective>;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    get hideGutters(): boolean {\n        return this._hideGutters;\n    }\n\n    @Input()\n    set hideGutters(value: boolean) {\n        this._hideGutters = coerceBooleanProperty(value);\n    }\n\n    private _hideGutters: boolean = false;\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    private _direction: Direction;\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    private _disabled: boolean = false;\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    private _gutterSize: number = 6;\n\n    constructor(\n        public elementRef: ElementRef,\n        public changeDetectorRef: ChangeDetectorRef,\n        private ngZone: NgZone,\n        private renderer: Renderer2\n    ) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) { return; }\n\n        event.preventDefault();\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private updateGutter(): void {\n        this.gutters.forEach((gutter) => {\n            if (gutter.dragged) {\n                gutter.dragged = false;\n\n                this.changeDetectorRef.detectChanges();\n            }\n        });\n\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) { return; }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            return;\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n\n        this.updateGutter();\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: '[mc-splitter-area]',\n    host: {\n        class: 'mc-splitter-area'\n    }\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(\n        private elementRef: ElementRef,\n        private renderer: Renderer2,\n        private splitter: McSplitterComponent\n    ) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        if (size) {\n            const sz = coerceNumberProperty(size);\n            this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n        }\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input', {static: false}) _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    ScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    OverlayConnectionPosition,\n    OriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: any;\n    hideTid: any;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: OriginConnectionPosition; fallback: OriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: OriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: OverlayConnectionPosition; fallback: OverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: OverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('8.0.0-beta.10-7b88e6b');\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor & typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker<D> extends McTimepickerMixinBase\n    implements McFormFieldControl<any>, OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats {\n        return this._timeFormat;\n    }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    private _timeFormat: TimeFormats;\n\n    @Input('min-time')\n    get minTime(): string | null {\n        return this._minTime;\n    }\n\n    set minTime(value: string | null) {\n        this._minTime = value;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _minTime: string | null = null;\n\n    @Input('max-time')\n    get maxTime(): string | null {\n        return this._maxTime;\n    }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _maxTime: string | null = null;\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private readonly inputValueAccessor: { value: any };\n\n    private originalValue: any;\n    private previousNativeValue: any;\n    private currentDateTimeInput: D | undefined;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private readonly elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n        private readonly renderer: Renderer2,\n        @Optional() private dateAdapter: DateAdapter<any>\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: D | null): void {\n        if (value !== null) {\n            this.saveOriginalValue(value);\n\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n\n            this.applyInputChanges();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    saveOriginalValue(value: D): void {\n        if (this.dateAdapter.isValid(value)) {\n            this.originalValue = value;\n        }\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: { changedTime?: D; doTimestringReformat?: boolean } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: D | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat)\n            );\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: D | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: D | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <D> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <D> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(\n        cursorPos: number, timeString: string, timeDevider: string = ':'\n    ): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D, timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        if (value === undefined || value === null) {\n            return '';\n        }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('H:m:s')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): D | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string): D | undefined {\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n\n        const resultDate: D = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.originalValue),\n            this.dateAdapter.getMonth(this.originalValue),\n            this.dateAdapter.getDate(this.originalValue),\n            hours,\n            minutes,\n            seconds,\n            0\n        );\n\n        return this.dateAdapter.isValid(resultDate) ? resultDate : undefined;\n    }\n\n    private getTimeDigitsFromDate(dateVal: D): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: this.dateAdapter.getHours(dateVal),\n            minutes: this.dateAdapter.getMinutes(dateVal),\n            seconds: this.dateAdapter.getSeconds(dateVal)\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n        if (\n            this.minTime &&\n            this.currentDateTimeInput !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)\n        ) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (\n            this.maxTime &&\n            this.currentDateTimeInput !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)\n        ) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: D): boolean {\n        if (timeToCompare === undefined || timeToCompare ===  null || this.minTime === null) {\n            return false;\n        }\n\n        return this.dateAdapter.compareDateTime(timeToCompare, this.getDateFromTimeString(this.minTime)) < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: D): boolean {\n        if (timeToCompare === undefined || timeToCompare ===  null || this.maxTime === null) {\n            return false;\n        }\n\n        return this.dateAdapter.compareDateTime(timeToCompare, this.getDateFromTimeString(this.maxTime)) >= 0;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\n\n\nexport enum McSidebarAnimationState {\n    Opened = 'opened',\n    Closed = 'closed'\n}\n\nexport const mcSidebarAnimations: {\n    readonly sidebarState: AnimationTriggerMetadata;\n} = {\n    sidebarState: trigger('state', [\n        state('opened', style({\n                minWidth: '{{ openedStateMinWidth }}',\n                width: '{{ openedStateWidth }}',\n                maxWidth: '{{ openedStateMaxWidth }}'\n            }),\n            { params: { openedStateMinWidth: '', openedStateWidth: '', openedStateMaxWidth: '' }}\n        ),\n        state('closed', style({\n                minWidth: '{{ closedStateWidth }}',\n                width: '{{ closedStateWidth }}',\n                maxWidth: '{{ closedStateWidth }}'\n            }),\n            { params: { closedStateWidth: '' }}\n        ),\n        transition('opened => closed', [animate('0.1s')]),\n        transition('closed => opened', [animate('0.2s')])\n    ])\n};\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Directive, ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy, OnInit,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { isControl, isInput, isLeftBracket, isRightBracket } from '@ptsecurity/cdk/keycodes';\n\nimport { mcSidebarAnimations, McSidebarAnimationState } from './sidebar-animations';\n\n\nexport enum SidebarPositions {\n    Left = 'left',\n    Right = 'right'\n}\n\n// tslint:disable-next-line:naming-convention\ninterface McSidebarParams {\n    openedStateMinWidth: string;\n    openedStateWidth: string;\n    openedStateMaxWidth: string;\n\n    closedStateWidth: string;\n}\n\n\n@Directive({\n    selector: '[mc-sidebar-opened]',\n    exportAs: 'mcSidebarOpened'\n})\nexport class McSidebarOpened {\n    @Input() minWidth: string;\n    @Input() width: string;\n    @Input() maxWidth: string;\n}\n\n@Directive({\n    selector: '[mc-sidebar-closed]',\n    exportAs: 'mcSidebarClosed'\n})\nexport class McSidebarClosed {\n    @Input() width: string;\n}\n\n\n@Component({\n    selector: 'mc-sidebar',\n    exportAs: 'mcSidebar',\n    templateUrl: 'sidebar.component.html',\n    styleUrls: ['./sidebar.css'],\n    host: {\n        class: 'mc-sidebar',\n        '[@state]': `{\n            value: animationState,\n            params: params\n        }`,\n        '(@state.start)': 'onAnimationStart()',\n        '(@state.done)': 'onAnimationDone()'\n    },\n    animations: [mcSidebarAnimations.sidebarState],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebar implements OnDestroy, OnInit, AfterContentInit {\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (this._opened) {\n            this.saveWidth();\n        }\n\n        this._opened = value;\n    }\n    private _opened: boolean = true;\n\n    @Input() position: SidebarPositions;\n\n    params: McSidebarParams = {\n        openedStateWidth: 'inherit',\n        openedStateMinWidth: 'inherit',\n        openedStateMaxWidth: 'inherit',\n\n        closedStateWidth: '32px'\n    };\n\n    @Output() readonly stateChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(McSidebarOpened, { static: false }) openedContent: McSidebarOpened;\n\n    @ContentChild(McSidebarClosed, { static: false }) closedContent: McSidebarClosed;\n\n\n    get animationState(): McSidebarAnimationState {\n        return this._opened ? McSidebarAnimationState.Opened : McSidebarAnimationState.Closed;\n    }\n\n    internalState: boolean = true;\n\n    private documentKeydownListener: (event: KeyboardEvent) => void;\n\n    constructor(private ngZone: NgZone, private elementRef: ElementRef) {}\n\n    ngOnInit(): void {\n        if (this.position === SidebarPositions.Left || this.position === SidebarPositions.Right) {\n            this.registerKeydownListener();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.position === SidebarPositions.Left || this.position === SidebarPositions.Right) {\n            this.unRegisterKeydownListener();\n        }\n    }\n\n    toggle(): void {\n        this.opened = !this.opened;\n    }\n\n    onAnimationStart() {\n        if (this._opened) {\n            this.internalState = this._opened;\n        }\n    }\n\n    onAnimationDone() {\n        this.internalState = this._opened;\n\n        this.stateChanged.emit(this._opened);\n    }\n\n    ngAfterContentInit(): void {\n        this.params = {\n            openedStateWidth: this.openedContent.width || 'inherit',\n            openedStateMinWidth: this.openedContent.minWidth || 'inherit',\n            openedStateMaxWidth: this.openedContent.maxWidth || 'inherit',\n\n            closedStateWidth: this.closedContent.width || '32px'\n        };\n    }\n\n    private registerKeydownListener(): void {\n        this.documentKeydownListener = (event) => {\n            if (isControl(event) || isInput(event)) { return; }\n\n            if (\n                (this.position === SidebarPositions.Left && isLeftBracket(event)) ||\n                (this.position === SidebarPositions.Right && isRightBracket(event))\n            ) {\n                this.ngZone.run(() => this._opened = !this._opened);\n            }\n        };\n\n        this.ngZone.runOutsideAngular(() => {\n            // tslint:disable-next-line: no-unbound-method\n            document.addEventListener('keypress', this.documentKeydownListener, true);\n        });\n    }\n\n    private unRegisterKeydownListener(): void {\n        // tslint:disable-next-line: no-unbound-method\n        document.removeEventListener('keypress', this.documentKeydownListener, true);\n    }\n\n    private saveWidth() {\n        this.params.openedStateWidth = `${this.elementRef.nativeElement.offsetWidth}px`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McSidebar, McSidebarClosed, McSidebarOpened } from './sidebar.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        McSidebarClosed,\n        McSidebarOpened,\n        McSidebar\n    ],\n    exports: [\n        McSidebarClosed,\n        McSidebarOpened,\n        McSidebar\n    ]\n})\nexport class McSidebarModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet, {static: true}) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { OverlayRef } from '@angular/cdk/overlay';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","/* tslint:disable:no-empty */\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@angular/cdk/overlay';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A,\n    ESCAPE,\n    PAGE_UP,\n    PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McInput } from '@ptsecurity/mosaic/input';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({\n    selector: '[mcSelectSearch]',\n    exportAs: 'mcSelectSearch',\n    host: {\n        '(keydown)': 'handleKeydown($event)'\n    }\n})\nexport class McSelectSearch implements AfterContentInit, OnDestroy {\n    @ContentChild(McInput, { static: false }) input: McInput;\n\n    searchChangesSubscription: Subscription = new Subscription();\n\n    isSearchChanged: boolean = false;\n\n    constructor(formField: McFormField) {\n        formField.canCleanerClearByEsc = false;\n    }\n\n    focus(): void {\n        this.input.focus();\n    }\n\n    reset(): void {\n        this.input.ngControl.reset();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.input) {\n            throw Error('McSelectSearch does not work without mcInput');\n        }\n\n        if (!this.input.ngControl) {\n            throw Error('McSelectSearch does not work without ngControl');\n        }\n\n        this.searchChangesSubscription = this.input.ngControl.valueChanges!.subscribe(() => {\n            this.isSearchChanged = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.searchChangesSubscription.unsubscribe();\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE) {\n            if (this.input.value) {\n                this.reset();\n                event.stopPropagation();\n            }\n        }\n    }\n}\n\n@Directive({\n    selector: '[mc-select-search-empty-result]',\n    exportAs: 'mcSelectSearchEmptyResult'\n})\nexport class McSelectSearchEmptyResult {}\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[tabindex]': 'tabIndex',\n\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    previousSelectionModelSelected: McOption[] = [];\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger', { static: false }) trigger: ElementRef;\n\n    @ViewChild('panel', { static: false }) panel: ElementRef;\n\n    @ViewChild('optionsContainer', { static: false }) optionsContainer: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, { static: false }) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger, { static: false }) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    @ContentChild(McSelectSearch, { static: false }) search: McSelectSearch;\n\n    @Input() hiddenItemsText: string = '...ещё';\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(\n                ...this.options.map((option) => option.onSelectionChange),\n                ...this.selectionModel.selected.map((option) => option.onSelectionChange)\n            );\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    get isEmptySearchResult(): boolean {\n        return this.search && this.options.length === 0 && !!this.search.input.value;\n    }\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    resetSearch(): void {\n        if (this.search) {\n            this.search.reset();\n            /*\n            todo the incorrect behaviour of keyManager is possible here\n            to avoid first item selection (to provide correct options flipping on closed select)\n            we should process options update like it is the first options appearance\n             */\n            this.search.isSearchChanged = false;\n        }\n    }\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            // the order of calls is important\n            this.resetSearch();\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n            this._changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n\n        if (this.search && this._panelOpen) {\n            this.search.focus();\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.optionsContainer.nativeElement.scrollTop = this.scrollTop;\n\n                this.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    getItemHeight(): number {\n        return this.options.first ? this.options.first.getHeight() : 0;\n    }\n\n    private getHeightOfOptionsContainer(): number {\n        return this.optionsContainer.nativeElement.getClientRects()[0].height;\n    }\n\n    private updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(\n            Math.floor(this.getHeightOfOptionsContainer() / this.options.first.getHeight())\n        );\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            manager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            manager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            manager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            manager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        this.previousSelectionModelSelected = this.selectionModel.selected;\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getCorrespondOption(value: any): McOption | undefined {\n        return [\n            ...this.options.toArray(),\n            ...this.previousSelectionModelSelected\n        ].find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this.compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.getCorrespondOption(value);\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        const typeAheadDebounce = 200;\n\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead(typeAheadDebounce, this.search ? -1 : 0)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (this.search && this.search.isSearchChanged) {\n                    Promise.resolve().then(() => this.keyManager.setFirstItemActive());\n\n                    this.search.isSearchChanged = false;\n                }\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    // If search is avaliable then we focus search again.\n                    if (this.search) {\n                        this.search.focus();\n                    } else {\n                        this.focus();\n                    }\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.optionsContainer.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.optionsContainer.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectSearch, McSelectSearchEmptyResult, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [\n        McFormFieldModule,\n        McSelect,\n        McSelectSearch,\n        McSelectSearchEmptyResult,\n        McSelectTrigger,\n        McOptionModule,\n        CommonModule\n    ],\n    declarations: [\n        McSelect,\n        McSelectSearch,\n        McSelectSearchEmptyResult,\n        McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","/* tslint:disable:no-empty */\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@angular/cdk/overlay';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A, PAGE_UP, PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeSelect, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<McTreeOption>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<any>;\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    options: QueryList<McTreeOption>;\n\n    @ViewChild('trigger', { static: false }) trigger: ElementRef;\n\n    @ViewChild('panel', { static: false }) panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, { static: false }) overlayDir: CdkConnectedOverlay;\n\n    @ViewChild('hiddenItemsCounter', { static: false }) hiddenItemsCounter: ElementRef;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger, { static: false }) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection, { static: false }) tree: McTreeSelection;\n\n    @Input() hiddenItemsText: string = '...ещё';\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    get value(): any {\n        return this.multiple ? this.tree.getSelectedValues() : this.tree.getSelectedValues()[0];\n    }\n\n    private _value: any = null;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string | string[] | null;\n\n    constructor(\n        public elementRef: ElementRef,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly viewportRuler: ViewportRuler,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<any>(this.multiple);\n        this.tree.ngAfterContentInit();\n\n        this.initKeyManager();\n\n        this.options = this.tree.renderedOptions;\n        this.tree.autoSelect = this.autoSelect;\n        this.tree.multiple = this.multiple;\n\n        if (this.multiple) {\n            this.tree.noUnselectLast = false;\n        }\n\n        if (this.tempValues) {\n            this.setSelectionByValue(this.tempValues);\n            this.tempValues = null;\n        }\n\n        this.tree.selectionChange\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                this.onChange(this.selectedValues);\n\n                this.selectionChange.emit(new McTreeSelectChange(this, event.option));\n            });\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (event.added.length) {\n                    this.tree.keyManager.setActiveItem(\n                        this.options.find((option) => option.data === event.added[0]) as any\n                    );\n                }\n\n                if (!this.multiple && this.panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        setTimeout(() => this.calculateHiddenItems(), 0);\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.tree) {\n            this.setSelectionByValue(value);\n        } else {\n            this.tempValues = value;\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): any {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get selectedValues(): any {\n        const selectedValues = this.selectionModel.selected.map((value) => this.tree.treeControl.getValue(value));\n\n        return this.multiple ? selectedValues : selectedValues[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return this.tree.treeControl.getViewValue(this.selected);\n    }\n\n    get triggerValues(): string[] {\n        if (this.empty) { return []; }\n\n        return this.selected;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n\n                this.tree.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: any, $event) {\n        $event.stopPropagation();\n\n        if (this.disabled) { return; }\n\n        this.selectionModel.deselect(selectedOption);\n\n        this.onChange(this.selectedValues);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            this.tree.keyManager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            this.tree.keyManager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            this.tree.keyManager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            this.tree.keyManager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.selectionModel.toggle(this.tree.keyManager.activeItem.data);\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (\n                this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex\n            ) {\n                this.tree.keyManager.activeItem.selectViaInteraction(event);\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.tree.setOptionsFromValues(value);\n\n            this.sortValues();\n        } else {\n            this.tree.setOptionsFromValues([value]);\n        }\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                const firstSelectedValue = this.multiple ? this.selectedValues[0] : this.selectedValues;\n\n                const selectedOption = this.options.find((option) => option.value === firstSelectedValue);\n\n                if (selectedOption) {\n                    this.tree.keyManager.setActiveItem(selectedOption);\n                }\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.tree.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n\n        '[attr.tabindex]': 'tabindex',\n        '[attr.disabled]': 'disabled || null',\n\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar, {static: false}) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon, {static: false}) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove), {static: false}) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get tabindex(): any {\n        if (!this.selectable) { return null; }\n\n        return this.disabled ? null : -1;\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        public changeDetectorRef: ChangeDetectorRef,\n        private _ngZone: NgZone\n    ) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.selectable) { return; }\n\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n\n            this.onFocus.next({ tag: this });\n\n            Promise.resolve().then(() => {\n                this.hasFocus = true;\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag, {\n        // Need to use `descendants: true`,\n        // Ivy will no longer match indirect descendants if it's left as false.\n        descendants: true\n    }) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null) {\n            if (this.tags.length) {\n                const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n                this.keyManager.setActiveItem(newTagIndex);\n            } else {\n                this.focusInput();\n            }\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output, Renderer2 } from '@angular/core';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    private _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    countOfSymbolsForUpdateWidth: number = 3;\n\n    private oneSymbolWidth: number;\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private renderer: Renderer2,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n\n        this.setDefaultInputWidth();\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n            this.updateInputWidth();\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        this.updateInputWidth();\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    updateInputWidth(): void {\n        const length = this.inputElement.value.length;\n\n        this.renderer.setStyle(this.inputElement, 'max-width', 0);\n        this.oneSymbolWidth = this.inputElement.scrollWidth / length;\n        this.renderer.setStyle(this.inputElement, 'max-width', '');\n\n        if (length > this.countOfSymbolsForUpdateWidth) {\n            this.renderer.setStyle(this.inputElement, 'width', `${length * this.oneSymbolWidth}px`);\n        } else {\n            this.setDefaultInputWidth();\n        }\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    private setDefaultInputWidth() {\n        this.renderer.setStyle(this.inputElement, 'width', '30px');\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { AnimationEvent } from '@angular/animations';\nimport { Directionality, Direction } from '@angular/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@angular/cdk/portal';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective, {static: false}) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import { Direction, Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer', {static: true})\n    tabListContainer: ElementRef;\n    @ViewChild('tabList', {static: true})\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper', {static: false}) tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader', {static: false}) tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this._inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Component, Directive, Input, ViewEncapsulation } from '@angular/core';\nimport { CdkTree, CdkTreeNode, CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\nimport { map } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tree-node-toggle',\n    template: `\n        <i class=\"mc mc-icon mc-angle-down-S_16\"></i>\n    `,\n    host: {\n        class: 'mc-tree-node-toggle',\n        '(click)': 'toggle($event)',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-opened]': 'iconState'\n    },\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggleComponent }]\n})\nexport class McTreeNodeToggleComponent<T> extends CdkTreeNodeToggle<T> {\n    disabled: boolean = false;\n\n    @Input() node: T;\n\n    get iconState(): any {\n        return this.disabled || this.tree.treeControl.isExpanded(this.node);\n    }\n\n    constructor(tree: CdkTree<T>, treeNode: CdkTreeNode<T>) {\n        super(tree, treeNode);\n\n        this.tree.treeControl.filterValue\n            .pipe(map((value) => value.length > 0))\n            .subscribe((state: boolean) => this.disabled = state);\n    }\n}\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)',\n        '[class.mc-disabled]': 'disabled'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggleDirective }]\n})\nexport class McTreeNodeToggleDirective<T> extends CdkTreeNodeToggle<T> {\n    disabled: boolean = false;\n\n    constructor(tree: CdkTree<T>, treeNode: CdkTreeNode<T>) {\n        super(tree, treeNode);\n\n        this.tree.treeControl.filterValue\n            .pipe(map((value) => value.length > 0))\n            .subscribe((state: boolean) => this.disabled = state);\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    InjectionToken,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    OnDestroy,\n    AfterContentInit\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT = new InjectionToken<any>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    templateUrl: './tree-option.html',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()',\n        '(click)': 'selectViaInteraction($event)'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements OnInit, OnDestroy, CanDisable, AfterContentInit {\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.tree && this.tree.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n        }\n    }\n\n    private _selected: boolean = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.tree.multiple;\n    }\n\n    get viewValue(): string {\n        // TODO: Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    hasFocus: boolean = false;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        @Inject(MC_TREE_OPTION_PARENT_COMPONENT) public tree: any\n    ) {\n        super(elementRef, tree);\n    }\n\n    ngOnInit(): void {\n        this.focusMonitor.monitor(this.elementRef.nativeElement, false);\n    }\n\n    ngAfterContentInit(): void {\n        this.value = this.tree.treeControl.getValue(this.data);\n    }\n\n    ngOnDestroy(): void {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean): void {\n        if (this._selected === selected || !this.tree.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.tree.selectionModel.select(this.value);\n        } else {\n            this.tree.selectionModel.deselect(this.value);\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    handleFocus(): void {\n        if (this.disabled || this.hasFocus) { return; }\n\n        this.hasFocus = true;\n\n        if (this.tree.setFocusedOption) {\n            this.tree.setFocusedOption(this);\n        }\n    }\n\n    handleBlur(): void {\n        this.hasFocus = false;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        // tslint:disable-next-line: no-unbound-method\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction($event?: KeyboardEvent): void {\n        if (!this.disabled) {\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.tree.setSelectedOption) {\n                this.tree.setSelectedOption(this, $event);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    markForCheck() {\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","/* tslint:disable:no-empty */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef,\n    forwardRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/esm2015/src/view';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport {\n    END,\n    ENTER,\n    hasModifierKey,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet, FlatTreeControl } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    getMcSelectNonArrayValueError,\n    HasTabIndex\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option.component';\n\n\nexport const MC_SELECTION_TREE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McTreeSelection),\n    multi: true\n};\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\n// tslint:disable-next-line:naming-convention\ninterface SelectionModelOption {\n    id: number | string;\n    value: string;\n}\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: '<ng-container cdkTreeNodeOutlet></ng-container>',\n    host: {\n        class: 'mc-tree-selection',\n\n        '[tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        MC_SELECTION_TREE_VALUE_ACCESSOR,\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends CdkTree<McTreeOption>\n    implements ControlValueAccessor, AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet, { static: true }) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) renderedOptions: QueryList<McTreeOption>;\n\n    keyManager: FocusKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<SelectionModelOption>;\n\n    @Input() treeControl: FlatTreeControl<McTreeOption>;\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    @Input()\n    get noUnselectLast(): boolean {\n        return this._noUnselectLast;\n    }\n\n    set noUnselectLast(value: boolean) {\n        this._noUnselectLast = coerceBooleanProperty(value);\n    }\n\n    private _noUnselectLast: boolean = true;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = coerceBooleanProperty(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            this.markOptionsForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    get tabIndex(): number {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n\n    set tabIndex(value: number) {\n        this._tabIndex = value != null ? value : 0;\n    }\n\n    private _tabIndex: number;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.multiple = multiple === null ? false : coerceBooleanProperty(multiple);\n\n        if (this.multiple) {\n            this.autoSelect = false;\n            this.noUnselectLast = false;\n        }\n\n        this.selectionModel = new SelectionModel<SelectionModelOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new FocusKeyManager<McTreeOption>(this.renderedOptions)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.keyManager.activeItem) {\n                    this.emitNavigationEvent(this.keyManager.activeItem);\n                }\n            });\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                this.onChange(this.getSelectedValues());\n\n                this.renderedOptions.notifyOnChanges();\n            });\n\n        this.renderedOptions.changes\n            .pipe(takeUntil(this.destroy))\n            .subscribe((options) => {\n                // todo need to do optimisation\n                options.forEach((option) => {\n                    option.deselect();\n\n                    this.getSelectedValues().forEach((selectedValue) => {\n                        if (option.value === selectedValue) {\n                            option.select();\n                        }\n                    });\n                });\n            });\n    }\n\n    ngOnDestroy(): void {\n        this.destroy.next();\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                return;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                return;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n\n        if (this.autoSelect && this.keyManager.activeItem) {\n            this.setSelectedOption(this.keyManager.activeItem);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.renderedOptions.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.renderedOptions.first.getHeight()));\n    }\n\n    setSelectedOption(option: McTreeOption, $event?: KeyboardEvent): void {\n        const withShift = $event ? hasModifierKey($event, 'shiftKey') : false;\n        const withCtrl = $event ? hasModifierKey($event, 'ctrlKey') : false;\n\n        if (this.multiple) {\n            if (withShift) {\n                const previousIndex = this.keyManager.previousActiveItemIndex;\n                const activeIndex = this.keyManager.activeItemIndex;\n\n                if (previousIndex < activeIndex) {\n                    this.renderedOptions.forEach((item, index) => {\n                        if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                    });\n                } else {\n                    this.renderedOptions.forEach((item, index) => {\n                        if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                    });\n                }\n                this.emitChangeEvent(option);\n            } else if (withCtrl) {\n                if (!this.canDeselectLast(option)) { return; }\n\n                this.selectionModel.toggle(option.data);\n\n                this.emitChangeEvent(option);\n            } else {\n                this.selectionModel.toggle(option.data);\n\n                this.emitChangeEvent(option);\n            }\n        } else {\n            if (!this.canDeselectLast(option)) { return; }\n\n            if (this.autoSelect) {\n                this.selectionModel.deselect(...this.selectionModel.selected);\n                this.selectionModel.select(option.data);\n\n                // todo не факт что это нужно\n                this.emitChangeEvent(option);\n            }\n        }\n    }\n\n    setFocusedOption(option: McTreeOption): void {\n        this.keyManager.setActiveItem(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedOption = this.keyManager.activeItem;\n\n        if (focusedOption) {\n            this.setSelectedOption(focusedOption);\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n        const changeDetectorRefs: any[] = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                    changeDetectorRefs.push(nodeData.instance.changeDetectorRef);\n                }\n            });\n        });\n\n        setTimeout(() => {\n            changeDetectorRefs.forEach((changeDetectorRef) => {\n                if (!changeDetectorRef.destroyed) {\n                    changeDetectorRef.detectChanges();\n                }\n            });\n        });\n\n        if (this.renderedOptions) {\n            this.renderedOptions.reset(arrayOfInstances);\n            this.renderedOptions.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n\n        this.nodeOutlet.changeDetectorRef.detectChanges();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    getItemHeight(): number {\n        return this.renderedOptions.first ? this.renderedOptions.first.getHeight() : 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    writeValue(value: any): void {\n        if (this.multiple && value && !Array.isArray(value)) {\n            throw getMcSelectNonArrayValueError();\n        }\n\n        if (this.renderedOptions) {\n            this.setOptionsFromValues(this.multiple ? value : [value]);\n        }\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this._disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    setOptionsFromValues(values: any[]): void {\n        this.selectionModel.clear();\n\n        const valuesToSelect = values.reduce((result, value) => {\n            return this.treeControl.hasValue(value) ? [...result, this.treeControl.hasValue(value)] : [...result];\n        }, []);\n\n        this.selectionModel.select(...valuesToSelect);\n    }\n\n    getSelectedValues(): any[] {\n        return this.selectionModel.selected.map((selected) => this.treeControl.getValue(selected));\n    }\n\n    private markOptionsForCheck() {\n        if (this.renderedOptions) {\n            this.renderedOptions.forEach((option) => option.markForCheck());\n        }\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselectLast && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node.directive';\nimport { McTreeNodePadding } from './padding.directive';\nimport { McTreeNodeToggleDirective, McTreeNodeToggleComponent } from './toggle';\nimport { McTreeOption } from './tree-option.component';\nimport { McTreeSelection } from './tree-selection.component';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggleComponent,\n    McTreeNodeToggleDirective\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number, parent: F | null) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]> | T[] | undefined | null\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parent: F | null): F[] {\n        const flatNode = this.transformFunction(node, level, parent);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this.flattenChildren(childrenNodes, level, resultNodes, flatNode);\n                } else {\n                    childrenNodes\n                        .pipe(take(1))\n                        .subscribe((children) => {\n                            this.flattenChildren(children, level, resultNodes, flatNode);\n                        });\n                }\n            }\n        }\n\n        return resultNodes;\n    }\n\n    flattenChildren(children: T[], level: number, resultNodes: F[], parent: F | null): void {\n        children.forEach((child) => {\n            this.flattenNode(child, level + 1, resultNodes, parent);\n        });\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, null));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\nenum McTreeDataSourceChangeTypes {\n    Expansion = 'expansion',\n    Filter = 'filter'\n}\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    filteredData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<F[]> {\n        return merge(\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed\n                .pipe(map((value) => ({ type: McTreeDataSourceChangeTypes.Expansion, value }))),\n            this.treeControl.filterValue\n                .pipe(map((value) => ({ type: McTreeDataSourceChangeTypes.Filter, value }))),\n            this.flattenedData\n        )\n        .pipe(map((changeObj: any): any => {\n            if (changeObj.type === McTreeDataSourceChangeTypes.Filter) {\n                if (changeObj.value && changeObj.value.length > 0) {\n                    return this.filterHandler();\n                } else {\n                    return this.expansionHandler();\n                }\n            }\n\n            return this.expansionHandler();\n        }));\n    }\n\n    filterHandler(): F[] {\n        this.filteredData.next(this.treeControl.filterModel.selected);\n\n        return this.filteredData.value;\n    }\n\n    expansionHandler(): F[] {\n        const expandedNodes = this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl);\n        this.expandedData.next(expandedNodes);\n\n        return this.expandedData.value;\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: CollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { CdkPortal } from '@angular/cdk/portal';\nimport { Directive } from '@angular/core';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import { TemplatePortal } from '@angular/cdk/portal';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel, {static: false})\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef, static: true })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef, {static: true})\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    @Input('tabId')\n    tabId: string;\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n\n    // The instance of component opened into the dialog.\n    @Input() mcComponent: Type<T>;\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer', { static: true }) modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef, static: false}) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChildren('autoFocusedButton', { read: ElementRef }) autoFocusedButtons: QueryList<ElementRef>;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n\n        if (this.isComponent(this.mcComponent)) {\n            this.createDynamicComponent(this.mcComponent as Type<T>);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        for (const autoFocusedButton of this.autoFocusedButtons.toArray()) {\n            if (autoFocusedButton.nativeElement.autofocus) {\n                (autoFocusedButton.nativeElement as HTMLButtonElement).focus();\n\n                break;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: `[mc-modal-title], mc-modal-title, [mcModalTitle]`,\n    host: {\n        class: 'mc-modal-header mc-modal-title'\n    }\n})\nexport class McModalTitle {}\n\n@Directive({\n    selector: `[mc-modal-body], mc-modal-body, [mcModalBody]`,\n    host: {\n        class: 'mc-modal-body'\n    }\n})\nexport class McModalBody {}\n\n@Directive({\n    selector: `[mc-modal-footer], mc-modal-footer, [mcModalFooter]`,\n    host: {\n        class: 'mc-modal-footer'\n    }\n})\nexport class McModalFooter {}\n","import { ComponentType, Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef, Injectable, TemplateRef } from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    open<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        options.mcModalType = 'custom';\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalBody, McModalFooter, McModalTitle } from './modal.directive';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [CommonModule, OverlayModule, A11yModule, McButtonModule, McIconModule],\n    exports: [\n        McModalComponent,\n        McModalTitle,\n        McModalBody,\n        McModalFooter\n    ],\n    declarations: [\n        McModalComponent,\n        McModalTitle,\n        McModalBody,\n        McModalFooter,\n        CssUnitPipe\n    ],\n    entryComponents: [McModalComponent],\n    providers: [McModalControlService, McModalService]\n})\nexport class McModalModule {}\n","import {\n    AfterViewInit,\n    Component,\n    Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `<ng-content></ng-content>`,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled'],\n    host: {\n        '[attr.tabIndex]': 'disabled ? -1 : tabIndex',\n        '[attr.disabled]': 'disabled || null',\n        class: 'mc-navbar-item'\n    }\n})\nexport class McNavbarItem extends McNavbarMixinBase implements OnInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this.collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this.collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private totalItemsWidths: number;\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private _itemsWidths: CachedItemWidth[];\n\n    private get totalItemsWidth(): number {\n        if (this.totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this.totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this.totalItemsWidths;\n    }\n\n    private resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this.resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this.resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this.totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n\nexport const mcPopoverAnimations: {\n    readonly popoverState: AnimationTriggerMetadata;\n} = {\n    /** Animation that transitions a tooltip in and out. */\n    popoverState: trigger('state', [\n        state('initial', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('* => visible', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => hidden', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    ScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    OverlayConnectionPosition,\n    OriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    EXTENDED_OVERLAY_POSITIONS,\n    POSITION_MAP,\n    POSITION_TO_CSS_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { mcPopoverAnimations } from './popover-animations';\n\n\nexport type PopoverVisibility = 'initial' | 'visible' | 'hidden';\n\n@Component({\n    selector: 'mc-popover',\n    templateUrl: './popover.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./popover.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcPopoverAnimations.popoverState],\n    host: {\n        '[class]': 'getCssClassesList'\n    }\n})\nexport class McPopoverComponent {\n    positions: ConnectionPositionPair[] = [ ...EXTENDED_OVERLAY_POSITIONS ];\n    availablePositions: any;\n    popoverVisibility: PopoverVisibility = 'initial';\n    closeOnInteraction: boolean = false;\n    mcContent: string | TemplateRef<any>;\n    mcHeader: string | TemplateRef<any>;\n    mcFooter: string | TemplateRef<any>;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value !== this.popoverSize) {\n            this.popoverSize = value;\n        } else if (!value) {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string;\n\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    get classList() {\n        return this._classList.join(' ');\n    }\n    set classList(value: string | string[]) {\n        let list: string[] = [];\n\n        if (Array.isArray(value)) {\n            list = value;\n        } else {\n            list.push(value);\n        }\n\n        this._classList = list;\n    }\n    private _classList: string[] = [];\n\n    get getCssClassesList(): string {\n        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;\n    }\n\n    get getPlacementClass(): string {\n        return POSITION_TO_CSS_MAP[this.mcPlacement];\n    }\n\n    /** Subject for notifying that the popover has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n\n    constructor(public changeDetectorRef: ChangeDetectorRef, public componentElementRef: ElementRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.isNonEmptyContent()) {\n            this.closeOnInteraction = true;\n            this.popoverVisibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }\n    }\n\n    hide(): void {\n        this.popoverVisibility = 'hidden';\n        this.mcVisibleChange.emit(false);\n\n        // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n        this.markForCheck();\n    }\n\n    isNonEmptyContent(): boolean {\n        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));\n    }\n\n    /** Returns an observable that notifies when the popover has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    isVisible(): boolean {\n        return this.popoverVisibility === 'visible';\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    isTemplateRef(value: any): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    isNonEmptyString(value: any): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    animationStart() {\n            this.closeOnInteraction = false;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        const toState = event.toState as PopoverVisibility;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n            this.onHideSubject.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n            this.closeOnInteraction = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.onHideSubject.complete();\n    }\n}\n\nexport const MC_POPOVER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-popover-scroll-strategy');\n\n/** @docs-private */\nexport function mcPopoverScrollStrategyFactory(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_POPOVER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcPopoverScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid popover position. */\nexport function getMcPopoverInvalidPositionError(position: string) {\n    return Error(`McPopover position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n/** @docs-private\n * Minimal width of anchor element should be equal or greater than popover arrow width plus arrow offset right/left\n * MIN_ANCHOR_ELEMENT_WIDTH used for positioning update inside handlePositionUpdate()\n */\nconst MIN_ANCHOR_ELEMENT_WIDTH: number = 40;\n\n@Directive({\n    selector: '[mcPopover]',\n    exportAs: 'mcPopover',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()',\n        '[class.mc-popover_open]': 'isOpen'\n    }\n})\nexport class McPopover implements OnInit, OnDestroy {\n    isPopoverOpen: boolean = false;\n    isDynamicPopover = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McPopoverComponent>;\n    availablePositions: any;\n    popover: McPopoverComponent | null;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input('mcPopoverHeader')\n    get mcHeader(): string | TemplateRef<any> {\n        return this._mcHeader;\n    }\n    set mcHeader(value: string | TemplateRef<any>) {\n        this._mcHeader = value;\n        this.updateCompValue('mcHeader', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcHeader: string | TemplateRef<any>;\n\n    @Input('mcPopoverContent')\n    get mcContent(): string | TemplateRef<any> {\n        return this._mcContent;\n    }\n    set mcContent(value: string | TemplateRef<any>) {\n        this._mcContent = value;\n        this.updateCompValue('mcContent', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcContent: string | TemplateRef<any>;\n\n    @Input('mcPopoverFooter')\n    get mcFooter(): string | TemplateRef<any> {\n        return this._mcFooter;\n    }\n    set mcFooter(value: string | TemplateRef<any>) {\n        this._mcFooter = value;\n        this.updateCompValue('mcFooter', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcFooter: string | TemplateRef<any>;\n\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcPopoverDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcPopoverMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcPopoverMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcPopoverTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPopoverSize')\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value && (value === 'small' || value === 'normal' || value === 'large')) {\n            this.popoverSize = value;\n            this.updateCompValue('mcPopoverSize', value);\n        } else {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string = 'normal';\n\n    @Input('mcPopoverPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcPopoverClass')\n    get classList() {\n        return this._classList;\n    }\n    set classList(value: string | string[]) {\n        this._classList = value;\n        this.updateCompValue('classList', this._classList);\n    }\n    private _classList: string | string[];\n\n    @Input('mcPopoverVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    get isOpen(): boolean {\n        return this.isPopoverOpen;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_POPOVER_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-popover')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...EXTENDED_OVERLAY_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.popover) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the popover.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-popover__panel',\n            scrollStrategy: this.scrollStrategy(),\n            hasBackdrop: this.mcTrigger === 'manual',\n            backdropClass: 'no-class'\n        });\n\n        if (this.mcTrigger === 'manual') {\n            this.overlayRef.backdropClick().subscribe(() => {\n                if (!this.popover) {\n                    return;\n                }\n\n                this.popover.hide();\n            });\n        }\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached() && this.popover) {\n            this.overlayRef.detach();\n            this.popover = null;\n        }\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.popover) {\n            this.updateCompValue('classList', this.classList);\n            this.popover.markForCheck();\n        }\n\n        this.handlePositionUpdate();\n    }\n\n    handlePositionUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n\n        const verticalOffset = this.hostView.element.nativeElement.clientHeight / 2; // tslint:disable-line\n        const anchorElementWidth = this.hostView.element.nativeElement.clientWidth; // tslint:disable-line\n\n        if (this.mcPlacement === 'rightTop' || this.mcPlacement === 'leftTop') {\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 20}px`; // tslint:disable-line\n        }\n\n        if (this.mcPlacement === 'rightBottom' || this.mcPlacement === 'leftBottom') {\n            const currentContainer = this.overlayRef.overlayElement.style.bottom || '0px';\n            this.overlayRef.overlayElement.style.bottom =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 22}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topRight' || this.mcPlacement === 'bottomRight') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.right || '0px';\n            this.overlayRef.overlayElement.style.right =\n                `${parseInt(currentContainer.split('px')[0], 10) - 18}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topLeft' || this.mcPlacement === 'bottomLeft') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.left || '0px';\n            this.overlayRef.overlayElement.style.left =\n                `${parseInt(currentContainer.split('px')[0], 10) - 20}px`; // tslint:disable-line\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicPopover && value) {\n            if (this.popover) {\n                this.popover[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.popover) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McPopoverComponent, this.hostView);\n\n                this.popover = overlayRef.attach(this.portal).instance;\n                this.isDynamicPopover = true;\n                const properties = [\n                    'mcPlacement',\n                    'mcPopoverSize',\n                    'mcTrigger',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'classList',\n                    'mcVisible',\n                    'mcHeader',\n                    'mcContent',\n                    'mcFooter'\n                ];\n\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.popover.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isPopoverOpen = data;\n                    });\n                this.popover.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n            }\n            this.updatePosition();\n            this.popover.show();\n        }\n    }\n\n    hide(): void {\n        if (this.popover) {\n            this.popover.hide();\n        }\n    }\n\n    /** Updates the position of the current popover. */\n    updatePosition(reapplyPosition: boolean = false) {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n\n        //\n        // FIXME: Необходимо в некоторых моментах форсировать позиционировать только после рендеринга всего контента\n        //\n        if (reapplyPosition) {\n            setTimeout(() => {\n                position.reapplyLastPosition();\n            });\n        }\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: OriginConnectionPosition; fallback: OriginConnectionPosition} {\n        let originPosition: OriginConnectionPosition;\n        const originXPosition = this.getOriginXaxis();\n        const originYPosition = this.getOriginYaxis();\n        originPosition = {originX: originXPosition, originY: originYPosition};\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    getOriginXaxis(): HorizontalConnectionPos {\n        const position = this.mcPlacement;\n        let origX: HorizontalConnectionPos;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        if (position === 'top' || position === 'bottom') {\n            origX = 'center';\n        } else if (position.toLowerCase().includes('right') && !isLtr ||\n            position.toLowerCase().includes('left') && isLtr) {\n            origX = 'start';\n        } else if (position.toLowerCase().includes('right') && isLtr ||\n            position.toLowerCase().includes('left') && !isLtr) {\n            origX = 'end';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origX;\n    }\n\n    getOriginYaxis(): VerticalConnectionPos {\n        const position = this.mcPlacement;\n        let origY: VerticalConnectionPos;\n        if (position === 'right' || position === 'left') {\n            origY = 'center';\n        } else if (position.toLowerCase().includes('top')) {\n            origY = 'top';\n        } else if (position.toLowerCase().includes('bottom')) {\n            origY = 'bottom';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origY;\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: OverlayConnectionPosition; fallback: OverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        let overlayPosition: OverlayConnectionPosition;\n        if (this.availablePositions[position]) {\n            overlayPosition = {\n                overlayX : this.availablePositions[position].overlayX,\n                overlayY: this.availablePositions[position].overlayY\n            };\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {\n    McPopoverComponent,\n    McPopover,\n    MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './popover.component';\n\n\n@NgModule({\n    declarations: [McPopoverComponent, McPopover],\n    exports: [McPopoverComponent, McPopover],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McPopoverComponent]\n})\nexport class McPopoverModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","/* tslint:disable:no-empty */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusKeyManager, FocusMonitor, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    hasModifierKey,\n    HOME,\n    PAGE_DOWN,\n    PAGE_UP,\n    SPACE,\n    TAB,\n    UP_ARROW\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    McLine,\n    CanDisable,\n    mixinDisabled,\n    toBoolean,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    mixinTabIndex,\n    HasTabIndex\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()',\n        '(click)': 'handleClick($event)'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements OnDestroy, OnInit, IFocusableOption {\n    hasFocus: boolean = false;\n\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    @ViewChild('text', {static: false}) text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectionModel && this.listSelection.selectionModel.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection.reportValueChange();\n        }\n    }\n\n    private _selected = false;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection)) public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        this.focusMonitor.monitor(this.elementRef.nativeElement, false);\n\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.listSelection.removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getLabel() {\n        return this.text ? this.text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectionModel.select(this);\n        } else {\n            this.listSelection.selectionModel.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    getHeight(): number {\n        return this.elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    handleClick($event) {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this, $event);\n    }\n\n    handleFocus() {\n        if (this.disabled || this.hasFocus) { return; }\n\n        this.hasFocus = true;\n    }\n\n    handleBlur() {\n        this.hasFocus = false;\n\n        this.listSelection.onTouched();\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\nexport class McListSelectionChange {\n    constructor(public source: McListSelection, public option: McListOption) {}\n}\n\n\nexport class McListSelectionBase {}\n\n// tslint:disable-next-line:naming-convention\nexport const _McListSelectionMixinBase: CanDisableCtor & HasTabIndexCtor & typeof McListSelectionBase\n    = mixinTabIndex(mixinDisabled(McListSelectionBase));\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': 'onTouched()',\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, HasTabIndex, AfterContentInit, ControlValueAccessor, HasTabIndex {\n\n    keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectionModel: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string[] | null;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectionModel = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this.keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this.tempValues) {\n            this.setOptionsFromValues(this.tempValues);\n            this.tempValues = null;\n        }\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                for (const item of event.added) { item.selected = true; }\n\n                for (const item of event.removed) { item.selected = false; }\n            });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    focus() {\n        this.element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this.reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this.reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption, $event?: KeyboardEvent): void {\n        this.keyManager.setActiveItem(option);\n\n        const withShift = $event ? hasModifierKey($event, 'shiftKey') : false;\n        const withCtrl = $event ? hasModifierKey($event, 'ctrlKey') : false;\n\n        if (withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n        } else if (withCtrl) {\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitChangeEvent(option);\n        this.reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this.setOptionsFromValues(values || []);\n        } else {\n            this.tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && listOption.selected);\n    }\n\n    getHeight(): number {\n        return this.element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    // tslint:disable-next-line:no-empty\n    onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    removeOptionFromList(option: McListOption) {\n        if (option.hasFocus) {\n            const optionIndex = this.getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this.keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this.keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n\n                break;\n\n            case TAB:\n                this.keyManager.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                this.keyManager.setNextItemActive();\n\n                break;\n            case UP_ARROW:\n                this.keyManager.setPreviousItemActive();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n\n                break;\n            default:\n                return;\n        }\n\n        event.preventDefault();\n\n        this.setFocusedOption(this.keyManager.activeItem as McListOption, event);\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    reportValueChange() {\n        if (this.options) {\n            this.onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this.getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    private lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this.lineSetter = new McLineSetter(this.lines, this._element);\n    }\n\n    handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    ElementRef,\n    OnDestroy,\n    ChangeDetectorRef,\n    Directive,\n    Attribute\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public elementRef: ElementRef) {}\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Directive({\n    selector: 'a.mc-link',\n    exportAs: 'mcLink',\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        elementRef: ElementRef,\n        private focusMonitor: FocusMonitor,\n        private changeDetector: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string\n    ) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.focusMonitor.monitor(elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon, {static: false}) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button', {static: false}) button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content', {static: false}) content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport { Direction } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent, {static: false}) lazyContent: McDropdownContent;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _previousPanelClass: string;\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap((items) => merge(...items.map((item) => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: ComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView, {static: false}) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView, {static: false}) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView, {static: false}) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar, {static: false}) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: ComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => ScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n\n                this.datepickerInput.elementRef.nativeElement.focus();\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): PositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, {static: false}) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', {static: false}) _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl, {static: false}) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl, {static: false}) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper, {static: false}) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer', {static: true}) connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    canCleanerClearByEsc: boolean = true;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n            this._control.focus();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (this.canCleanerClearByEsc && event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { BidiModule } from '@angular/cdk/bidi';\nimport { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO: Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    getHeight(): number {\n        // tslint:disable-next-line:naming-convention\n        const DOMRect: DOMRect = this.element.nativeElement.getClientRects()[0];\n\n        return DOMRect ? DOMRect.height : 0;\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@angular/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    selector: 'mc-pseudo-checkbox',\n    templateUrl: 'pseudo-checkbox.partial.html',\n    styleUrls: ['pseudo-checkbox.css'],\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    },\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({ name: 'mcHighlight' })\nexport class McHighlightPipe implements PipeTransform {\n    transform(value: any, args: any): any {\n        if (!args) { return value; }\n\n        return value.replace(new RegExp(`(${args})`, 'gi'), '<mark class=\"mc-highlight\">$1</mark>');\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McHighlightPipe } from './highlight.pipe';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McHighlightPipe],\n    declarations: [McHighlightPipe]\n})\nexport class McHighlightModule {}\n\n\nexport * from './highlight.pipe';\n","import { NgModule } from '@angular/core';\n\nimport { McDecimalPipe } from './number/formatter';\n\n\n@NgModule({\n    exports: [\n        McDecimalPipe\n    ],\n    declarations: [\n        McDecimalPipe\n    ]\n})\nexport class McFormattersModule {}\n\n\nexport * from './number/formatter';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        if (iconName) {\n            elementRef.nativeElement.classList.add(iconName);\n        }\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n\n    abstract focus(): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n"],"names":["SELECT_PANEL_PADDING_X","McGutterDirective","prototype","isVertical","this","direction","setStyle","property","value","renderer","elementRef","nativeElement","type","Directive","args","selector","host","class","[class.mc-gutter_vertical]","[class.mc-gutter_dragged]","(mousedown)","ElementRef","Renderer2","Input","order","size","McSplitterComponent","changeDetectorRef","ngZone","areas","isDragging","areaPositionDivider","listeners","_hideGutters","_disabled","_gutterSize","Object","defineProperty","coerceBooleanProperty","_direction","disabled","gutterSize","coerceNumberProperty","addArea","area","index","length","getSize","setOrder","push","initialSize","ngOnInit","onMouseDown","event","leftAreaIndex","rightAreaIndex","_this","preventDefault","leftArea","rightArea","startPoint","x","screenX","y","screenY","forEach","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","e","onMouseMove","removeArea","indexToRemove","some","splice","updateGutter","gutters","gutter","dragged","detectChanges","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","unsubscribe","pop","Component","exportAs","preserveWhitespaces","styles","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","NgZone","ViewChildren","hideGutters","McSplitterAreaDirective","splitter","removeStyle","ngOnDestroy","sz","getSizeProperty","coerceCssPixelValue","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","NgModule","imports","CommonModule","McIconModule","exports","declarations","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","tabIndex","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","id","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","markForCheck","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","inputs","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","animations","trigger","state","left","transition","animate","FocusMonitor","String","decorators","Attribute","ViewChild","static","Output","McToggleModule","A11yModule","McCommonModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","scrollDispatcher","hostView","scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","listener","removeEventListener","clear","complete","handleKeydown","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","Optional","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","OverlayModule","entryComponents","McVerticalNavbarItemIcon","McVerticalNavbarItemBadge","McVerticalNavbarItemBase","_McVerticalNavbarMixinBase","McVerticalNavbarItem","focusMonitor","[attr.disabled]","[attr.tabindex]","McDropdownTrigger","Self","McVerticalNavbarHeader","McVerticalNavbarTitle","McVerticalNavbar","cd","expanded","toggle","toggleVerticalNavbarAnimation","COMPONENTS","McVerticalNavbarModule","PlatformModule","VERSION","Version","growSubscription","McTextarea","ngDoCheck","ngControl","updateErrorState","dirtyCheckNativeValue","grow","canGrow","textarea","outerHeight","window","diff","height","Math","max","minHeight","scrollHeight","freeRowsHeight","focusChanged","isFocused","focused","stateChanges","isBadInput","onContainerClick","newValue","previousNativeValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","(blur)","(focus)","McFormFieldControl","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","MC_TEXTAREA_VALUE_ACCESSOR","errorStateMatcher","placeholder","required","McTextareaMixinBase","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","defaultErrorStateMatcher","parentForm","parentFormGroup","McTimepickerMixinBase","mixinErrorState","McTimepicker","inputValueAccessor","dateAdapter","controlType","_minTime","_maxTime","uid","Error","onChange","noop","valueAccessor","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","_id","_required","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","indexOf","maxValue","onTouched","onBlur","onPaste","clipboardUserInput","clipboardData","getData","getDateFromTimeString","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","saveOriginalValue","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","isValid","originalValue","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","format","momentWrappedTime","parse","convertedTimeString","match","trim","Number","resultDate","createDateTime","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","mcTimepickerParse","text","minTime","isTimeLowerThenMin","mcTimepickerLowerThenMintime","maxTime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","compareDateTime","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","MC_INPUT_VALUE_ACCESSOR","DateAdapter","McTimepickerModule","Opened","Closed","mcSidebarAnimations","sidebarState","minWidth","width","maxWidth","params","openedStateMinWidth","openedStateWidth","openedStateMaxWidth","closedStateWidth","Left","Right","McSidebarOpened","McSidebarClosed","McSidebar","_opened","stateChanged","internalState","saveWidth","McSidebarAnimationState","SidebarPositions","registerKeydownListener","unRegisterKeydownListener","opened","onAnimationStart","onAnimationDone","ngAfterContentInit","openedContent","closedContent","documentKeydownListener","isControl","isInput","isLeftBracket","isRightBracket","document","offsetWidth","[@state]","(@state.start)","(@state.done)","ContentChild","McSidebarModule","MC_SIDEPANEL_DATA","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","McSidepanelContainerComponent","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","McSidepanelRef","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","McSidepanelService","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","Injectable","Injector","SkipSelf","McSidepanelClose","sidepanelService","getClosestSidepanel","ngOnChanges","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","PortalModule","_order","_size","option","changedOrDestroyed","McSelect","onSelect","isUserInput","wasSelected","selectionModel","isSelected","_multiple","selected","select","deselect","keyManager","setActiveItem","multiple","sortValues","search","propagateChanges","options_1","options","toArray","sort","a","b","sortComparator","fallbackValue","valueToEmit","_value","valueChange","selectionChange","McSelectChange","highlightCorrectOption","empty","setFirstItemActive","scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","optionsContainer","scrollTop","getOptionScrollPosition","getItemHeight","calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","getBoundingClientRect","viewportSize","_viewportRuler","getViewportSize","isRtl","first","group","leftOverflow","rightOverflow","round","[tabindex]","[class.mc-select-invalid]","[class.mc-select-required]","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","MC_OPTION_PARENT_COMPONENT","ViewportRuler","McFormField","MC_SELECT_SCROLL_STRATEGY","panel","CdkConnectedOverlay","tags","McTag","customTrigger","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","McSelectSearch","hiddenItemsText","openedChange","openedStream","closedStream","compareWith","McSelectMixinBase","McSelectModule","McOptionModule","McTagsModule","McFormFieldModule","McSelectSearchEmptyResult","MC_SELECT_SCROLL_STRATEGY_PROVIDER","McTreeSelectChange","McTreeSelectTrigger","McTreeSelectBase","McTreeSelectMixinBase","McTreeSelect","viewportRuler","scrollStrategyFactory","dir","parentFormField","hiddenItems","triggerFontSize","transformOrigin","panelDoneAnimating","panelDoneAnimatingStream","offsetY","o","optionSelectionChanges","defer","apply","onSelectionChange","onStable","switchMap","_autoSelect","_focused","_panelOpen","destroy","_compareWith","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","tree","getSelectedValues","panelOpen","SelectionModel","initKeyManager","renderedOptions","autoSelect","noUnselectLast","tempValues","setSelectionByValue","selectedValues","changed","added","ngAfterViewInit","calculateHiddenItems","triggerRect","fontSize","treeControl","getValue","getViewValue","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","updateScrollSize","getPanelTheme","color","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","originalOnKeyDown","HOME","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","setOptionsFromValues","tabOut","firstSelectedValue_1","CdkTree","hiddenItemsCounter","McTreeSelection","McTreeSelectModule","CdkTreeModule","McTreeModule","McPseudoCheckboxModule","McTextareaBase","lineHeight","growObserver","fromEvent","bind","paddingTop","paddingBottom","dispatchSelectionChange","_selected","[class.mc-selected]","[class.mc-focused]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","contentChildren","McIcon","avatar","McTagAvatar","trailingIcon","McTagTrailingIcon","removeIcon","McTagRemove","removed","selectable","removable","_McTagMixinBase","parentTag","handleClick","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","_selectable","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","tagListSelectable","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","startWith","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","BACKSPACE","isInputEmpty","contains","clearSelection","selectValue","correspondingTag","blur","markAsTouched","newTagIndex","min","isValidIndex","nodeName","toLowerCase","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","hasFocus","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","countOfSymbolsForUpdateWidth","setDefaultInputWidth","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","updateInputWidth","oneSymbolWidth","scrollWidth","hasModifierKey","separators","has","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","useValue","McSelectBase","formField","searchChangesSubscription","Subscription","isSearchChanged","canCleanerClearByEsc","reset","McInput","_ngZone","_renderer","_dir","_parentFormField","_scrollStrategyFactory","previousSelectionModelSelected","resetOptions","resetSearch","viewValue","selectedOptions","onRemoveMatcherItem","getHeight","getHeightOfOptionsContainer","getClientRects","withScrollSize","floor","manager","correspondingOption","getCorrespondOption","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","dirChangeSubscription","computePositionAnimationState","McTabBody","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","beforeCentering","onCentering","onTranslateTabComplete","onCentered","fromState","afterLeavingCenter","getLayoutDirection","mcTabsAnimations","translateTab","portalHost","PortalHostDirective","content","animationDuration","McTabBodyPortal","componentFactoryResolver","viewContainerRef","centeringSub","EMPTY","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","McTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","[attr.aria-disabled]","McTabHeaderBase","McTabHeader","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","coercedValue","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","selectedIndex","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","isActive","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTab","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTabLabel","McTabContent","McTagSelectionChange","TAG_ATTRIBUTE_NAMES","McTagBase","_removable","addHostClassName","addClassModificatorForIcons","icons","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","_i","TAG_ATTRIBUTE_NAMES_1","attr","hasAttribute","tagName","toggleSelected","DELETE","McProgressBar","McProgressBarModule","idIterator","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","mode","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","focusOrigin","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggleComponent","filterValue","isExpanded","node","[class.mc-opened]","CdkTreeNodeToggle","CdkTreeNode","McTreeNodeToggleDirective","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","setSelected","getHostElement","handleFocus","setFocusedOption","handleBlur","clientRects","emitSelectionChangeEvent","setSelectedOption","MC_SELECTION_TREE_VALUE_ACCESSOR","McTreeNavigationChange","McTreeSelectionChange","differs","navigationChange","_noUnselectLast","rawValue","markOptionsForCheck","emitNavigationEvent","notifyOnChanges","selectedValue","collapse","expand","toggleFocusedOption","withShift","withCtrl","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","changeDetectorRefs","_embeddedViews","view","viewDef","def","nodes","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","values","valuesToSelect","reduce","hasValue","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parent","flatNode","childrenNodes","flattenChildren","children","child","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","Expansion","Filter","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","filteredData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","McTreeDataSourceChangeTypes","changeObj","filterHandler","expansionHandler","filterModel","expandedNodes","disconnect","DataSource","McTreeNestedDataSource","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","textLabel","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","tabId","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","isNaN","Pipe","McModalTitle","McModalBody","McModalFooter","ModalBuilderForService","createModal","changeProps","mcAfterClose","destroyModal","mcCloseByESC","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","mcOnCancel","mcWidth","confirm","confirmType","mcOnOk","mcModalType","mcClassName","mcMaskClosable","success","simpleConfirm","delete","mcCancelText","McModalControlService","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","McNavbarMixinBase","McNavbarItem","setAttribute","encodeURI","denyClickIfDisabled","events","eventListeners","stopImmediatePropagation","collapsedTitle","McNavbarContainer","cssClasses","CollapsibleItem","collapsed","processCollapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","el","getItemsForCollapse","McNavbarModule","mcPopoverAnimations","popoverState","opacity","McPopoverComponent","componentElementRef","EXTENDED_OVERLAY_POSITIONS","popoverVisibility","_classList","popoverSize","join","list","mcPopoverSize","getPlacementClass","POSITION_TO_CSS_MAP","isNonEmptyContent","mcContent","isTemplateRef","isNonEmptyString","isVisible","animationStart","[class]","MC_POPOVER_SCROLL_STRATEGY","MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER","mcPopoverScrollStrategyFactory","McPopover","isPopoverOpen","isDynamicPopover","_mcHeader","_mcContent","_mcFooter","popover","handlePositionUpdate","verticalOffset","anchorElementWidth","clientWidth","reapplyPosition","reapplyLastPosition","getOriginXaxis","getOriginYaxis","origX","includes","getMcPopoverInvalidPositionError","origY","[class.mc-popover_open]","mcHeader","mcFooter","McPopoverModule","McProgressBarBase","_McProgressBarMixinBase","McListSelection","reportValueChange","getSelectedOptionValues","focusedIndex","listOption","noUnselect","removeOptionFromList","optionIndex","getOptionIndex","setPreviousItemActive","setNextItemActive","TAB","McListSelectionChange","getOptionByValue","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","horizontal","_McListSelectionMixinBase","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_element","lineSetter","McLineSetter","lines","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","changeDetector","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcOkType","_mcOkLoading","_mcCancelLoading","mcOkText","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","mcComponent","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusedButtons","autoFocusedButton","autofocus","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","mcComponentParams","modalElement","modalContainer","plusNum","body","DOCUMENT","mcWrapClassName","mcStyle","mcClosable","mcMaskStyle","mcBodyStyle","mcOkLoading","mcCancelLoading","McDatepickerInput","dateFilter","validatorOnChange","deserialize","lastValueValid","getValidDateOrNull","oldDate","sameDate","_min","_max","disabledChange","datepickerSubscription","localeSubscription","registerOnValidatorChange","validate","c","cvaOnChange","isAltDownArrow","datepicker","readOnly","date","dateFormats","dateInput","McDatepickerInputEvent","dateChange","getThemePalette","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","_getHostElement","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_xPosition","xPosition","_yPosition","yPosition","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","_panelAnimationState","_animationDone","_items","_itemChanges","_tabSubscription","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_keyManager","items","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_closeSubscription","_hoverSubscription","_handleTouchStart","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","handleMousedown","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","McDropdownModule","listSelection","checkboxPosition","wasSelected_1","McListSelectionBase","_c","selectAll","deselectAll","_minDate","_maxDate","init","todayYear","today","activeYear","_activeDate","activeOffset","years","row","year","createCellForYear","onYearSelected","yearSelected","createDate","month","activeDate","daysInMonth","getNumDaysInMonth","selectedChange","handleCalendarBodyKeydown","oldActiveDate","addCalendarYears","yearsPerPage","compareDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","yearName","getYearName","McCalendarCell","shouldEnableYear","maxDate","minDate","firstOfYear","addCalendarDays","monthSelected","createMissingDateImplError","validDate","clampDate","selectedMonth","getMonthInCurrentYear","onMonthSelected","normalizedDate","addCalendarMonths","todayMonth","yearLabel","monthNames","getMonthNames","months","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","NG_VALIDATORS","targetElement","mcDatepickerParse","minValidator","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","Validators","compose","localeChanges","McButtonToggle","McButtonToggleModule","McButtonToggleGroup","McCard","readonly","hostElement","onClick","[class.mc-card_readonly]","[class.mc-card_selected]","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_platform","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","get","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","arrows","allowedKeys","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","Platform","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_onChange","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","_control","_numberControl","_suffix","McSuffix","_prefix","McPrefix","_cleaner","McCleaner","connectionContainerRef","_McFormFieldMixinBase","McFormFieldWithoutBorders","McHint","McStepper","uniqueAutocompleteIdCounter","McAutocompleteSelectedEvent","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","McAutocomplete","defaults","showPanel","displayWith","optionSelected","_isOpen","_autoActiveFirstOption","autoActiveFirstOption","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","panelWidth","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","wasOpen","panelClosingActions","setValueAndClose","toDisplay","inputValue","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","Host","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","panelHeight","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","strToNumber","parseDigitsInfo","digitsInfo","parts","NUMBER_FORMAT_REGEXP","minIntPart","minIntGroupPosition","minFractionPart","minFractionGroupPosition","maxFractionPart","maxFractionGroupPosition","ParsedDigitsInfo","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","getMcFormFieldMissingControlError","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","scrollThrottle","openSidepanels","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_lines","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","McMeasureScrollbarService","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","_active","mostRecentViewValue","DOMRect","setActiveStyles","setInactiveStyles","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","animateChild","McHighlightPipe","McHighlightModule","MC_LOCALE_ID","McDecimalPipe","_locale","locale","parsedDigitsInfo","currentLocale","useGrouping","num","Intl","NumberFormat","JSON","stringify","message","McFormattersModule","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","onStepUp","onStepDown","McFormFieldBase","_labelId","hovered","_validateControlChild","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","_shouldForward","_hint","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]"],"mappings":"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"}