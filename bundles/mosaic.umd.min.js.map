{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-b1db7f5');\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n    private _lastFocusedElement: HTMLElement;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '../icon/icon.module';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button, a[mc-button]',\n    host: { class: 'mc-button mc-olololo' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n"],"names":["this","options","forEach","item","index","activeIndex_1","previousIndex_1","setSelected","withShift","withCtrl","_canDeselectLast","option","toggle","autoSelect","_emitNavigationEvent","McTreeSelection","prototype","toggleFocusedOption","focusedIndex","_keyManager","activeItemIndex","_isValidIndex","focusedOption","toArray","_emitChangeEvent","renderNodeChanges","data","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","_super","call","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","updateScrollSize","_getHeight","_elementRef","nativeElement","getClientRects","height","navigationChange","emit","McTreeNavigationChange","selectionChange","length","noUnselect","selectedOptions","selected","type","Component","args","exportAs","selector","template","host","[tabIndex]","class","role","(keydown)","(window:resize)","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","ElementRef","IterableDiffers","ChangeDetectorRef","String","decorators","Attribute","ViewChild","CdkTreeNodeOutlet","ContentChildren","forwardRef","McTreeNodeOption","disabled","Input","Output","_McTreeSelectionBase","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeModule","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","level","resultNodes","parentMap","_this","flatNode","pipe","take","subscribe","children","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","treeControl","results","currentExpand","expand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","tslib_1.__extends","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","VERSION","Version","(focus)","(blur)","preserveWhitespaces","_lines","McLine","McListItem","McListItemBase","McListModule","A11yModule","McLineModule","McList","McListSelection","McListOption","McListSubheaderCssStyler","Directive","McIconCSSStyler","McIconBase","_McIconMixinBase","mixinColor","McIcon","elementRef","iconName","classList","add","_getHostElement","McIconModule","PlatformModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","mixinDisabled","McNavbarItem","_focusMonitor","_platform","_cdRef","tabIndex","dropdownItems","isCollapsed","_subscription","Subscription","setAttribute","encodeURI","dropdownContent","querySelectorAll","ngOnInit","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","ngAfterViewInit","startListenFocusDropdownItems","ngOnDestroy","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","window","location","href","indexOf","handleClickByItem","toggleDropdown","handleKeydown","$event","isNavbarItem","contains","keyCode","SPACE","handleClickByDropdownItem","forceCloseDropdown","origin","detectChanges","_dropdownElements","el","events","eventListeners","event","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","Platform","collapsedTitle","dropdownItemTmpl","ContentChild","read","TemplateRef","McNavbarContainer","position","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","remove","CachedItemWidth","itemsForCollapse","undefined","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","id","mode","color","ThemePalette","Primary","get","Math","max","min","[attr.id]","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","source","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","set","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","checked","toBoolean","ngAfterContentInit","touch","emitChangeEvent","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","name","isAlreadySelected","McRadioButton","descendants","labelPosition","required","McRadioButtonBase","_McRadioButtonMixinBase","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","focus","onInputClick","stopPropagation","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","Optional","UniqueSelectionDispatcher","ariaLabel","ariaLabelledby","ariaDescribedby","_inputElement","McRadioModule","McCommonModule","CdkTreeNodeDef","_baseLeftPadding","_iconWidth","_indent","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","_level","leftPadding","_setPadding","CdkTreeNodePadding","indent","treeSelection","_hasFocus","isSelected","setFocusedOption","select","deselect","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","Inject","McTreeSelectionChange","_differs","_changeDetectorRef","multiple","SelectionModel","rawValue","console","log","_onKeyDown","shiftKey","ctrlKey","LEFT_ARROW","activeItem","collapse","preventDefault","RIGHT_ARROW","ENTER","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","FocusKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","first","withScrollSize","floor","updateActiveItem","previousActiveItemIndex","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDivider","McDividerModule","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","clearValue","onContainerClick","onKeyDown","ESCAPE","focused","hasCleaner","_shouldForward","prop","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","ctorParameters","propDecorators","McFormFieldWithoutBorders","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","inputValueAccessor","Subject","_uid","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","coerceBooleanProperty","_id","_validateType","ngOnChanges","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","McInputModule","FormsModule","_element","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","Promise","resolve","then","_lineSetter","McLineSetter","_removeOptionFromList","getLabel","_text","textContent","_onTouched","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_onChange","_","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","find","Boolean","McListBase","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","parent","matcher","control","newState","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MC_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","McButtonModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","_vertical"],"mappings":"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"}