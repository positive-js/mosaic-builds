{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/popover/popover.component.ts","../../packages/mosaic/popover/popover.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/popover/popover-animations.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('8.0.0-beta.0-1b1c17b');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A,\n    PAGE_UP,\n    PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McInput } from '@ptsecurity/mosaic/input';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n@Directive({\n    selector: '[mcSelectSearch]',\n    exportAs: 'mcSelectSearch'\n})\nexport class McSelectSearch implements AfterContentInit, OnDestroy {\n    @ContentChild(McInput, {static: false}) input: McInput;\n\n    searchChangesSubscription: Subscription = new Subscription();\n\n    isSearchChanged: boolean = false;\n\n    focus(): void {\n        this.input.focus();\n    }\n\n    reset(): void {\n        this.input.ngControl.reset();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.input) {\n            throw Error('McSelectSearch does not work without input');\n        }\n\n        if (!this.input.ngControl) {\n            throw Error('McSelectSearch does not work without ngControl');\n        }\n\n        this.searchChangesSubscription = this.input.ngControl.valueChanges!.subscribe(() => {\n            this.isSearchChanged = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.searchChangesSubscription.unsubscribe();\n    }\n}\n\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    previousSelectionModelSelected: McOption[] = [];\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ViewChild('optionsContainer', {static: false}) optionsContainer: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger, {static: false}) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    @ContentChild(McSelectSearch, {static: false}) search: McSelectSearch;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(\n                ...this.options.map((option) => option.onSelectionChange),\n                ...this.selectionModel.selected.map((option) => option.onSelectionChange)\n            );\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    resetSearch(): void {\n        if (this.search) {\n            this.search.reset();\n        }\n    }\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n\n        this.resetSearch();\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n            this._changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n\n        if (this.search && this._panelOpen) {\n            this.search.focus();\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.optionsContainer.nativeElement.scrollTop = this.scrollTop;\n\n                this.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getHeightOfOptionsContainer(): number {\n        return this.optionsContainer.nativeElement.getClientRects()[0].height;\n    }\n\n    private updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(\n            Math.floor(this.getHeightOfOptionsContainer() / this.options.first.getHeight())\n        );\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            manager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            manager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            manager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            manager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        this.previousSelectionModelSelected = this.selectionModel.selected;\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getCorrespondOption(value: any): McOption | undefined {\n        return [\n            ...this.options.toArray(),\n            ...this.previousSelectionModelSelected\n        ].find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.getCorrespondOption(value);\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        const typeAheadDebounce = 200;\n\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead(typeAheadDebounce, this.search ? -1 : 0)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (this.search && this.search.isSearchChanged) {\n                    Promise.resolve().then(() => this.keyManager.setFirstItemActive());\n\n                    this.search.isSearchChanged = false;\n                }\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    // If search is avaliable then we focus search again.\n                    if (this.search) {\n                        this.search.focus();\n                    } else {\n                        this.focus();\n                    }\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.optionsContainer.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.optionsContainer.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input', {static: false}) _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A, PAGE_UP, PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger, {static: false}) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection, {static: false}) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n\n                this.tree.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            this.tree.keyManager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            this.tree.keyManager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            this.tree.keyManager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            this.tree.keyManager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet, {static: true}) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectSearch, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [\n        McFormFieldModule,\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger,\n        McOptionModule,\n        CommonModule\n    ],\n    declarations: [\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar, {static: false}) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon, {static: false}) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove), {static: false}) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel, {static: false})\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef, static: true })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef, {static: true})\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective, {static: false}) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer', {static: true})\n    tabListContainer: ElementRef;\n    @ViewChild('tabList', {static: true})\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper', {static: false}) tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader', {static: false}) tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    EXTENDED_OVERLAY_POSITIONS,\n    POSITION_MAP,\n    POSITION_TO_CSS_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { mcPopoverAnimations } from './popover-animations';\n\n\nexport type PopoverVisibility = 'initial' | 'visible' | 'hidden';\n\n@Component({\n    selector: 'mc-popover',\n    templateUrl: './popover.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./popover.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcPopoverAnimations.popoverState],\n    host: {\n        '[class]': 'getCssClassesList',\n        '(body:click)': 'handleBodyInteraction($event)'\n    }\n})\nexport class McPopoverComponent {\n    positions: ConnectionPositionPair[] = [ ...EXTENDED_OVERLAY_POSITIONS ];\n    availablePositions: any;\n    popoverVisibility: PopoverVisibility = 'initial';\n    closeOnInteraction: boolean = false;\n    mcContent: string | TemplateRef<any>;\n    mcHeader: string | TemplateRef<any>;\n    mcFooter: string | TemplateRef<any>;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value !== this.popoverSize) {\n            this.popoverSize = value;\n        } else if (!value) {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string;\n\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    get classList() {\n        return this._classList.join(' ');\n    }\n    set classList(value: string | string[]) {\n        let list: string[] = [];\n\n        if (Array.isArray(value)) {\n            list = value;\n        } else {\n            list.push(value);\n        }\n\n        this._classList = list;\n    }\n    private _classList: string[] = [];\n\n    get getCssClassesList(): string {\n        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;\n    }\n\n    get getPlacementClass(): string {\n        return POSITION_TO_CSS_MAP[this.mcPlacement];\n    }\n\n    /** Subject for notifying that the popover has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n\n    constructor(public changeDetectorRef: ChangeDetectorRef, public componentElementRef: ElementRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.isNonEmptyContent()) {\n            this.closeOnInteraction = true;\n            this.popoverVisibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }\n    }\n\n    hide(): void {\n        this.popoverVisibility = 'hidden';\n        this.mcVisibleChange.emit(false);\n\n        // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n        this.markForCheck();\n    }\n\n    isNonEmptyContent(): boolean {\n        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));\n    }\n\n    /** Returns an observable that notifies when the popover has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    isVisible(): boolean {\n        return this.popoverVisibility === 'visible';\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    isTemplateRef(value: any): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    isNonEmptyString(value: any): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    handleBodyInteraction(e): void {\n        if (this.closeOnInteraction && !this.componentElementRef.nativeElement.contains(e.target)) {\n            this.hide();\n        }\n    }\n\n    animationStart() {\n            this.closeOnInteraction = false;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        const toState = event.toState as PopoverVisibility;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n            this.onHideSubject.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n            this.closeOnInteraction = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.onHideSubject.complete();\n    }\n}\n\nexport const MC_POPOVER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-popover-scroll-strategy');\n\n/** @docs-private */\nexport function mcPopoverScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_POPOVER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcPopoverScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid popover position. */\nexport function getMcPopoverInvalidPositionError(position: string) {\n    return Error(`McPopover position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n/** @docs-private\n * Minimal width of anchor element should be equal or greater than popover arrow width plus arrow offset right/left\n * MIN_ANCHOR_ELEMENT_WIDTH used for positioning update inside handlePositionUpdate()\n */\nconst MIN_ANCHOR_ELEMENT_WIDTH: number = 40;\n\n@Directive({\n    selector: '[mcPopover]',\n    exportAs: 'mcPopover',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()',\n        '[class.mc-popover_open]': 'isOpen'\n    }\n})\nexport class McPopover implements OnInit, OnDestroy {\n    isPopoverOpen: boolean = false;\n    isDynamicPopover = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McPopoverComponent>;\n    availablePositions: any;\n    popover: McPopoverComponent | null;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input('mcPopoverHeader')\n    get mcHeader(): string | TemplateRef<any> {\n        return this._mcHeader;\n    }\n    set mcHeader(value: string | TemplateRef<any>) {\n        this._mcHeader = value;\n        this.updateCompValue('mcHeader', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcHeader: string | TemplateRef<any>;\n\n    @Input('mcPopoverContent')\n    get mcContent(): string | TemplateRef<any> {\n        return this._mcContent;\n    }\n    set mcContent(value: string | TemplateRef<any>) {\n        this._mcContent = value;\n        this.updateCompValue('mcContent', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcContent: string | TemplateRef<any>;\n\n    @Input('mcPopoverFooter')\n    get mcFooter(): string | TemplateRef<any> {\n        return this._mcFooter;\n    }\n    set mcFooter(value: string | TemplateRef<any>) {\n        this._mcFooter = value;\n        this.updateCompValue('mcFooter', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcFooter: string | TemplateRef<any>;\n\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcPopoverDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcPopoverMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcPopoverMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcPopoverTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPopoverSize')\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value && (value === 'small' || value === 'normal' || value === 'large')) {\n            this.popoverSize = value;\n            this.updateCompValue('mcPopoverSize', value);\n        } else {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string = 'normal';\n\n    @Input('mcPopoverPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcPopoverClass')\n    get classList() {\n        return this._classList;\n    }\n    set classList(value: string | string[]) {\n        this._classList = value;\n        this.updateCompValue('classList', this._classList);\n    }\n    private _classList: string | string[];\n\n    @Input('mcPopoverVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    get isOpen(): boolean {\n        return this.isPopoverOpen;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_POPOVER_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-popover')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...EXTENDED_OVERLAY_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.popover) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the popover.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-popover__panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached() && this.popover) {\n            this.overlayRef.detach();\n            this.popover = null;\n        }\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.popover) {\n            this.updateCompValue('classList', this.classList);\n            this.popover.markForCheck();\n        }\n\n        this.handlePositionUpdate();\n    }\n\n    handlePositionUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n\n        const verticalOffset = this.hostView.element.nativeElement.clientHeight / 2; // tslint:disable-line\n        const anchorElementWidth = this.hostView.element.nativeElement.clientWidth; // tslint:disable-line\n\n        if (this.mcPlacement === 'rightTop' || this.mcPlacement === 'leftTop') {\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 20}px`; // tslint:disable-line\n        }\n\n        if (this.mcPlacement === 'rightBottom' || this.mcPlacement === 'leftBottom') {\n            const currentContainer = this.overlayRef.overlayElement.style.bottom || '0px';\n            this.overlayRef.overlayElement.style.bottom =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 22}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topRight' || this.mcPlacement === 'bottomRight') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.right || '0px';\n            this.overlayRef.overlayElement.style.right =\n                `${parseInt(currentContainer.split('px')[0], 10) - 18}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topLeft' || this.mcPlacement === 'bottomLeft') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.left || '0px';\n            this.overlayRef.overlayElement.style.left =\n                `${parseInt(currentContainer.split('px')[0], 10) - 20}px`; // tslint:disable-line\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicPopover && value) {\n            if (this.popover) {\n                this.popover[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.popover) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McPopoverComponent, this.hostView);\n\n                this.popover = overlayRef.attach(this.portal).instance;\n                this.isDynamicPopover = true;\n                const properties = [\n                    'mcPlacement',\n                    'mcPopoverSize',\n                    'mcTrigger',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'classList',\n                    'mcVisible',\n                    'mcHeader',\n                    'mcContent',\n                    'mcFooter'\n                ];\n\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.popover.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isPopoverOpen = data;\n                    });\n                this.popover.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n            }\n            this.updatePosition();\n            this.popover.show();\n        }\n    }\n\n    hide(): void {\n        if (this.popover) {\n            this.popover.hide();\n        }\n    }\n\n    /** Updates the position of the current popover. */\n    updatePosition(reapplyPosition: boolean = false) {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n\n        //\n        // FIXME: Необходимо в некоторых моментах форсировать позиционировать только после рендеринга всего контента\n        //\n        if (reapplyPosition) {\n            setTimeout(() => {\n                position.reapplyLastPosition();\n            });\n        }\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        let originPosition: IOriginConnectionPosition;\n        const originXPosition = this.getOriginXaxis();\n        const originYPosition = this.getOriginYaxis();\n        originPosition = {originX: originXPosition, originY: originYPosition};\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    getOriginXaxis(): HorizontalConnectionPos {\n        const position = this.mcPlacement;\n        let origX: HorizontalConnectionPos;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        if (position === 'top' || position === 'bottom') {\n            origX = 'center';\n        } else if (position.toLowerCase().includes('right') && !isLtr ||\n            position.toLowerCase().includes('left') && isLtr) {\n            origX = 'start';\n        } else if (position.toLowerCase().includes('right') && isLtr ||\n            position.toLowerCase().includes('left') && !isLtr) {\n            origX = 'end';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origX;\n    }\n\n    getOriginYaxis(): VerticalConnectionPos {\n        const position = this.mcPlacement;\n        let origY: VerticalConnectionPos;\n        if (position === 'right' || position === 'left') {\n            origY = 'center';\n        } else if (position.toLowerCase().includes('top')) {\n            origY = 'top';\n        } else if (position.toLowerCase().includes('bottom')) {\n            origY = 'bottom';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origY;\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        let overlayPosition: IOverlayConnectionPosition;\n        if (this.availablePositions[position]) {\n            overlayPosition = {\n                overlayX : this.availablePositions[position].overlayX,\n                overlayY: this.availablePositions[position].overlayY\n            };\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McPopoverComponent,\n    McPopover,\n    MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './popover.component';\n\n\n@NgModule({\n    declarations: [McPopoverComponent, McPopover],\n    exports: [McPopoverComponent, McPopover],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McPopoverComponent]\n})\nexport class McPopoverModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken, ViewEncapsulation\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO: Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = !this._selected;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/esm2015/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet, {static: true}) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer', {static: false}) modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef, static: false}) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef, static: false}) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef, static: false })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef, static: false })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n\nexport const mcPopoverAnimations: {\n    readonly popoverState: AnimationTriggerMetadata;\n} = {\n    /** Animation that transitions a tooltip in and out. */\n    popoverState: trigger('state', [\n        state('initial', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('* => visible', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => hidden', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    hasModifierKey,\n    HOME,\n    PAGE_DOWN,\n    PAGE_UP,\n    SPACE,\n    TAB,\n    UP_ARROW\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    McLine,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\nimport { Subscription } from 'rxjs';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()',\n        '(click)': 'handleClick($event)'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements OnDestroy, OnInit, IFocusableOption {\n    hasFocus: boolean = false;\n\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    @ViewChild('text', {static: false}) text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection.reportValueChange();\n        }\n    }\n\n    private _selected = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection.removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n    }\n\n    getLabel() {\n        return this.text ? this.text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    handleClick($event) {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this, $event);\n    }\n\n    handleFocus() {\n        if (this.disabled || this.hasFocus) { return; }\n\n        this.hasFocus = true;\n    }\n\n    handleBlur() {\n        this.hasFocus = false;\n\n        this.listSelection.onTouched();\n    }\n\n    getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\nexport class McListSelectionChange {\n    constructor(\n        public source: McListSelection,\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\n// tslint:disable-next-line:naming-convention\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': 'onTouched()',\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string[] | null;\n\n    private modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this.keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this.tempValues) {\n            this.setOptionsFromValues(this.tempValues);\n            this.tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this.modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this.modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this.element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this.reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this.reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption, $event?: KeyboardEvent): void {\n        this.keyManager.updateActiveItem(option);\n\n        const withShift = $event ? hasModifierKey($event, 'shiftKey') : false;\n        const withCtrl = $event ? hasModifierKey($event, 'ctrlKey') : false;\n\n        if (withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n        } else if (withCtrl) {\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitChangeEvent(option);\n        this.reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this.setOptionsFromValues(values || []);\n        } else {\n            this.tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    getHeight(): number {\n        return this.element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    // tslint:disable-next-line:no-empty\n    onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    removeOptionFromList(option: McListOption) {\n        if (option.hasFocus) {\n            const optionIndex = this.getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this.keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this.keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n\n                break;\n\n            case TAB:\n                this.keyManager.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                this.keyManager.setNextItemActive();\n\n                break;\n            case UP_ARROW:\n                this.keyManager.setPreviousItemActive();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n\n                break;\n            default:\n                return;\n        }\n\n        event.preventDefault();\n\n        this.setFocusedOption(this.keyManager.activeItem as McListOption, event);\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    reportValueChange() {\n        if (this.options) {\n            this.onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this.getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    private lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this.lineSetter = new McLineSetter(this.lines, this._element);\n    }\n\n    handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon, {static: false}) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button', {static: false}) button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content', {static: false}) content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent, {static: false}) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView, {static: false}) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView, {static: false}) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView, {static: false}) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar, {static: false}) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n\n                this.datepickerInput.elementRef.nativeElement.focus();\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', {static: false}) _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, {static: false}) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO: Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    getHeight(): number {\n        return this.element.nativeElement.getClientRects()[0].height;\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n\n    abstract focus(): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl, {static: false}) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl, {static: false}) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper, {static: false}) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer', {static: true}) connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n            this._control.focus();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["inputs","host","[attr.disabled]","[attr.tabindex]","type","ElementRef","FocusMonitor","McDropdownTrigger","decorators","Optional","Self","tabIndex","Input","McVerticalNavbarItem","_McVerticalNavbarMixinBase","McVerticalNavbarHeader","Directive","args","selector","class","McVerticalNavbarTitle","McVerticalNavbar","cd","this","expanded","prototype","toggle","markForCheck","Component","changeDetection","ChangeDetectionStrategy","OnPush","template","styles","encapsulation","ViewEncapsulation","None","animations","toggleVerticalNavbarAnimation","ChangeDetectorRef","COMPONENTS","McVerticalNavbarItemIcon","McVerticalNavbarItemBadge","McVerticalNavbarModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","McIconModule","exports","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","proxiedChange","changes","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelRef","McSidepanelService","McSidepanelClose","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","OverlayModule","PortalModule","McCommonModule","providers","McSidepanelContainerComponent","entryComponents","McSplitterComponent","elementRef","ngZone","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","Object","defineProperty","_direction","direction","disabled","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","index","length","order","getSize","setOrder","push","initialSize","ngOnInit","setStyle","isVertical","onMouseDown","event","leftAreaIndex","rightAreaIndex","_this","leftArea","rightArea","startPoint","x","screenX","y","screenY","forEach","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","e","onMouseMove","removeArea","indexToRemove","some","splice","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","property","value","nativeElement","preserveWhitespaces","NgZone","Renderer2","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","Error","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","ngOnDestroy","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","id","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","exportAs","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","trigger","left","transition","animate","String","Attribute","ViewChild","static","Output","McToggleModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","scrollDispatcher","hostView","scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","listener","removeEventListener","clear","complete","handleKeydown","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","McVerticalNavbarItemBase","focusMonitor","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","McFormFieldControl","McTreeSelect","CdkTree","ViewportRuler","ErrorStateMatcher","NgForm","FormGroupDirective","McFormField","NgControl","MC_SELECT_SCROLL_STRATEGY","panel","overlayDir","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelectTrigger","tree","McTreeSelection","openedChange","openedStream","closedStream","selectionChange","valueChange","errorStateMatcher","sortComparator","placeholder","required","multiple","autoSelect","compareWith","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","stateChanges","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngOnChanges","ngDoCheck","updateErrorState","dirtyCheckNativeValue","textarea","outerHeight","window","diff","height","Math","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","McTimepickerMixinBase","McTimepicker","dateAdapter","_minTime","_maxTime","onChange","noop","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","indexOf","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","MC_INPUT_VALUE_ACCESSOR","DateAdapter","minTime","maxTime","McTimepickerModule","MC_SIDEPANEL_DATA","Right","Left","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","changeDetectorRef","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","detectChanges","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","maxWidth","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","Injectable","Injector","SkipSelf","sidepanelService","getClosestSidepanel","McSelect","getCorrespondOption","options","toArray","previousSelectionModelSelected","option","_compareWith","error","isDevMode","console","warn","selectValue","correspondingOption","selectionModel","select","initKeyManager","keyManager","ActiveDescendantKeyManager","withTypeAhead","search","withVerticalOrientation","withHorizontalOrientation","isRtl","tabOut","destroy","_panelOpen","scrollActiveOptionIntoView","activeItem","selectViaInteraction","resetOptions","changedOrDestroyed","optionSelectionChanges","onSelect","isUserInput","isSearchChanged","Promise","resolve","then","setFirstItemActive","apply","setOptionIds","wasSelected","isSelected","_multiple","selected","deselect","setActiveItem","sortValues","propagateChanges","options_1","sort","a","b","fallbackValue","valueToEmit","_value","McSelectChange","optionIds","join","highlightCorrectOption","empty","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","optionsContainer","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","offsetX","overlayRect","getBoundingClientRect","viewportSize","_viewportRuler","getViewportSize","first","group","leftOverflow","rightOverflow","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","MC_OPTION_PARENT_COMPONENT","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","McSelectSearch","McSelectMixinBase","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectChange","McTreeSelectBase","viewportRuler","dir","parentFormField","scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","o","defer","onSelectionChange","onStable","switchMap","_autoSelect","_focused","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","panelOpen","ngAfterContentInit","SelectionModel","changed","added","removed","ngAfterViewInit","calculateHiddenItems","startWith","updateSelectedOptions","fontSize","setSelectionByValue","viewValue","selectedOptions","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","updateScrollSize","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","originalOnKeyDown","HOME","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","Array","isArray","getMcSelectNonArrayValueError","_removable","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","addHostClassName","_i","TAG_ATTRIBUTE_NAMES_1","TAG_ATTRIBUTE_NAMES","attr","hasAttribute","tagName","toLowerCase","_selected","dispatchSelectionChange","toggleSelected","hasFocus","removable","handleClick","DELETE","BACKSPACE","selectable","blur","_ngZone","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","McTagAvatar","trailingIcon","McTagTrailingIcon","removeIcon","McTagRemove","_McTagMixinBase","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","_selectable","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","tagListSelectable","FocusKeyManager","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","useValue","McSelectBase","searchChangesSubscription","Subscription","reset","McInput","_renderer","_dir","_parentFormField","_scrollStrategyFactory","resetSearch","onRemoveMatcherItem","getHeightOfOptionsContainer","getClientRects","withScrollSize","floor","getHeight","manager","McTabContent","McTabLabel","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","McTab","viewContainerRef","textLabel","isActive","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","McTabBody","onCentering","beforeCentering","afterLeavingCenter","onCentered","animationDuration","dirChangeSubscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","McTabBodyPortal","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","McTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[attr.aria-disabled]","McTabHeaderBase","McTabHeader","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","coercedValue","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTagSelectionChange","McTagBase","popover","handlePositionUpdate","McPopover","verticalOffset","anchorElementWidth","clientWidth","isDynamicPopover","McPopoverComponent","isPopoverOpen","reapplyPosition","reapplyLastPosition","getOriginXaxis","getOriginYaxis","origX","includes","getMcPopoverInvalidPositionError","origY","[class.mc-popover_open]","MC_POPOVER_SCROLL_STRATEGY","mcHeader","mcContent","mcFooter","mcPopoverSize","McPopoverModule","MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","setSelected","setActiveStyles","setInactiveStyles","clientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcComponentParams","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","mcPopoverAnimations","popoverState","opacity","componentElementRef","EXTENDED_OVERLAY_POSITIONS","popoverVisibility","_classList","popoverSize","list","getPlacementClass","POSITION_TO_CSS_MAP","isNonEmptyContent","isTemplateRef","isNonEmptyString","isVisible","animationStart","[class]","mcPopoverScrollStrategyFactory","_mcHeader","_mcContent","_mcFooter","McListSelection","lines","McLine","checkboxPosition","McListOption","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","modelChanges","tempValues","setOptionsFromValues","_b","_c","selectAll","reportValueChange","deselectAll","values","getSelectedOptionValues","listOption","removeOptionFromList","optionIndex","setPreviousItemActive","setNextItemActive","TAB","getOptionByValue","[tabIndex]","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_element","lineSetter","McLineSetter","handleFocus","handleBlur","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","_getHostElement","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","localeSubscription","disabledChange","McDatepickerInput","registerOnValidatorChange","validatorOnChange","validate","c","cvaOnChange","isAltDownArrow","datepicker","readOnly","date","dateFormats","dateInput","lastValueValid","isValid","getValidDateOrNull","sameDate","McDatepickerInputEvent","dateChange","getThemePalette","formField","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_keyManager","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","wasSelected_1","[class.mc-focused]","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","onYearSelected","compareDate","oldActiveDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","NG_VALIDATORS","targetElement","datepickerSubscription","mcDatepickerParse","minValidator","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","Validators","compose","localeChanges","oldDate","_min","_max","[class.mc-card_readonly]","[class.mc-card_selected]","readonly","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","get","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","arrows","allowedKeys","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_onChange","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","McAutocomplete","_autoActiveFirstOption","_isOpen","showPanel","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","hostElement","onClick","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","scrollThrottle","openSidepanels","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_lines","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults"],"mappings":"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"}