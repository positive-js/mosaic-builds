{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/select/select.component.ts","../../src/lib/select/select.module.ts","../../src/lib/splitter/splitter.component.ts","../../src/lib/splitter/splitter.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/input/input-number-validators.ts","../../src/lib/input/input.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-number-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/stepper.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/stepperUtils.ts","../../src/lib/input/input.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip',\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this._handleBodyInteraction()'\n    }\n})\n\nexport class McToolTipComponent {\n    _prefix = 'mc-tooltip_placement';\n    _positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    _classMap = {};\n    _placement = 'top';\n    _trigger = 'hover';\n    isTitleString: boolean;\n    visibleSource = new BehaviorSubject<boolean>(false);\n    $visible: Observable<boolean> = this.visibleSource.asObservable();\n    _title: string | TemplateRef<void>;\n    showTId: number;\n    hideTId: number;\n    availablePositions: any;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._title = value;\n        }\n    }\n\n    get mcTitle(): string | TemplateRef<void> {\n        return this._title;\n    }\n\n    @Input()\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this.visibleSource.value !== visible) {\n            this.visibleSource.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n\n    get mcVisible(): boolean {\n        return this.visibleSource.value;\n    }\n\n    @Input()\n    set mcTrigger(value: string) {\n        this._trigger = value;\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input()\n    set mcPlacement(value: string) {\n        if (value !== this._placement) {\n            this._placement = value;\n            this._positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._placement = 'top';\n        }\n    }\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide: Subject<any> = new Subject();\n    private _closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.hideTId) {\n            clearTimeout(this.hideTId);\n        }\n\n        if (!this.isContentEmpty()) {\n            this._closeOnInteraction = true;\n            this.showTId = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTId) {\n            clearTimeout(this.showTId);\n        }\n\n        this.hideTId = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this._onHide.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this._classMap = {\n            [ `${this._prefix}-${this._placement}` ]: true\n        };\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this._onHide.asObservable();\n    }\n\n    _markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    _handleBodyInteraction(): void {\n        if (this._closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MC_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mc-tooltip]',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\n\nexport class McTooltipDirective implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    _title: string;\n    _disabled: boolean = false;\n    _mouseEnterDelay: number;\n    _mouseLeaveDelay: number;\n    _visible: boolean;\n    _trigger: string = 'hover';\n    _placement: string = 'top';\n    _overlayRef: OverlayRef | null;\n    _portal: ComponentPortal<McToolTipComponent>;\n    availablePositions: any;\n    tooltip: McToolTipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mc-tooltip')\n    set mcTitle(title: string) {\n        this._title = title;\n        this.updateCompValue('mcTitle', title);\n    }\n\n    get mcTitle(): string {\n        return this._title;\n    }\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    @Input('mcMouseEnterDelay')\n    set mcMouseEnterDelay(value: number) {\n        this._mouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n\n    get mcMouseEnterDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcMouseLeaveDelay')\n    set mcMouseLeaveDelay(value: number) {\n        this._mouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n\n    get mcMouseLeaveDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcVisible')\n    set mcVisible(value: boolean) {\n        this._visible = value;\n        this.updateCompValue('mcVisible', value);\n    }\n\n    get mcVisible(): boolean {\n        return this._visible;\n    }\n\n    @Input('mcTrigger')\n    set mcTrigger(value: string) {\n        this._trigger = value;\n        this.updateCompValue('mcTrigger', value);\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input('mcPlacement')\n    set mcPlacement(value: string) {\n        if (value) {\n            this._placement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._placement = 'top';\n        }\n    }\n\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _overlay: Overlay,\n        private elementRef: ElementRef,\n        private _ngZone: NgZone,\n        private _scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    _createOverlay(): OverlayRef {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n\n        return this._overlayRef;\n    }\n\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this._overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this._overlayRef.overlayElement.style.top || '0px';\n            this._overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        const position =\n            this._overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n\n    private show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this._createOverlay();\n                this._detach();\n                this._portal = this._portal || new ComponentPortal(McToolTipComponent, this.hostView);\n                this.tooltip = overlayRef.attach(this._portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mcVisible',\n                    'mcTrigger',\n                    'mcPlacement' ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this._visible = data;\n                        this.mcVisibleChange.emit(data);\n                    });\n            }\n            this._updatePosition();\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        }\n    }\n\n    private hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McToolTipComponent,\n    McTooltipDirective,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [ McToolTipComponent, McTooltipDirective ],\n    exports: [ McToolTipComponent, McTooltipDirective ],\n    imports: [ BrowserAnimationsModule, CommonModule, OverlayModule ],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [ McToolTipComponent ]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-341c3b6');\n","/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex, HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanUpdateErrorStateCtor & typeof McSelectBase\n    = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    typeof CdkTree\n    = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase: CanColorCtor & typeof McTagBase\n    = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {'[attr.max]': 'max ? max : null'}\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-stepper-step-up mc-icon mc-angle-L_16 mc-icon-flip-h\" (mousedown)=\"onStepUp($event)\"></i>\n        <i class=\"mc mc-stepper-step-down mc-icon mc-angle-L_16\" (mousedown)=\"onStepDown($event)\"></i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase\n    = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase =\n    mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    private readonly _step: number;\n    get step() {\n        return this._step;\n    }\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    private readonly _bigStep: number;\n    get bigStep() {\n        return this._bigStep;\n    }\n\n    private readonly _min: number;\n    private readonly _max: number;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this._step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this._bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this._min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this._max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this._bigStep : this._step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this._max, this._min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this._max, this._min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase\n    = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n"],"names":["Object","defineProperty","McTooltipDirective","prototype","get","this","_visible","set","value","updateCompValue","_trigger","_placement","isTooltipOpen","parentDisabled","_createOverlay","_this","_overlayRef","strategy","_overlay","position","flexibleConnectedTo","elementRef","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","DEFAULT_4_POSITIONS","slice","scrollableAncestors","_scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","_destroyed","subscribe","change","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","mcVisible","_ngZone","run","hide","create","direction","_dir","positionStrategy","panelClass","scrollStrategy","_scrollStrategy","_updatePosition","detachments","_detach","hasAttached","detach","$event","updatedPlacement","mcPlacement","keys","availablePositions","some","key","connectionPair","originX","originY","overlayX","overlayY","setClassMap","handlePositioningUpdate","pos","overlayElement","clientHeight","hostView","element","nativeElement","currentContainer","style","top","parseInt","split","isDynamicTooltip","ngOnInit","mcTrigger","manualListeners","show","forEach","listener","event","addEventListener","ngOnDestroy","dispose","removeEventListener","clear","$unsubscribe","next","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","getConfig","origin","_getOrigin","overlay","_getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","_invertPosition","x","y","overlayPosition","newX","newY","disabled","overlayRef","_portal","ComponentPortal","McToolTipComponent","attach","instance","afterHidden","property","mcVisibleChange","distinctUntilChanged","data","emit","tslib_1.__decorate","Output","Input","HostBinding","Directive","selector","host","(keydown)","(touchend)","tslib_1.__param","Inject","MC_TOOLTIP_SCROLL_STRATEGY","Optional","tslib_1.__metadata","Overlay","ElementRef","NgZone","ScrollDispatcher","ViewContainerRef","Directionality","McToolTipModule","NgModule","declarations","exports","imports","BrowserAnimationsModule","CommonModule","OverlayModule","providers","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","entryComponents","VERSION","Version","SELECT_PANEL_PADDING_X","empty","_multiple","selectedOptions","_selectionModel","selected","_isRtl","reverse","McSelect","isEmpty","_handleKeydown","panelOpen","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_panelDoneAnimating","_changeDetectorRef","markForCheck","_onFocus","_focused","stateChanges","_onBlur","_onTouched","_onAttached","overlayDir","positionChange","take","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_scrollTop","_getPanelTheme","_parentFormField","color","focus","_elementRef","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","open","onRemoveMatcherItem","option","stopPropagation","deselect","_panelOpen","_calculateHiddenItems","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tags","tag","offsetTop","offsetHeight","getBoundingClientRect","width","hiddenItems","length","itemsCounter","trigger","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","_renderer","setStyle","appendChild","querySelectorAll","item","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","multiple","altKey","preventDefault","_keyManager","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","close","activeItem","A","ctrlKey","hasDeselectedOptions_1","options","select","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_initializeSelection","Promise","resolve","then","_setSelectionByValue","ngControl","_value","Array","isArray","getMcSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","_compareWith","error","isDevMode","console","warn","_initKeyManager","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","tabOut","_destroy","_scrollActiveOptionIntoView","_resetOptions","changedOrDestroyed","merge","changes","optionSelectionChanges","_onSelect","source","isUserInput","apply","map","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","valueChange","_onChange","selectionChange","McSelectChange","_optionIds","id","join","_highlightCorrectOption","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","index","undefined","_calculateOverlayPosition","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","offsetX","overlayRect","viewportSize","_viewportRuler","getViewportSize","isRtl","first","group","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","_triggerRect","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","ViewChild","ViewChildren","McTag","QueryList","CdkConnectedOverlay","ContentChildren","McOption","descendants","McOptgroup","ContentChild","McSelectTrigger","ErrorStateMatcher","EventEmitter","Observable","McSelect_1","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","provide","McFormFieldControl","useExisting","MC_OPTION_PARENT_COMPONENT","Self","Attribute","MC_SELECT_SCROLL_STRATEGY","ViewportRuler","ChangeDetectorRef","Renderer2","NgForm","FormGroupDirective","McFormField","NgControl","String","_McSelectMixinBase","McSelectModule","McOptionModule","McIconModule","McTagModule","McFormFieldModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","McSplitterComponent","ngZone","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","_direction","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","order","getSize","setOrder","push","initialSize","isVertical","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","onMouseMove","removeArea","indexToRemove","splice","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","preserveWhitespaces","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","Error","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","McSplitterModule","cdr","_prefix","_positions","_classMap","visibleSource","BehaviorSubject","$visible","asObservable","mcMouseEnterDelay","mcMouseLeaveDelay","_onHide","Subject","_closeOnInteraction","POSITION_MAP","_title","isTitleString","TemplateRef","visible","unshift","hideTId","clearTimeout","isContentEmpty","showTId","setTimeout","_markForCheck","mcTitle","_handleBodyInteraction","fadeAnimation","(body:click)","InjectionToken","deps","useFactory","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY","Map","title","_mouseEnterDelay","_mouseLeaveDelay","McProgressSpinner","percentage","_McProgressSpinnerMixinBase","McProgressSpinnerModule","PlatformModule","nextUniqueId","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","McRadioGroup","multi","_super","_changeDetector","call","_name","_selected","_isInitialized","_labelPosition","_required","controlValueAccessorChangeFn","onTouched","tslib_1.__extends","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","checked","ngAfterContentInit","touch","emitChangeEvent","_radios","radio","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","name","isAlreadySelected","McRadioButton","role","McRadioButtonBase","_McRadioButtonMixinBase","mixinColor","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","required","labelPosition","onInputClick","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","UniqueSelectionDispatcher","McRadioModule","A11yModule","McCommonModule","McTreeNodeDef","McTreeNodeDef_1","CdkTreeNodeDef","McTreeNodePadding","arguments","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","isExpandable","_setPadding","CdkTreeNodePadding","McTreeNodeOption","treeSelection","_hasFocus","McTreeNodeOption_1","setSelected","setFocusedOption","toggle","_getHeight","getClientRects","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","McTreeSelection","_McTreeSelectionBase","CdkTree","McTreeNavigationChange","McTreeSelectionChange","_differs","tabIndex","autoSelect","noUnselect","navigationChange","SelectionModel","McTreeSelection_1","rawValue","log","_onKeyDown","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","FocusKeyManager","updateScrollSize","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","CdkTreeNodeOutlet","[tabIndex]","IterableDiffers","MC_TREE_DIRECTIVES","McTreeModule","CdkTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","disconnect","DataSource","McTreeNestedDataSource","McTagBase","_McTagMixinBase","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","transform","minWidth","opacity","transition","query","animateChild","animate","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","mixinErrorState","_scrollStrategyFactory","_triggerFontSize","_panelDoneAnimatingStream","controlType","defer","onSelectionChange","onStable","switchMap","openedChange","_openedStream","filter","o","_closedStream","_uid","o1","o2","valueAccessor","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","_id","added","removed","startWith","ngAfterViewInit","ngDoCheck","updateErrorState","ngOnChanges","fontSize","viewValue","mcCancelText","McModalComponent","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","mcGetContainer","HTMLElement","OverlayRef","modalControl","registerModal","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusButtonOk","changeVisibleFromInside","destroy","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","target","contains","isModalType","type","mcModalType","onKeyDown","onClickCloseBtn","ok","mcOnOk","cancel","mcOnCancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","mcAfterOpen","mcAfterClose","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","changeDetectorRef","changeDetector","isVisible","window","updateTransformOrigin","buttons","autoLoading","component","factory","cfr","resolveComponentFactory","childInjector","Injector","McModalRef","useValue","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","lastPosition","ModalUtil","getLastClickPosition","transformOrigin","offsetLeft","plusNum","openModals","document","body","mcMeasureScrollbarService","scrollBarWidth","read","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","McModalControlService","CssUnitPipe","defaultUnit","formatted","isNaN","Pipe","ModalBuilderForService","createModal","changeProps","modalRef","destroyModal","keydownEvents","mcCloseByESC","McModalService","afterAllClose","closeAll","mcWidth","confirm","confirmType","mcClassName","success","simpleConfirm","delete","Injectable","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","hasAttribute","stopImmediatePropagation","[attr.disabled]","FocusMonitor","Platform","McNavbarContainer","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","MaxValidator","_createValidator","validate","c","_validator","registerOnValidatorChange","Validators","MAX_VALIDATOR","[attr.max]","McInputModule","FormsModule","McInput","McNumberInput","McInputMono","MinValidator","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","McLayoutModule","McListOption","_element","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_lineSetter","McLineSetter","_lines","_removeOptionFromList","getLabel","_text","textContent","_getHostElement","McLine","McListSelection","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","EMPTY","_","_tempValues","_setOptionsFromValues","_i","_c","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","Boolean","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","SkipSelf","listenDocumentClick","clientX","clientY","ModalUtil$1","_mcVisible","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcOkType","_mcOkLoading","_mcCancelLoading","mcOkText","McIconButton","McButton","McAnchor","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McFormFieldNumberControl","McHint","McPrefix","McStepper","stepUp","stepDown","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_control","_numberControl","hasStepper","_stepper","valueChanges","ngAfterContentChecked","clearValue","focused","hasCleaner","onHoverChanged","isHovered","step","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseenter)","(mouseleave)","McFormFieldWithoutBorders","MC_INPUT_VALUE_ACCESSOR","res","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","_model","bigStep","_step","isDigit","_bigStep","_min","Infinity","_max","_host","self","getPrototypeOf","normalizeSplitter","McNumberInput_1","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","DELETE","BACKSPACE","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","onPaste","clipboardData","getData","valueAsNumber","toString","update","replace","isFloat","isInt","test","NgModel","(paste)","inputValueAccessor","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","MIN_VALIDATOR","[attr.min]","__extends","d","__","constructor","extendStatics","__decorate","decorators","desc","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","control","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","obj","scrollStrategies","reposition","scrollThrottle","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","trim","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","topCenter","offsetY","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","queries","McButtonBase","_McButtonMixinBase","focusMonitor","_haltDisabledEvents"],"mappings":"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"}