{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/popover/popover.component.ts","../../packages/mosaic/popover/popover.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/popover/popover-animations.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.6-37c2782');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst formValidators: WeakMap<FormControl, ValidatorFn | null> = new WeakMap();\nconst formValidatorOnChangeRegistrators: WeakMap<FormControl, () => void> = new WeakMap();\nconst validatorOnChange = (c: FormControl) => {\n    const validatorOnChangeHandler = formValidatorOnChangeRegistrators.get(c);\n\n    if (validatorOnChangeHandler !== undefined) { validatorOnChangeHandler(); }\n};\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c: FormControl) {\n                    // TODO This is `workaround` to bind singleton-like Validator implementation to\n                    // context of each validated component. This MUST be realized in proper way!\n                    if (this.__validatorOnChangeHandler !== undefined) {\n                        formValidatorOnChangeRegistrators.set(c, this.__validatorOnChangeHandler);\n                        this.__validatorOnChangeHandler = undefined;\n                    }\n                    const validator = formValidators.get(c);\n\n                    return validator ? validator(c) : null;\n                },\n                registerOnValidatorChange(fn: () => void): void {\n                    this.__validatorOnChangeHandler = fn;\n                }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        validatorOnChange(<FormControl> this.ngControl.control);\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n\n        formValidators.set(\n            <FormControl> this.ngControl.control,\n            Validators.compose([\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ])\n        );\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    EXTENDED_OVERLAY_POSITIONS,\n    POSITION_MAP,\n    POSITION_TO_CSS_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { mcPopoverAnimations } from './popover-animations';\n\n\nexport type PopoverVisibility = 'initial' | 'visible' | 'hidden';\n\n@Component({\n    selector: 'mc-popover',\n    templateUrl: './popover.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./popover.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcPopoverAnimations.popoverState],\n    host: {\n        '[class]': 'getCssClassesList',\n        '(body:click)': 'handleBodyInteraction($event)'\n    }\n})\nexport class McPopoverComponent {\n    positions: ConnectionPositionPair[] = [ ...EXTENDED_OVERLAY_POSITIONS ];\n    availablePositions: any;\n    popoverVisibility: PopoverVisibility = 'initial';\n    closeOnInteraction: boolean = false;\n    mcContent: string | TemplateRef<any>;\n    mcHeader: string | TemplateRef<any>;\n    mcFooter: string | TemplateRef<any>;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value !== this.popoverSize) {\n            this.popoverSize = value;\n        } else if (!value) {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string;\n\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    get classList() {\n        return this._classList.join(' ');\n    }\n    set classList(value: string | string[]) {\n        let list: string[] = [];\n\n        if (Array.isArray(value)) {\n            list = value;\n        } else {\n            list.push(value);\n        }\n\n        this._classList = list;\n    }\n    private _classList: string[] = [];\n\n    get getCssClassesList(): string {\n        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;\n    }\n\n    get getPlacementClass(): string {\n        return POSITION_TO_CSS_MAP[this.mcPlacement];\n    }\n\n    /** Subject for notifying that the popover has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n\n    constructor(public changeDetectorRef: ChangeDetectorRef, public componentElementRef: ElementRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.isNonEmptyContent()) {\n            this.closeOnInteraction = true;\n            this.popoverVisibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }\n    }\n\n    hide(): void {\n        this.popoverVisibility = 'hidden';\n        this.mcVisibleChange.emit(false);\n\n        // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n        this.markForCheck();\n    }\n\n    isNonEmptyContent(): boolean {\n        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));\n    }\n\n    /** Returns an observable that notifies when the popover has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    isVisible(): boolean {\n        return this.popoverVisibility === 'visible';\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    isTemplateRef(value: any): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    isNonEmptyString(value: any): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    handleBodyInteraction(e): void {\n        if (this.closeOnInteraction && !this.componentElementRef.nativeElement.contains(e.target)) {\n            this.hide();\n        }\n    }\n\n    animationStart() {\n            this.closeOnInteraction = false;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        const toState = event.toState as PopoverVisibility;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n            this.onHideSubject.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n            this.closeOnInteraction = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.onHideSubject.complete();\n    }\n}\n\nexport const MC_POPOVER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-popover-scroll-strategy');\n\n/** @docs-private */\nexport function mcPopoverScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_POPOVER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcPopoverScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid popover position. */\nexport function getMcPopoverInvalidPositionError(position: string) {\n    return Error(`McPopover position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n/** @docs-private\n * Minimal width of anchor element should be equal or greater than popover arrow width plus arrow offset right/left\n * MIN_ANCHOR_ELEMENT_WIDTH used for positioning update inside handlePositionUpdate()\n */\nconst MIN_ANCHOR_ELEMENT_WIDTH: number = 40;\n\n@Directive({\n    selector: '[mcPopover]',\n    exportAs: 'mcPopover',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()',\n        '[class.mc-popover_open]': 'isOpen'\n    }\n})\nexport class McPopover implements OnInit, OnDestroy {\n    isPopoverOpen: boolean = false;\n    isDynamicPopover = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McPopoverComponent>;\n    availablePositions: any;\n    popover: McPopoverComponent | null;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input('mcPopoverHeader')\n    get mcHeader(): string | TemplateRef<any> {\n        return this._mcHeader;\n    }\n    set mcHeader(value: string | TemplateRef<any>) {\n        this._mcHeader = value;\n        this.updateCompValue('mcHeader', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcHeader: string | TemplateRef<any>;\n\n    @Input('mcPopoverContent')\n    get mcContent(): string | TemplateRef<any> {\n        return this._mcContent;\n    }\n    set mcContent(value: string | TemplateRef<any>) {\n        this._mcContent = value;\n        this.updateCompValue('mcContent', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcContent: string | TemplateRef<any>;\n\n    @Input('mcPopoverFooter')\n    get mcFooter(): string | TemplateRef<any> {\n        return this._mcFooter;\n    }\n    set mcFooter(value: string | TemplateRef<any>) {\n        this._mcFooter = value;\n        this.updateCompValue('mcFooter', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcFooter: string | TemplateRef<any>;\n\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcPopoverDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcPopoverMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcPopoverMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcPopoverTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPopoverSize')\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value && (value === 'small' || value === 'normal' || value === 'large')) {\n            this.popoverSize = value;\n            this.updateCompValue('mcPopoverSize', value);\n        } else {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string = 'normal';\n\n    @Input('mcPopoverPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcPopoverClass')\n    get classList() {\n        return this._classList;\n    }\n    set classList(value: string | string[]) {\n        this._classList = value;\n        this.updateCompValue('classList', this._classList);\n    }\n    private _classList: string | string[];\n\n    @Input('mcPopoverVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    get isOpen(): boolean {\n        return this.isPopoverOpen;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_POPOVER_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-popover')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...EXTENDED_OVERLAY_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.popover) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the popover.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-popover__panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached() && this.popover) {\n            this.overlayRef.detach();\n            this.popover = null;\n        }\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.popover) {\n            this.updateCompValue('classList', this.classList);\n            this.popover.markForCheck();\n        }\n\n        this.handlePositionUpdate();\n    }\n\n    handlePositionUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n\n        const verticalOffset = this.hostView.element.nativeElement.clientHeight / 2; // tslint:disable-line\n        const anchorElementWidth = this.hostView.element.nativeElement.clientWidth; // tslint:disable-line\n\n        if (this.mcPlacement === 'rightTop' || this.mcPlacement === 'leftTop') {\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 20}px`; // tslint:disable-line\n        }\n\n        if (this.mcPlacement === 'rightBottom' || this.mcPlacement === 'leftBottom') {\n            const currentContainer = this.overlayRef.overlayElement.style.bottom || '0px';\n            this.overlayRef.overlayElement.style.bottom =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 22}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topRight' || this.mcPlacement === 'bottomRight') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.right || '0px';\n            this.overlayRef.overlayElement.style.right =\n                `${parseInt(currentContainer.split('px')[0], 10) - 18}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topLeft' || this.mcPlacement === 'bottomLeft') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.left || '0px';\n            this.overlayRef.overlayElement.style.left =\n                `${parseInt(currentContainer.split('px')[0], 10) - 20}px`; // tslint:disable-line\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicPopover && value) {\n            if (this.popover) {\n                this.popover[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.popover) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McPopoverComponent, this.hostView);\n\n                this.popover = overlayRef.attach(this.portal).instance;\n                this.isDynamicPopover = true;\n                const properties = [\n                    'mcPlacement',\n                    'mcPopoverSize',\n                    'mcTrigger',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'classList',\n                    'mcVisible',\n                    'mcHeader',\n                    'mcContent',\n                    'mcFooter'\n                ];\n\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.popover.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isPopoverOpen = data;\n                    });\n                this.popover.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n            }\n            this.updatePosition();\n            this.popover.show();\n        }\n    }\n\n    hide(): void {\n        if (this.popover) {\n            this.popover.hide();\n        }\n    }\n\n    /** Updates the position of the current popover. */\n    updatePosition(reapplyPosition: boolean = false) {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n\n        //\n        // FIXME: Необходимо в некоторых моментах форсировать позиционировать только после рендеринга всего контента\n        //\n        if (reapplyPosition) {\n            setTimeout(() => {\n                position.reapplyLastPosition();\n            });\n        }\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        let originPosition: IOriginConnectionPosition;\n        const originXPosition = this.getOriginXaxis();\n        const originYPosition = this.getOriginYaxis();\n        originPosition = {originX: originXPosition, originY: originYPosition};\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    getOriginXaxis(): HorizontalConnectionPos {\n        const position = this.mcPlacement;\n        let origX: HorizontalConnectionPos;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        if (position === 'top' || position === 'bottom') {\n            origX = 'center';\n        } else if (position.toLowerCase().includes('right') && !isLtr ||\n            position.toLowerCase().includes('left') && isLtr) {\n            origX = 'start';\n        } else if (position.toLowerCase().includes('right') && isLtr ||\n            position.toLowerCase().includes('left') && !isLtr) {\n            origX = 'end';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origX;\n    }\n\n    getOriginYaxis(): VerticalConnectionPos {\n        const position = this.mcPlacement;\n        let origY: VerticalConnectionPos;\n        if (position === 'right' || position === 'left') {\n            origY = 'center';\n        } else if (position.toLowerCase().includes('top')) {\n            origY = 'top';\n        } else if (position.toLowerCase().includes('bottom')) {\n            origY = 'bottom';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origY;\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        let overlayPosition: IOverlayConnectionPosition;\n        if (this.availablePositions[position]) {\n            overlayPosition = {\n                overlayX : this.availablePositions[position].overlayX,\n                overlayY: this.availablePositions[position].overlayY\n            };\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McPopoverComponent,\n    McPopover,\n    MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './popover.component';\n\n\n@NgModule({\n    declarations: [McPopoverComponent, McPopover],\n    exports: [McPopoverComponent, McPopover],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McPopoverComponent]\n})\nexport class McPopoverModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n\nexport const mcPopoverAnimations: {\n    readonly popoverState: AnimationTriggerMetadata;\n} = {\n    /** Animation that transitions a tooltip in and out. */\n    popoverState: trigger('state', [\n        state('initial', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('* => visible', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => hidden', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content') content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["rightArea","area","setSize","leftArea","newLeftAreaSize","newRightAreaSize","McSplitterComponent","prototype","onMouseUp","this","listeners","length","unsubscribe","pop","isDragging","setStyle","property","value","renderer","elementRef","nativeElement","type","Component","args","selector","preserveWhitespaces","styles","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Renderer2","direction","Input","disabled","gutterSize","McGutterDirective","_direction","_disabled","_order","_size","Object","defineProperty","coerceBooleanProperty","order","coerceNumberProperty","size","ngOnInit","getCursor","getState","coerceCssPixelValue","isVertical","setAttr","state","Error","attribute","setAttribute","Directive","McSplitterAreaDirective","splitter","disableFlex","removeStyle","addArea","ngOnDestroy","removeArea","setOrder","sz","getSizeProperty","getSize","getOffsetSizeProperty","getMinSize","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","NgModule","imports","CommonModule","McIconModule","exports","declarations","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","tabIndex","_this","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","id","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","markForCheck","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","event","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","inputs","host","class","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","animations","trigger","left","transition","animate","FocusMonitor","ChangeDetectorRef","String","decorators","Attribute","ViewChild","Output","McToggleModule","A11yModule","McCommonModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","ngZone","scrollDispatcher","hostView","scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","forEach","listener","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","x","y","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","Optional","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","OverlayModule","entryComponents","McVerticalNavbarItemIcon","McVerticalNavbarItemBadge","McVerticalNavbarItemBase","_McVerticalNavbarMixinBase","McVerticalNavbarItem","focusMonitor","[attr.disabled]","[attr.tabindex]","McDropdownTrigger","Self","McVerticalNavbarHeader","McVerticalNavbarTitle","McVerticalNavbar","cd","expanded","toggle","toggleVerticalNavbarAnimation","COMPONENTS","McVerticalNavbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","selectionChange","valueChange","errorStateMatcher","sortComparator","placeholder","required","multiple","autoSelect","compareWith","McTreeSelect","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","McTreeSelectTrigger","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","stateChanges","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngOnChanges","ngDoCheck","updateErrorState","dirtyCheckNativeValue","runOutsideAngular","textarea","outerHeight","window","diff","height","Math","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","(blur)","(focus)","McFormFieldControl","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","formValidators","WeakMap","formValidatorOnChangeRegistrators","validatorOnChange","c","validatorOnChangeHandler","get","McTimepickerBase","McTimepickerMixinBase","ɵ1","validate","__validatorOnChangeHandler","validator","registerOnValidatorChange","McTimepicker","dateAdapter","_minTime","_maxTime","onChange","noop","Validators","compose","parseValidator","minTimeValidator","maxTimeValidator","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","indexOf","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","updateValueAndValidity","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","NG_VALIDATORS","useValue","MC_INPUT_VALUE_ACCESSOR","DateAdapter","minTime","maxTime","McTimepickerModule","MC_SIDEPANEL_DATA","Right","Left","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","McSidepanelContainerComponent","changeDetectorRef","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","detectChanges","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","McSidepanelRef","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","McSidepanelService","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","push","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","maxWidth","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","index","splice","Injectable","Injector","SkipSelf","McSidepanelClose","sidepanelService","getClosestSidepanel","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","PortalModule","areas","_gutterSize","areaPositionDivider","initialSize","onMouseDown","leftAreaIndex","rightAreaIndex","startPoint","screenX","screenY","item","listen","onMouseMove","indexToRemove","endPoint","offset","minLeftAreaSize","minRightAreaSize","rightAreaOffset","options_1","options","toArray","selectionModel","sort","a","b","McSelect","propagateChanges","fallbackValue","valueToEmit","option","selected","_value","_onChange","McSelectChange","setOptionIds","optionIds","join","highlightCorrectOption","keyManager","empty","setFirstItemActive","setActiveItem","scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","panel","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","getBoundingClientRect","viewportSize","_viewportRuler","getViewportSize","isRtl","first","group","leftOverflow","rightOverflow","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","[class.mc-select-invalid]","[class.mc-select-required]","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","MC_OPTION_PARENT_COMPONENT","ViewportRuler","McFormField","MC_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","openedChange","openedStream","closedStream","McSelectMixinBase","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectChange","isUserInput","McTreeSelectBase","viewportRuler","dir","parentFormField","scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","o","optionSelectionChanges","defer","apply","onSelectionChange","onStable","switchMap","_multiple","_autoSelect","_focused","_panelOpen","destroy","_compareWith","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","tree","panelOpen","ngAfterContentInit","initKeyManager","SelectionModel","changed","added","select","removed","deselect","ngAfterViewInit","calculateHiddenItems","startWith","updateSelectedOptions","resetOptions","fontSize","setSelectionByValue","viewValue","selectedOptions","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","originalOnKeyDown","HOME","END","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","selectValue","sortValues","correspondingOption","error","isDevMode","console","warn","tabOut","changedOrDestroyed","onSelect","wasSelected","isSelected","CdkTree","McTreeSelection","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","addHostClassName","_i","TAG_ATTRIBUTE_NAMES_1","TAG_ATTRIBUTE_NAMES","attr","hasAttribute","tagName","toLowerCase","_selected","dispatchSelectionChange","toggleSelected","hasFocus","removable","handleClick","DELETE","BACKSPACE","selectable","blur","_ngZone","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","McTagAvatar","trailingIcon","McTagTrailingIcon","removeIcon","McTagRemove","_McTagMixinBase","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","_selectable","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","tagListSelectable","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","McSelectBase","_renderer","_dir","_parentFormField","_scrollStrategyFactory","_onTouched","onRemoveMatcherItem","manager","ActiveDescendantKeyManager","withTypeAhead","McTabContent","McTabLabel","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","McTab","viewContainerRef","textLabel","isActive","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","McTabBody","onCentering","beforeCentering","afterLeavingCenter","onCentered","animationDuration","dirChangeSubscription","Subscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","McTabBodyPortal","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","McTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[attr.aria-disabled]","McTabHeaderBase","McTabHeader","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","coercedValue","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTagSelectionChange","McTagBase","_removable","popover","handlePositionUpdate","McPopover","verticalOffset","anchorElementWidth","clientWidth","isDynamicPopover","McPopoverComponent","isPopoverOpen","reapplyPosition","reapplyLastPosition","getOriginXaxis","getOriginYaxis","origX","includes","getMcPopoverInvalidPositionError","origY","[class.mc-popover_open]","MC_POPOVER_SCROLL_STRATEGY","mcHeader","mcContent","mcFooter","mcPopoverSize","McPopoverModule","MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","setSelected","setActiveStyles","setInactiveStyles","getHeight","clientRects","getClientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","updateScrollSize","withScrollSize","floor","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcComponentParams","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","mcPopoverAnimations","popoverState","opacity","componentElementRef","EXTENDED_OVERLAY_POSITIONS","popoverVisibility","_classList","popoverSize","list","getPlacementClass","POSITION_TO_CSS_MAP","isNonEmptyContent","isTemplateRef","isNonEmptyString","isVisible","animationStart","[class]","mcPopoverScrollStrategyFactory","_mcHeader","_mcContent","_mcFooter","McListSelection","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","_element","horizontal","_modelChanges","_keyManager","_tempValues","_setOptionsFromValues","_b","_c","selectAll","_reportValueChange","deselectAll","_getHeight","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","_removeOptionFromList","_hasFocus","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","_getOptionByValue","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_lineSetter","McLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","McDatepickerInput","isAltDownArrow","datepicker","readOnly","date","dateFormats","dateInput","lastValueValid","isValid","getValidDateOrNull","sameDate","cvaOnChange","McDatepickerInputEvent","dateChange","getThemePalette","formField","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","disabledChange","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","checkboxPosition","wasSelected_1","_text","[class.mc-focused]","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","onYearSelected","compareDate","oldActiveDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","targetElement","datepickerSubscription","localeSubscription","mcDatepickerParse","minValidator","control","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","localeChanges","oldDate","_min","_max","[class.mc-card_readonly]","[class.mc-card_selected]","readonly","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","McInput","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","_autoActiveFirstOption","McAutocomplete","_isOpen","showPanel","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","handleFocus","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","hostElement","onClick","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","scrollThrottle","openSidepanels","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults"],"mappings":"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"}