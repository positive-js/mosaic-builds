{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/select/select.component.ts","../../src/lib/select/select.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts"],"sourcesContent":["/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex, HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanUpdateErrorStateCtor & typeof McSelectBase\n    = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip',\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this._handleBodyInteraction()'\n    }\n})\n\nexport class McToolTipComponent {\n    _prefix = 'mc-tooltip_placement';\n    _positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    _classMap = {};\n    _placement = 'top';\n    _trigger = 'hover';\n    isTitleString: boolean;\n    visibleSource = new BehaviorSubject<boolean>(false);\n    $visible: Observable<boolean> = this.visibleSource.asObservable();\n    _title: string | TemplateRef<void>;\n    showTId: number;\n    hideTId: number;\n    availablePositions: any;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._title = value;\n        }\n    }\n\n    get mcTitle(): string | TemplateRef<void> {\n        return this._title;\n    }\n\n    @Input()\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this.visibleSource.value !== visible) {\n            this.visibleSource.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n\n    get mcVisible(): boolean {\n        return this.visibleSource.value;\n    }\n\n    @Input()\n    set mcTrigger(value: string) {\n        this._trigger = value;\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input()\n    set mcPlacement(value: string) {\n        if (value !== this._placement) {\n            this._placement = value;\n            this._positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._placement = 'top';\n        }\n    }\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide: Subject<any> = new Subject();\n    private _closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.hideTId) {\n            clearTimeout(this.hideTId);\n        }\n\n        if (!this.isContentEmpty()) {\n            this._closeOnInteraction = true;\n            this.showTId = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTId) {\n            clearTimeout(this.showTId);\n        }\n\n        this.hideTId = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this._onHide.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this._classMap = {\n            [ `${this._prefix}-${this._placement}` ]: true\n        };\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this._onHide.asObservable();\n    }\n\n    _markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    _handleBodyInteraction(): void {\n        if (this._closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MC_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mc-tooltip]',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\n\nexport class McTooltipDirective implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    _title: string;\n    _disabled: boolean = false;\n    _mouseEnterDelay: number;\n    _mouseLeaveDelay: number;\n    _visible: boolean;\n    _trigger: string = 'hover';\n    _placement: string = 'top';\n    _overlayRef: OverlayRef | null;\n    _portal: ComponentPortal<McToolTipComponent>;\n    availablePositions: any;\n    tooltip: McToolTipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mc-tooltip')\n    set mcTitle(title: string) {\n        this._title = title;\n        this.updateCompValue('mcTitle', title);\n    }\n\n    get mcTitle(): string {\n        return this._title;\n    }\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    @Input('mcMouseEnterDelay')\n    set mcMouseEnterDelay(value: number) {\n        this._mouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n\n    get mcMouseEnterDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcMouseLeaveDelay')\n    set mcMouseLeaveDelay(value: number) {\n        this._mouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n\n    get mcMouseLeaveDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcVisible')\n    set mcVisible(value: boolean) {\n        this._visible = value;\n        this.updateCompValue('mcVisible', value);\n    }\n\n    get mcVisible(): boolean {\n        return this._visible;\n    }\n\n    @Input('mcTrigger')\n    set mcTrigger(value: string) {\n        this._trigger = value;\n        this.updateCompValue('mcTrigger', value);\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input('mcPlacement')\n    set mcPlacement(value: string) {\n        if (value) {\n            this._placement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._placement = 'top';\n        }\n    }\n\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _overlay: Overlay,\n        private elementRef: ElementRef,\n        private _ngZone: NgZone,\n        private _scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    _createOverlay(): OverlayRef {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n\n        return this._overlayRef;\n    }\n\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this._overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this._overlayRef.overlayElement.style.top || '0px';\n            this._overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        const position =\n            this._overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n\n    private show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this._createOverlay();\n                this._detach();\n                this._portal = this._portal || new ComponentPortal(McToolTipComponent, this.hostView);\n                this.tooltip = overlayRef.attach(this._portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mcVisible',\n                    'mcTrigger',\n                    'mcPlacement' ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this._visible = data;\n                        this.mcVisibleChange.emit(data);\n                    });\n            }\n            this._updatePosition();\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        }\n    }\n\n    private hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McToolTipComponent,\n    McTooltipDirective,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [ McToolTipComponent, McTooltipDirective ],\n    exports: [ McToolTipComponent, McTooltipDirective ],\n    imports: [ BrowserAnimationsModule, CommonModule, OverlayModule ],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [ McToolTipComponent ]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-adc05ae');\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    typeof CdkTree\n    = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase: CanColorCtor & typeof McTagBase\n    = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase\n    = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'hasCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase =\n    mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McInputMono],\n    declarations: [McInput, McInputMono]\n})\nexport class McInputModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    HostBinding,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    updateErrorState();\n\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase\n    = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n"],"names":["panelHeightBottom","bottomSpaceAvailable","this","_adjustPanelUp","panelHeightTop","topSpaceAvailable","_adjustPanelDown","maxScroll","_transformOrigin","_getOriginBasedOnOption","McSelect","prototype","distanceBelowViewport","Math","round","_scrollTop","_offsetY","distanceAboveViewport","itemHeight","_getItemHeight","optionHeightAdjustment","_triggerRect","height","abs","_getItemCount","options","length","optionGroups","tslib_1.__decorate","ViewChild","tslib_1.__metadata","ElementRef","ViewChildren","McTag","QueryList","CdkConnectedOverlay","ContentChildren","McOption","descendants","McOptgroup","Input","ContentChild","McSelectTrigger","ErrorStateMatcher","Output","EventEmitter","Observable","McSelect_1","Component","selector","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","providers","provide","McFormFieldControl","useExisting","MC_OPTION_PARENT_COMPONENT","tslib_1.__param","Optional","Self","Attribute","Inject","MC_SELECT_SCROLL_STRATEGY","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","Directionality","NgForm","FormGroupDirective","McFormField","NgControl","String","Object","_McSelectMixinBase","McSelectModule","NgModule","imports","CommonModule","OverlayModule","McOptionModule","McIconModule","McTagModule","exports","McFormFieldModule","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER","McToolTipComponent","cdr","_prefix","_positions","DEFAULT_4_POSITIONS","slice","_classMap","_placement","_trigger","visibleSource","BehaviorSubject","$visible","asObservable","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_onHide","Subject","_closeOnInteraction","availablePositions","POSITION_MAP","defineProperty","get","_title","set","value","isTitleString","TemplateRef","visible","coerceBooleanProperty","next","emit","unshift","mcPlacement","show","_this","hideTId","clearTimeout","isContentEmpty","showTId","setTimeout","mcVisible","_markForCheck","hide","setClassMap","_a","mcTitle","afterHidden","markForCheck","_handleBodyInteraction","fadeAnimation","preserveWhitespaces","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY","McTooltipDirective","_overlay","elementRef","_ngZone","_scrollDispatcher","hostView","_scrollStrategy","_dir","isTooltipOpen","isDynamicTooltip","parentDisabled","_disabled","$unsubscribe","manualListeners","Map","_destroyed","title","updateCompValue","_mouseEnterDelay","_mouseLeaveDelay","_visible","_createOverlay","_overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","change","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","direction","positionStrategy","panelClass","scrollStrategy","_updatePosition","detachments","_detach","hasAttached","detach","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","nativeElement","currentContainer","style","top","parseInt","split","ngOnInit","mcTrigger","forEach","listener","event","addEventListener","ngOnDestroy","dispose","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","getConfig","origin","_getOrigin","overlay","_getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_invertPosition","x","y","overlayPosition","newX","newY","disabled","overlayRef","_portal","ComponentPortal","attach","instance","property","distinctUntilChanged","data","HostBinding","Directive","(touchend)","ScrollDispatcher","ViewContainerRef","McToolTipModule","BrowserAnimationsModule","entryComponents","VERSION","Version","SELECT_PANEL_PADDING_X","stopPropagation","McRadioButton","onInputChange","groupValueChanged","radioGroup","checked","emitChangeEvent","controlValueAccessorChangeFn","touch","McRadioChange","_value","[class.mc-radio-checked]","[class.mc-radio-disabled]","McRadioGroup","UniqueSelectionDispatcher","_McRadioButtonMixinBase","McRadioModule","A11yModule","McCommonModule","McTreeNodeDef","_super","tslib_1.__extends","McTreeNodeDef_1","CdkTreeNodeDef","McTreeNodePadding","apply","arguments","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","isExpandable","_setPadding","CdkTreeNodePadding","McTreeNodeOption","_elementRef","treeSelection","call","role","_hasFocus","_selected","McTreeNodeOption_1","newValue","toBoolean","selectedOptions","isSelected","setSelected","focus","setFocusedOption","toggle","selected","select","deselect","_getHeight","getClientRects","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","forwardRef","McTreeSelection","_McTreeSelectionBase","mixinTabIndex","mixinDisabled","CdkTree","McTreeNavigationChange","source","option","McTreeSelectionChange","_differs","_changeDetectorRef","tabIndex","multiple","autoSelect","noUnselect","navigationChange","selectionChange","SelectionModel","McTreeSelection_1","rawValue","console","log","_onKeyDown","withShift","shiftKey","withCtrl","ctrlKey","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","expand","SPACE","ENTER","toggleFocusedOption","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","ngAfterContentInit","FocusKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","updateScrollSize","first","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","item","index","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","toArray","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","CdkTreeNodeOutlet","[tabIndex]","IterableDiffers","MC_TREE_DIRECTIVES","McTreeModule","CdkTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","McTreeNestedDataSource","McTagBase","_McTagMixinBase","mixinColor","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","PlatformModule","trigger","state","transform","minWidth","opacity","transition","group","query","animateChild","animate","nextUniqueId","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectChange","McSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","mixinErrorState","_viewportRuler","_renderer","_parentFormField","_scrollStrategyFactory","_triggerFontSize","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","controlType","optionSelectionChanges","defer","onSelectionChange","onStable","switchMap","openedChange","_openedStream","filter","o","_closedStream","valueChange","hiddenItems","_panelOpen","_required","_multiple","_uid","_destroy","_focused","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","id","_placeholder","stateChanges","_selectionModel","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","_initializeSelection","writeValue","_id","panelOpen","overlayDir","offsetX","_initKeyManager","added","removed","startWith","_resetOptions","ngAfterViewInit","tags","_calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","close","open","getBoundingClientRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","viewValue","reverse","join","isEmpty","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","_calculateOverlayScroll","selectedIndex","scrollBuffer","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","min","max","onContainerClick","onRemoveMatcherItem","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","altKey","manager","A","hasDeselectedOptions_1","previouslyFocusedIndex","_selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","warn","ActiveDescendantKeyManager","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","_propagateChanges","options_1","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","undefined","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayOffsetY","_checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","isRtl","leftOverflow","left","rightOverflow","right","updatePosition","bottom","totalPanelHeight","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","McModalControlService","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","isNaN","Pipe","name","ModalBuilderForService","createModal","mcGetContainer","changeProps","modalRef","mcAfterClose","destroyModal","keydownEvents","mcCloseByESC","getInstance","assign","McModalService","modalControl","openModals","afterAllClose","closeAll","mcOnCancel","mcWidth","confirm","confirmType","mcOnOk","mcModalType","mcClassName","mcMaskClosable","success","simpleConfirm","delete","mcCancelText","Injectable","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","setAttribute","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","window","location","href","handleClickByItem","toggleDropdown","isNavbarItem","target","contains","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","hasAttribute","stopImmediatePropagation","read","[attr.disabled]","FocusMonitor","Platform","McNavbarContainer","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","multi","_changeDetector","_name","_isInitialized","_labelPosition","onTouched","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","_radios","radio","isAlreadySelected","McRadioButtonBase","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","onInputClick","horizontal","McListSelection","_reportValueChange","getSelectedOptionValues","McListSelectionChange","_getOptionByValue","_setOptionsFromValues","values","Boolean","McListOption","MC_SELECTION_LIST_VALUE_ACCESSOR","_McListSelectionMixinBase","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","splice","SkipSelf","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","renderer","cfr","mcMeasureScrollbarService","changeDetector","_mcVisible","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcOkType","_mcOkLoading","_mcCancelLoading","transformOrigin","mcOkText","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusButtonOk","changeVisibleFromInside","destroy","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","isModalType","type","onKeyDown","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","changeDetectorRef","isVisible","updateTransformOrigin","buttons","size","autoLoading","component","factory","resolveComponentFactory","childInjector","Injector","useValue","parent","parentInjector","mcComponentParams","modalElement","modalContainer","offsetLeft","plusNum","body","scrollBarWidth","removeStyle","McButton","McAnchor","McIconButton","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McHint","McPrefix","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","_validateControlChild","_control","valueChanges","EMPTY","ngAfterContentChecked","clearValue","focused","hasCleaner","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","McFormFieldWithoutBorders","MC_INPUT_VALUE_ACCESSOR","MC_INPUT_INVALID_TYPES","McInputBase","_McInputMixinBase","McInput","inputValueAccessor","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","_validateType","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","McInputMono","McInputModule","FormsModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","McLayoutModule","listSelection","checkboxPosition","wasSelected_1","_removeOptionFromList","getLabel","_text","textContent","McListSelectionBase","_modelChanges","_","_tempValues","_i","_c","selectAll","deselectAll","listOption","optionIndex","setPreviousItemActive","setNextItemActive","__extends","d","__","constructor","extendStatics","__decorate","decorators","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","control","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","Error","inputType","obj","scrollStrategies","reposition","scrollThrottle","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","trim","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","topCenter","offsetY","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","queries","McButtonBase","_McButtonMixinBase","platform","focusMonitor","_haltDisabledEvents"],"mappings":"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"}