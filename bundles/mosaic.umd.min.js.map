{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-2971f19');\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import { Component, ElementRef, OnDestroy, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./link.css'],\n    inputs: ['disabled', 'tabindex'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : tabindex ? tabindex : 0'\n    }\n})\n\nexport class McLink implements OnDestroy {\n    disabled: boolean;\n    tabindex: number;\n\n    constructor(private elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [\n        McLink\n    ],\n    exports: [\n        McLink\n    ]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n"],"names":["tslib_1.__decorate","ViewChild","CdkTreeNodeOutlet","tslib_1.__metadata","McTreeSelection","prototype","ContentChildren","forwardRef","McTreeNodeOption","QueryList","Input","Output","McTreeSelection_1","Component","exportAs","selector","template","host","[tabIndex]","class","role","(keydown)","(window:resize)","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","tslib_1.__param","Attribute","ElementRef","IterableDiffers","ChangeDetectorRef","String","_McTreeSelectionBase","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","McTreeModule","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","this","_flattenNode","node","level","resultNodes","parentMap","_this","flatNode","push","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","McTreeFlatDataSource","_super","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","tslib_1.__extends","Object","defineProperty","get","value","set","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","arguments","VERSION","Version","_focusMonitor$","_focusMonitor","monitor","elementRef","nativeElement","hasDropdownContent","listenClickOutside","McNavbarItem","ngAfterViewInit","startListenFocusDropdownItems","ngOnDestroy","_subscription","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","_platform","isBrowser","window","location","href","indexOf","handleClickByItem","toggleDropdown","handleKeydown","$event","isNavbarItem","target","classList","contains","MC_NAVBAR_ITEM","keyCode","SPACE","handleClickByDropdownItem","forceCloseDropdown","add","origin","isCollapsed","_cdRef","detectChanges","_dropdownElements","el","denyClickIfDisabled","events","eventListeners","event","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","ContentChild","read","TemplateRef","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","Platform","_McNavbarMixinBase","McNavbarContainer","position","HostBinding","Directive","MC_NAVBAR_CONTAINER","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","remove","CachedItemWidth","itemsForCollapse","undefined","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","item","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","setAttribute","removeAttribute","McNavbar","_elementRef","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","querySelectorAll","getItemsForCollapse","McNavbarModule","A11yModule","PlatformModule","McIconModule","McNavbarTitle","McNavbarBrand","McNavbarLogo","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","id","mode","color","ThemePalette","Primary","Math","max","min","[attr.id]","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","source","McRadioGroupBase","_McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","selected","toBoolean","checked","ngAfterContentInit","touch","emitChangeEvent","emit","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","name","isAlreadySelected","McRadioButton","descendants","McRadioButtonBase","_McRadioButtonMixinBase","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","ngOnInit","focus","onInputClick","stopPropagation","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","(focus)","Optional","UniqueSelectionDispatcher","McRadioModule","McCommonModule","McTreeNodeDef_1","CdkTreeNodeDef","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","_level","leftPadding","_setPadding","CdkTreeNodePadding","treeSelection","_hasFocus","McTreeNodeOption_1","selectedOptions","isSelected","setSelected","setFocusedOption","toggle","select","deselect","_getHeight","getClientRects","height","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(blur)","(click)","CdkTreeNode","Inject","McTreeNavigationChange","option","McTreeSelectionChange","_differs","_changeDetectorRef","tabIndex","multiple","autoSelect","noUnselect","navigationChange","selectionChange","SelectionModel","rawValue","console","log","_onKeyDown","withShift","shiftKey","withCtrl","ctrlKey","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","ENTER","toggleFocusedOption","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","updateScrollSize","first","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","toArray","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","instance","reset","notifyOnChanges","McList","McListBase","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_getHostElement","McLine","preserveWhitespaces","McListModule","McLineModule","McListSelection","McListOption","McLink","McLinkModule","McModalControlService","parentService","rootOpenModals","rootAfterAllClose","Subject","rootRegisteredMetaMap","Map","afterAllClose","openModals","registeredMetaMap","registerModal","modalRef","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","closeAll","close","splice","Injectable","SkipSelf","McModalRef","ModalUtil","document","lastPosition","x","y","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","McModalComponent","overlay","renderer","cfr","mcMeasureScrollbarService","modalControl","changeDetector","mcModalType","_mcVisible","mcVisibleChange","mcZIndex","mcWidth","mcCloseByESC","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcAfterClose","mcOkType","_mcOkLoading","mcOnOk","_mcCancelLoading","mcOnCancel","transformOrigin","mcGetContainer","create","asObservable","mcOkText","mcCancelText","mcVisible","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","HTMLElement","appendChild","OverlayRef","overlayElement","ngOnChanges","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","hostView","autoFocusButtonOk","dispose","open","changeVisibleFromInside","result","destroy","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","isModalType","type","onKeyDown","ESCAPE","onClickCloseBtn","trigger","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","then","catch","isNonEmptyString","isTemplateRef","Type","isArray","visible","animation","closeResult","changeBodyOverflow","Promise","resolve","animateTo","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","state","maskAnimationClassMap","_a","modalAnimationClassMap","_b","changeDetectorRef","isVisible","updateTransformOrigin","buttons","tslib_1.__assign","size","autoLoading","show","component","factory","resolveComponentFactory","childInjector","Injector","useValue","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","offsetLeft","offsetTop","plusNum","setStyle","body","scrollBarWidth","removeStyle","ViewContainerRef","DOCUMENT","Overlay","Renderer2","ComponentFactoryResolver","McMeasureScrollbarService","CssUnitPipe","transform","defaultUnit","formatted","isNaN","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","overlayRef","keydownEvents","filter","attach","ComponentPortal","McModalService","confirm","confirmType","warn","mcClassName","success","simpleConfirm","delete","McModalModule","OverlayModule","McButtonModule","entryComponents","McNavbarItemBase","dropdownItems","Subscription","encodeURI","dropdownContent","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McCheckbox","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","clearValue","onContainerClick","focused","hasCleaner","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","McFormFieldWithoutBorders","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","inputValueAccessor","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","coerceBooleanProperty","_id","_validateType","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","ErrorStateMatcher","[attr.placeholder]","[disabled]","[required]","(input)","Self","NgControl","NgForm","FormGroupDirective","McInputMono","McInputModule","FormsModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_removeOptionFromList","getLabel","_text","textContent","_onTouched","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_onChange","_","_tempValues","_setOptionsFromValues","_i","added","_c","removed","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","find","Boolean","__extends","d","b","__","constructor","extendStatics","__decorate","decorators","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","matcher","errorStateMatcher","control","newState","isErrorState","Error","inputType","obj","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckboxModule","scrollbarMeasure","top","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","style","offsetWidth","clientWidth","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","McCheckboxChange","McCheckboxBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]"],"mappings":"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"}