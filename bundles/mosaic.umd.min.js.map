{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/splitter/splitter.component.ts","../../src/lib/splitter/splitter.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/timepicker/timepicker.constants.ts","../../src/lib/select/select.component.ts","../../src/lib/timepicker/timepicker.ts","../../src/lib/timepicker/timepicker.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-number-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/stepper.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/stepperUtils.ts","../../src/lib/input/input.ts","../../src/lib/input/input-number-validators.ts","../../src/lib/input/input.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip',\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this._handleBodyInteraction()'\n    }\n})\n\nexport class McToolTipComponent {\n    _prefix = 'mc-tooltip_placement';\n    _positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    _classMap = {};\n    _placement = 'top';\n    _trigger = 'hover';\n    isTitleString: boolean;\n    visibleSource = new BehaviorSubject<boolean>(false);\n    $visible: Observable<boolean> = this.visibleSource.asObservable();\n    _title: string | TemplateRef<void>;\n    showTId: number;\n    hideTId: number;\n    availablePositions: any;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._title = value;\n        }\n    }\n\n    get mcTitle(): string | TemplateRef<void> {\n        return this._title;\n    }\n\n    @Input()\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this.visibleSource.value !== visible) {\n            this.visibleSource.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n\n    get mcVisible(): boolean {\n        return this.visibleSource.value;\n    }\n\n    @Input()\n    set mcTrigger(value: string) {\n        this._trigger = value;\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input()\n    set mcPlacement(value: string) {\n        if (value !== this._placement) {\n            this._placement = value;\n            this._positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._placement = 'top';\n        }\n    }\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide: Subject<any> = new Subject();\n    private _closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.hideTId) {\n            clearTimeout(this.hideTId);\n        }\n\n        if (!this.isContentEmpty()) {\n            this._closeOnInteraction = true;\n            this.showTId = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTId) {\n            clearTimeout(this.showTId);\n        }\n\n        this.hideTId = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this._onHide.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this._classMap = {\n            [ `${this._prefix}-${this._placement}` ]: true\n        };\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this._onHide.asObservable();\n    }\n\n    _markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    _handleBodyInteraction(): void {\n        if (this._closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MC_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mc-tooltip]',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\n\nexport class McTooltipDirective implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    _title: string;\n    _disabled: boolean = false;\n    _mouseEnterDelay: number;\n    _mouseLeaveDelay: number;\n    _visible: boolean;\n    _trigger: string = 'hover';\n    _placement: string = 'top';\n    _overlayRef: OverlayRef | null;\n    _portal: ComponentPortal<McToolTipComponent>;\n    availablePositions: any;\n    tooltip: McToolTipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mc-tooltip')\n    set mcTitle(title: string) {\n        this._title = title;\n        this.updateCompValue('mcTitle', title);\n    }\n\n    get mcTitle(): string {\n        return this._title;\n    }\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    @Input('mcMouseEnterDelay')\n    set mcMouseEnterDelay(value: number) {\n        this._mouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n\n    get mcMouseEnterDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcMouseLeaveDelay')\n    set mcMouseLeaveDelay(value: number) {\n        this._mouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n\n    get mcMouseLeaveDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcVisible')\n    set mcVisible(value: boolean) {\n        this._visible = value;\n        this.updateCompValue('mcVisible', value);\n    }\n\n    get mcVisible(): boolean {\n        return this._visible;\n    }\n\n    @Input('mcTrigger')\n    set mcTrigger(value: string) {\n        this._trigger = value;\n        this.updateCompValue('mcTrigger', value);\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input('mcPlacement')\n    set mcPlacement(value: string) {\n        if (value) {\n            this._placement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._placement = 'top';\n        }\n    }\n\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _overlay: Overlay,\n        private elementRef: ElementRef,\n        private _ngZone: NgZone,\n        private _scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    _createOverlay(): OverlayRef {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n\n        return this._overlayRef;\n    }\n\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this._overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this._overlayRef.overlayElement.style.top || '0px';\n            this._overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        const position =\n            this._overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n\n    private show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this._createOverlay();\n                this._detach();\n                this._portal = this._portal || new ComponentPortal(McToolTipComponent, this.hostView);\n                this.tooltip = overlayRef.attach(this._portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mcVisible',\n                    'mcTrigger',\n                    'mcPlacement' ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this._visible = data;\n                        this.mcVisibleChange.emit(data);\n                    });\n            }\n            this._updatePosition();\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        }\n    }\n\n    private hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McToolTipComponent,\n    McTooltipDirective,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [ McToolTipComponent, McTooltipDirective ],\n    exports: [ McToolTipComponent, McTooltipDirective ],\n    imports: [ BrowserAnimationsModule, CommonModule, OverlayModule ],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [ McToolTipComponent ]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-fb5853a');\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    'hh:mm:ss': '  :  :  ',\n    'hh:mm': '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex, HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanUpdateErrorStateCtor & typeof McSelectBase\n    = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    InjectionToken,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState, CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet _uniqueComponentIdSuffix: number = 0;\nlet _validatorOnChange: () => void = noop;\nlet _validator: ValidatorFn | null = () => null;\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n\nexport class McTimepickerBase {\n    constructor(\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c) { return _validator ? _validator(c) : null; },\n                registerOnValidatorChange(fn: () => void): void { _validatorOnChange = fn; }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this._uid; }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this._inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this._applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        _validatorOnChange();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat.toLowerCase()];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this._minDTime = minValue !== null ? this._getDateFromTimeString(minValue) : undefined;\n        _validatorOnChange();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this._maxDTime = maxValue !== null ? this._getDateFromTimeString(maxValue) : undefined;\n        _validatorOnChange();\n    }\n\n    private _id: string;\n    private readonly _uid = `mc-timepicker-${_uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private _previousNativeValue: any;\n    private readonly _inputValueAccessor: { value: any };\n    private _onChange: (value: any) => void;\n    private _onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private _minDTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private _maxDTime: Date | undefined;\n    private _currentDTimeInput: Date | undefined;\n\n    constructor(private readonly _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly _renderer: Renderer2) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n        this._onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n        _validator = Validators.compose([\n            () => this._parseValidator(),\n            () => this._minTimeValidator(),\n            () => this._maxTimeValidator()\n        ]);\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this._onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this._applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onInput() {\n        const initialCursorStart: number = this._elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this._elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this._getParsedTimeParts(this._elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this._applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this._elementRef.nativeElement.selectionStart = initialCursorStart;\n        this._elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this._createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this._renderer.setProperty(this._elementRef.nativeElement,\n                'value',\n                this._getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this._onChange(value || null);\n        this._applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this._getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this._upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this._switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private _isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this._elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private _applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n\n        const timeToApply: Date | undefined = changedTime ||\n            this._getDateFromTimeString(this._elementRef.nativeElement.value);\n        this._currentDTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            this._renderer.setProperty(\n                this._elementRef.nativeElement,\n                'value',\n                this._getTimeStringFromDate(timeToApply, this.timeFormat));\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this._onChange(result);\n        this.stateChanges.next();\n    }\n\n    private _upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this._currentDTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this._elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this._getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this._getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this._incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this._decrementTime(changedTime, modifiedTimePart); }\n            this._applyInputChanges({ changedTime });\n            this._createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private _switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this._currentDTimeInput;\n        const keyCode: string = this._getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this._elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this._getCursorPositionOfPrevTimePartStart(cursorPos, this._elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this._getCursorPositionOfNextTimePartStart(cursorPos, this._elementRef.nativeElement.value);\n            }\n            this._createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private _getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private _createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this._getTimeEditMetrics(cursorPos);\n            this._elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this._elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private _incrementTime(dateVal: Date,\n                           whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this._getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this._getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private _decrementTime(dateVal: Date,\n                           whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this._getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this._getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private _getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private _getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                  timeString: string,\n                                                  timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private _getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this._elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private _getTimeStringFromDate(tempVal: Date,\n                                   timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this._getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this._getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this._getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private _getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private _getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this._getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private _getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this._getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private _getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private _getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private _parseValidator(): ValidationErrors | null {\n        return this._currentDTimeInput === undefined ?\n            { mcTimepickerParse: { text: this._elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private _minTimeValidator(): ValidationErrors | null {\n\n        if (this._currentDTimeInput !== undefined &&\n            this._minDTime !== undefined &&\n            this._isTimeLowerThenMin(this._currentDTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this._elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private _maxTimeValidator(): ValidationErrors | null {\n        if (this._currentDTimeInput !== undefined &&\n            this._maxDTime !== undefined &&\n            this._isTimeGreaterThenMax(this._currentDTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this._elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private _isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this._minDTime).getTime() < 0;\n    }\n\n    private _isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this._maxDTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    typeof CdkTree\n    = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase: CanColorCtor & typeof McTagBase\n    = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-stepper-step-up mc-icon mc-angle-L_16 mc-icon-flip-h\" (mousedown)=\"onStepUp($event)\"></i>\n        <i class=\"mc mc-stepper-step-down mc-icon mc-angle-L_16\" (mousedown)=\"onStepDown($event)\"></i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase\n    = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase =\n    mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {'[attr.max]': 'max ? max : null'}\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase\n    = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n"],"names":["McSplitterAreaDirective","prototype","getSize","this","elementRef","nativeElement","getOffsetSizeProperty","getMinSize","styles","getComputedStyle","parseFloat","getMinSizeProperty","isVertical","splitter","direction","getSizeProperty","setStyle","style","value","renderer","removeStyle","tslib_1.__decorate","Directive","selector","tslib_1.__metadata","ElementRef","Renderer2","McSplitterComponent","McSplitterModule","NgModule","imports","CommonModule","McIconModule","exports","McGutterDirective","declarations","McToolTipComponent","cdr","_prefix","_positions","DEFAULT_4_POSITIONS","slice","_classMap","_placement","_trigger","visibleSource","BehaviorSubject","$visible","asObservable","mcVisibleChange","EventEmitter","mcMouseEnterDelay","mcMouseLeaveDelay","_onHide","Subject","_closeOnInteraction","availablePositions","POSITION_MAP","Object","defineProperty","get","_title","set","isTitleString","TemplateRef","visible","coerceBooleanProperty","next","emit","unshift","mcPlacement","show","_this","hideTId","clearTimeout","isContentEmpty","showTId","setTimeout","mcVisible","_markForCheck","hide","setClassMap","_a","mcTitle","afterHidden","markForCheck","_handleBodyInteraction","Output","Input","Component","animations","fadeAnimation","template","preserveWhitespaces","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","(body:click)","ChangeDetectorRef","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY","McTooltipDirective","_overlay","_ngZone","_scrollDispatcher","hostView","_scrollStrategy","_dir","isTooltipOpen","isDynamicTooltip","parentDisabled","_disabled","$unsubscribe","manualListeners","Map","_destroyed","title","updateCompValue","_mouseEnterDelay","_mouseLeaveDelay","_visible","_createOverlay","_overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","change","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","scrollStrategy","_updatePosition","detachments","_detach","hasAttached","detach","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","parseInt","split","ngOnInit","mcTrigger","forEach","listener","event","addEventListener","ngOnDestroy","dispose","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","getConfig","origin","_getOrigin","overlay","_getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_invertPosition","x","y","overlayPosition","newX","newY","disabled","overlayRef","_portal","ComponentPortal","attach","instance","property","distinctUntilChanged","data","HostBinding","(keydown)","(touchend)","tslib_1.__param","Inject","Optional","NgZone","ScrollDispatcher","ViewContainerRef","Directionality","McToolTipModule","BrowserAnimationsModule","OverlayModule","providers","entryComponents","VERSION","Version","SELECT_PANEL_PADDING_X","McTimepicker","McTimepicker_1","exportAs","class","[attr.id]","[attr.placeholder]","[disabled]","[required]","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(blur)","(focus)","(input)","NG_VALIDATORS","useValue","ɵ1","multi","McFormFieldControl","useExisting","forwardRef","Self","MC_INPUT_VALUE_ACCESSOR","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","McTimepickerMixinBase","McTimepickerModule","A11yModule","PlatformModule","FormsModule","mcSelectAnimations","transformPanel","trigger","state","transform","minWidth","opacity","transition","group","query","animateChild","animate","fadeInContent","nextUniqueId","MC_SELECT_SCROLL_STRATEGY","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectChange","source","McSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_McSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McSelectTrigger","McSelect","_super","_viewportRuler","_changeDetectorRef","_renderer","_parentFormField","tabIndex","_scrollStrategyFactory","call","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","controlType","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","take","switchMap","openedChange","_openedStream","filter","o","_closedStream","selectionChange","valueChange","hiddenItems","_panelOpen","_required","_scrollTop","_multiple","_uid","_destroy","_focused","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","id","tslib_1.__extends","McSelect_1","_placeholder","stateChanges","_selectionModel","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","_initializeSelection","_value","newValue","writeValue","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","ngAfterContentInit","_initKeyManager","onChange","added","select","removed","deselect","changes","startWith","_resetOptions","ngAfterViewInit","tags","_calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","toggle","close","open","length","_triggerRect","getBoundingClientRect","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","isEmpty","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","focus","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveMatcherItem","stopPropagation","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","item","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","index","undefined","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayOffsetY","_checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","isRtl","first","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","ViewChild","ViewChildren","McTag","QueryList","CdkConnectedOverlay","ContentChildren","McOption","descendants","McOptgroup","ContentChild","Observable","inputs","[attr.tabindex]","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(window:resize)","MC_OPTION_PARENT_COMPONENT","Attribute","ViewportRuler","McFormField","String","McSelectModule","McOptionModule","McTagModule","McFormFieldModule","ngZone","areas","_gutterSize","isDragging","areaPositionDivider","listeners","_direction","gutterSize","size","coerceNumberProperty","addArea","area","order","setOrder","push","initialSize","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","onMouseMove","removeArea","indexToRemove","splice","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","Error","attribute","setAttribute","sz","toBoolean","markRadiosForCheck","McRadioGroup","checkSelectedRadioButton","_selected","checked","_isInitialized","touch","onTouched","emitChangeEvent","McRadioChange","_radios","radio","_changeDetector","controlValueAccessorChangeFn","updateRadioButtonNames","name","updateSelectedRadioFromValue","isAlreadySelected","McRadioButton","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","role","_McRadioGroupMixinBase","McRadioButtonBase","_McRadioButtonMixinBase","mixinColor","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","required","_labelPosition","labelPosition","onInputClick","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","UniqueSelectionDispatcher","McRadioModule","McCommonModule","McTreeNodeDef","McTreeNodeDef_1","CdkTreeNodeDef","McTreeNodePadding","arguments","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","isExpandable","_setPadding","CdkTreeNodePadding","McTreeNodeOption","treeSelection","_hasFocus","McTreeNodeOption_1","setSelected","setFocusedOption","_getHeight","getClientRects","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","McTreeSelection","_McTreeSelectionBase","CdkTree","McTreeNavigationChange","McTreeSelectionChange","_differs","autoSelect","noUnselect","navigationChange","McTreeSelection_1","rawValue","log","_onKeyDown","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","FocusKeyManager","updateScrollSize","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","CdkTreeNodeOutlet","[tabIndex]","IterableDiffers","MC_TREE_DIRECTIVES","McTreeModule","CdkTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McTagBase","_McTagMixinBase","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","TimeParts","TimeFormats","TIMEFORMAT_PLACEHOLDERS","hh:mm:ss","hh:mm","DEFAULT_TIME_FORMAT","HHmm","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","_uniqueComponentIdSuffix","_validatorOnChange","noop","_validator","McTimepickerBase","validate","c","registerOnValidatorChange","inputValueAccessor","focused","_minTime","_maxTime","_inputValueAccessor","_previousNativeValue","Validators","compose","_parseValidator","_minTimeValidator","_maxTimeValidator","_applyInputChanges","_timeFormat","formatValue","timeFormatKey","placeholder","toLowerCase","minValue","_minDTime","_getDateFromTimeString","maxValue","_maxDTime","_dirtyCheckNativeValue","focusChanged","onBlur","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","_getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","_createSelectionOfTimeComponentInInput","_isBadInput","setProperty","_getTimeStringFromDate","timeFormat","onKeyDown","_getKeyCode","_upDownTimeByArrowKeys","_switchSelectionBetweenTimeparts","validity","badInput","applyParams","changedTime","timeToApply","_currentDTimeInput","control","updateValueAndValidity","cursorPos","modifiedTimePart","_getTimeEditMetrics","_incrementTime","_decrementTime","_getCursorPositionOfPrevTimePartStart","_getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","seconds","_getTimeDigitsFromDate","hours","minutes","_getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","_getNumberWithLeadingZero","getHours","getMinutes","getSeconds","HHmmss","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","_isTimeLowerThenMin","mcTimepickerLowerThenMintime","_isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","McModalComponent","onButtonClick","button","getButtonCallableProp","isPromise","loading","catch","changeVisibleFromInside","closeResult","handleVisibleStateChange","changeAnimationState","animationState","maskAnimationClassMap","modalAnimationClassMap","_b","contentComponentRef","changeDetectorRef","changeDetector","animateTo","isVisible","window","updateTransformOrigin","formatModalButtons","buttons","type","autoLoading","createDynamicComponent","component","factory","cfr","resolveComponentFactory","childInjector","Injector","McModalRef","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","lastPosition","ModalUtil","getLastClickPosition","transformOrigin","offsetLeft","changeBodyOverflow","plusNum","modalControl","openModals","document","body","mcMeasureScrollbarService","scrollBarWidth","read","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","McModalControlService","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","mcGetContainer","changeProps","modalRef","mcAfterClose","destroyModal","keydownEvents","mcCloseByESC","getInstance","McModalService","afterAllClose","closeAll","mcOnCancel","mcWidth","confirm","confirmType","mcOnOk","mcModalType","mcClassName","mcMaskClosable","success","simpleConfirm","delete","mcCancelText","Injectable","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","target","contains","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","hasAttribute","stopImmediatePropagation","[attr.disabled]","FocusMonitor","Platform","McNavbarContainer","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioGroupBase","NG_VALUE_ACCESSOR","_name","v","McSidebarComponent","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","McLayoutComponent","McLayoutModule","McContentComponent","McFooterComponent","McHeaderComponent","McListOption","_element","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_lineSetter","McLineSetter","_lines","_removeOptionFromList","getLabel","_text","textContent","_getHostElement","McLine","McListSelection","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","EMPTY","_","_tempValues","_setOptionsFromValues","_i","_c","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","Boolean","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","SkipSelf","listenDocumentClick","clientX","clientY","ModalUtil$1","_mcVisible","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcOkType","_mcOkLoading","_mcCancelLoading","mcOkText","isComponent","mcContent","isModalButtons","mcFooter","container","HTMLElement","OverlayRef","firstChange","bodyContainer","insert","autoFocusButtonOk","destroy","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","handleThen","isNonEmptyString","isTemplateRef","Type","animation","prop","args","McButton","McAnchor","McIconButton","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McFormFieldNumberControl","McHint","McPrefix","McStepper","stepUp","stepDown","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_control","_numberControl","hasStepper","_stepper","valueChanges","ngAfterContentChecked","clearValue","hasCleaner","onHoverChanged","isHovered","step","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseenter)","(mouseleave)","McFormFieldWithoutBorders","res","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","McNumberInput_1","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","DELETE","BACKSPACE","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","onPaste","clipboardData","getData","valueAsNumber","toString","update","replace","isFloat","isInt","test","NgModel","(paste)","McInput","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","McInput_1","_validateType","_onInput","_isNeverEmpty","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","[attr.min]","MAX_VALIDATOR","MaxValidator","[attr.max]","McInputModule","[class.mc-layout-content]","[class.mc-layout-footer]","[class.mc-layout-header]","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","__extends","d","__","constructor","extendStatics","__decorate","decorators","desc","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","obj","scrollStrategies","reposition","scrollThrottle","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","topCenter","offsetY","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","queries","McButtonBase","_McButtonMixinBase","focusMonitor","_haltDisabledEvents"],"mappings":"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"}