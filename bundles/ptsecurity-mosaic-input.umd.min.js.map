{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/mosaic/input/input-number.ts","ng://@ptsecurity/mosaic/input/input-value-accessor.ts","ng://@ptsecurity/mosaic/input/input.ts","ng://@ptsecurity/mosaic/input/input-errors.ts","ng://@ptsecurity/mosaic/input/input-number-validators.ts","ng://@ptsecurity/mosaic/input/input.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","normalizeSplitter","value","replace","isFloat","test","isInt","isDigit","getPrecision","arr","toString","split","length","Math","pow","add","value1","value2","precision","max","McNumberInput","platform","elementRef","ngControl","step","bigStep","min","this","focused","stateChanges","Subject","parseFloat","Infinity","nativeElement","defineProperty","getPrototypeOf","get","res","isNaN","prototype","focusChanged","isFocused","next","onKeyDown","event","e","_this","keyCode","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","DELETE","BACKSPACE","TAB","ESCAPE","ENTER","arrows","LEFT_ARROW","RIGHT_ARROW","HOME","END","concat","indexOf","A","ctrlKey","metaKey","C","isCtrlC","V","isCtrlV","X","isCtrlX","Z","isCtrlZ","F1","F12","isFKey","EDGE","TRIDENT","key","isIEPeriod","isNotIEPeriod","isPeriod","shiftKey","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","isNumber","preventDefault","UP_ARROW","stepUp","DOWN_ARROW","stepDown","onPaste","clipboardData","getData","focus","valueAsNumber","viewToModelUpdate","setValue","Directive","args","selector","exportAs","host","(blur)","(focus)","(paste)","(keydown)","Platform","ElementRef","NgControl","decorators","type","Optional","Self","Attribute","Input","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","nextUniqueId","defaultErrorStateMatcher","parentForm","parentFormGroup","McInputMixinBase","mixinErrorState","McInputBase","McInput","rawValidators","mcValidation","numberInput","ngModel","formControlName","inputValueAccessor","_super","call","controlType","uid","neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_disabled","_required","_type","_inputValueAccessor","previousNativeValue","id","__","constructor","create","__extends","disabled","coerceBooleanProperty","_id","validateType","ngAfterContentInit","useValidation","setMosaicValidation","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","dirtyCheckNativeValue","onBlur","control","updateValueAndValidity","emitEvent","emit","status","onInput","isNeverEmpty","isBadInput","onContainerClick","newValue","inputType","Error","validity","badInput","class","[attr.id]","[attr.placeholder]","[disabled]","[required]","(input)","providers","provide","McFormFieldControl","useExisting","Inject","NG_VALIDATORS","MC_VALIDATION","NgModel","FormControlName","NgForm","FormGroupDirective","ErrorStateMatcher","McInputMono","MIN_VALIDATOR","forwardRef","MinValidator","multi","changes","createValidator","onChange","validate","c","validator","registerOnValidatorChange","fn","Validators","parseInt","[attr.min]","MAX_VALIDATOR","MaxValidator","[attr.max]","McInputModule","NgModule","imports","CommonModule","A11yModule","McCommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Platform } from '@angular/cdk/platform';\nimport {\n    Attribute,\n    Directive,\n    ElementRef,\n    Input,\n    Optional,\n    Self\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport {\n    END, C, V, X, A, Z, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nexport function normalizeSplitter(value: string): string {\n    return value ? value.replace(/,/g, '.') : value;\n}\n\nexport function isFloat(value: string): boolean {\n    return /^-?\\d+\\.\\d+$/.test(value);\n}\n\nexport function isInt(value: string): boolean {\n    return /^-?\\d+$/.test(value);\n}\n\nexport function isDigit(value: string): boolean {\n    return isFloat(value) || isInt(value);\n}\n\nexport function getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nexport function add(value1: number, value2: number): number {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    return (value1 * precision + value2 * precision) / precision;\n}\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    host: {\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput {\n    @Input()\n    bigStep: number;\n\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    value: any;\n\n    focused: boolean = false;\n\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(\n        private platform: Platform ,\n        private elementRef: ElementRef,\n        @Optional() @Self() private ngControl: NgControl,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = isDigit(max) ? parseFloat(max) : Infinity;\n\n        if ('valueAsNumber' in this.nativeElement) {\n            Object.defineProperty(Object.getPrototypeOf(this.nativeElement), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n        const isCtrlZ = (e) => e.keyCode === Z && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        // Decimal is for IE\n        const isPeriod = (e) => this.platform.EDGE || this.platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isCtrlZ(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        if (!isDigit(normalizeSplitter(event.clipboardData.getData('text')))) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this.elementRef.nativeElement.focus();\n\n        const res = Math.max(Math.min(add(this.nativeElement.valueAsNumber || 0, step), this.max), this.min);\n\n        this.nativeElement.value = res.toString();\n\n        this.viewToModelUpdate(this.nativeElement.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this.elementRef.nativeElement.focus();\n\n        const res = Math.min(Math.max(add(this.nativeElement.valueAsNumber || 0, -step), this.min), this.max);\n\n        this.nativeElement.value = res.toString();\n\n        this.viewToModelUpdate(this.nativeElement.valueAsNumber);\n    }\n\n    private viewToModelUpdate(value: number) {\n        if (this.ngControl) {\n            this.ngControl.control!.setValue(value);\n        }\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport {\n    AfterContentInit,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport {\n    FormControlName,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    NgModel,\n    Validator\n} from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    mixinErrorState,\n    setMosaicValidation\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { McNumberInput } from './input-number';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()'\n    },\n    providers: [\n        { provide: McFormFieldControl, useExisting: McInput }\n    ]\n})\nexport class McInput extends McInputMixinBase implements McFormFieldControl<any>, OnChanges, OnDestroy, DoCheck,\n    CanUpdateErrorState, AfterContentInit, OnChanges {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    protected uid = `mc-input-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    private _disabled = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required = false;\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this.validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this.elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    private _type = 'text';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    // tslint:disable-next-line: orthodox-getter-and-setter\n    private _inputValueAccessor: { value: any };\n\n    // tslint:disable-next-line: naming-convention\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() @Self() ngControl: NgControl,\n        @Optional() @Self() public numberInput: McNumberInput,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() @Self() public formControlName: FormControlName,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.ngControl) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    onBlur(): void {\n        this.focusChanged(false);\n\n        if (this.ngControl && this.ngControl.control) {\n            const control = this.ngControl.control;\n\n            control.updateValueAndValidity({ emitEvent: false });\n            (control.statusChanges as EventEmitter<string>).emit(control.status);\n        }\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.isNeverEmpty() && !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected isNeverEmpty() {\n        return this.neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private validator: ValidatorFn;\n    private onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this.createValidator();\n            if (this.onChange) { this.onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this.validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this.onChange = fn; }\n\n    private createValidator(): void { this.validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private validator: ValidatorFn;\n    private onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this.createValidator();\n            if (this.onChange) { this.onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this.validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this.onChange = fn; }\n\n    private createValidator(): void { this.validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\nimport { McNumberInput } from './input-number';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {}\n"]}