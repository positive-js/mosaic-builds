// Import all the theming
@keyframes mc-progress {
    from {
        background-position: 0 0;
    }

    to {
        background-position: 29px 0;
    }
}

.mc-progress {
    position: relative;

    &:after {
        content: '';
        position: absolute;
        border-radius: inherit;

        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        $lighter: transparent;
        $darker: rgba(0, 0, 0, 0.05);
        background: linear-gradient(
            135deg,
            $darker 10px, $lighter 10px,
            $lighter 20px, $darker 20px,
            $darker 30px, $lighter 30px
        ) repeat;
        background-size: 29px 29px;
        animation: mc-progress 1s linear infinite;
    }
}

@mixin user-select($value) {
    -webkit-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

@mixin input-placeholder {
    &::placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin cursor-grab {
    cursor: -webkit-grab;
    cursor: grab;
}

@mixin cursor-grabbing {
    cursor: -webkit-grabbing;
    cursor: grabbing;
}



$mc-button-border-size: 1px;
$mc-button-border-radius: 3px;


@mixin mc-button-reset {
    @include user-select(none);
    cursor: pointer;
    outline: none;
    border: none;
}




@mixin border-top-radius($radius) {
    border-top: {
        right-radius: $radius;
        left-radius: $radius;
    }
}

@mixin border-bottom-radius($radius) {
    border-bottom: {
        right-radius: $radius;
        left-radius: $radius;
    }
}

@mixin border-right-radius($radius) {
    border: {
        bottom-right-radius: $radius;
        top-right-radius: $radius;
    }
}

@mixin border-left-radius($radius) {
    border: {
        bottom-left-radius: $radius;
        top-left-radius: $radius;
    }
}

.mc-group {
    display: flex;
    flex-direction: row;

    .mc-group_justified {
        > .mc-group-item {
            width: 100%;
        }
    }

    .mc-group-item + .mc-group-item {
        margin-left: -$mc-button-border-size;
    }

    & > .mc-group-item:first-child:not(:last-child) {
        @include border-right-radius(0);

        > .mc-form-field__container {
            @include border-right-radius(0);
        }
    }

    & > .mc-group-item:last-child:not(:first-child) {
        @include border-left-radius(0);

        > .mc-form-field__container {
            @include border-left-radius(0);
        }
    }

    & > .mc-group-item:not(:first-child):not(:last-child) {
        border-radius: 0;

        > .mc-form-field__container {
            border-radius: 0;
        }
    }
}

.mc-vertical-group {
    display: flex;
    flex-direction: column;

    /* stylelint-disable no-descending-specificity */
    > .mc-group-item {
        &:first-child:not(:last-child) {
            @include border-bottom-radius(0);

            border-top-right-radius: $mc-button-border-radius;

            > .mc-form-field__container {
                @include border-bottom-radius(0);
            }
        }

        &:last-child:not(:first-child) {
            @include border-top-radius(0);

            border-bottom-left-radius: $mc-button-border-radius;

            > .mc-form-field__container {
                @include border-top-radius(0);
            }
        }

        &:not(:first-child):not(:last-child) {
            border-radius: 0;

            > .mc-form-field__container {
                border-radius: 0;
            }
        }
    }

    .mc-group-item + .mc-group-item {
        margin-top: -$mc-button-border-size;
    }
    /* stylelint-enable no-descending-specificity */
}



@mixin cdk-a11y {
    .cdk-visually-hidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;

        // Avoid browsers rendering the focus ring in some cases.
        outline: 0;

        // Avoid some cases where the browser will still render the native controls (see #9049).
        -webkit-appearance: none;
        -moz-appearance: none;
    }
}

/// Emits the mixin's content nested under `$selector-context` if `$selector-context`
/// is non-empty.
/// @param selector-context The selector under which to nest the mixin's content.
@mixin _cdk-optionally-nest-content($selector-context) {
    @if ($selector-context == '') {
        @content;
    }
    @else {
        #{$selector-context} {
            @content;
        }
    }
}

/// Applies styles for users in high contrast mode. Note that this only applies
/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`
/// attribute, however Chrome handles high contrast differently.
///
/// @param target Which kind of high contrast setting to target. Defaults to `active`, can be
///    `white-on-black` or `black-on-white`.
/// @param encapsulation Whether to emit styles for view encapsulation. Values are:
///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`
///     * `off` - works for `None`
///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).
@mixin cdk-high-contrast($target: active, $encapsulation: 'any') {
    @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {
        @error 'Unknown cdk-high-contrast value "#{$target}" provided. ' +
            'Allowed values are "active", "black-on-white", and "white-on-black"';
    }

    @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {
        @error 'Unknown cdk-high-contrast encapsulation "#{$encapsulation}" provided. ' +
            'Allowed values are "on", "off", and "any"';
    }

    // If the selector context has multiple parts, such as `.section, .region`, just doing
    // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the
    // context. We address this by nesting the selector context under .cdk-high-contrast.
    @at-root {
        $selector-context: #{&};

        @if ($encapsulation != 'on') {
            .cdk-high-contrast-#{$target} {
                @include _cdk-optionally-nest-content($selector-context) {
                    @content;
                }
            }
        }

        @if ($encapsulation != 'off') {
            .cdk-high-contrast-#{$target} :host {
                @include _cdk-optionally-nest-content($selector-context) {
                    @content;
                }
            }
        }
    }
}

// We want overlays to always appear over user content, so set a baseline
// very high z-index for the overlay container, which is where we create the new
// stacking context for all overlays.
$cdk-z-index-overlay-container: 1000 !default;
$cdk-z-index-overlay: 1000 !default;
$cdk-z-index-overlay-backdrop: 1000 !default;

// Background color for all of the backdrops
$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.32) !default;

// Default backdrop animation is based on the Material Design swift-ease-out.
$backdrop-animation-duration: 400ms !default;
$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;


@mixin cdk-overlay() {
  .cdk-overlay-container, .cdk-global-overlay-wrapper {
    // Disable events from being captured on the overlay container.
    pointer-events: none;

    // The container should be the size of the viewport.
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  // The overlay-container is an invisible element which contains all individual overlays.
  .cdk-overlay-container {
    position: fixed;
    z-index: $cdk-z-index-overlay-container;

    &:empty {
      // Hide the element when it doesn't have any child nodes. This doesn't
      // include overlays that have been detached, rather than disposed.
      display: none;
    }
  }

  // We use an extra wrapper element in order to use make the overlay itself a flex item.
  // This makes centering the overlay easy without running into the subpixel rendering
  // problems tied to using `transform` and without interfering with the other position
  // strategies.
  .cdk-global-overlay-wrapper {
    display: flex;
    position: absolute;
    z-index: $cdk-z-index-overlay;
  }

  // A single overlay pane.
  .cdk-overlay-pane {
    // Note: it's important for this one to start off `absolute`,
    // in order for us to be able to measure it correctly.
    position: absolute;
    pointer-events: auto;
    box-sizing: border-box;
    z-index: $cdk-z-index-overlay;

    // For connected-position overlays, we set `display: flex` in
    // order to force `max-width` and `max-height` to take effect.
    display: flex;
    max-width: 100%;
    max-height: 100%;
  }

  .cdk-overlay-backdrop {
    // TODO(jelbourn): reuse sidenav fullscreen mixin.
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    z-index: $cdk-z-index-overlay-backdrop;
    pointer-events: auto;
    -webkit-tap-highlight-color: transparent;
    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;
    opacity: 0;

    &.cdk-overlay-backdrop-showing {
      opacity: 1;

      // In high contrast mode the rgba background will become solid so we need to fall back
      // to making it opaque using `opacity`. Note that we can't use the `cdk-high-contrast`
      // mixin, because we can't normalize the import path to the _a11y.scss both for the
      // source and when this file is distributed. See #10908.
      @media screen and (-ms-high-contrast: active) {
        opacity: 0.6;
      }
    }
  }

  .cdk-overlay-dark-backdrop {
    background: $cdk-overlay-dark-backdrop-background;
  }

  .cdk-overlay-transparent-backdrop {
    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from
    // capturing the user's mouse scroll events. Since we also can't use something like
    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at
    // all and using `opacity` to make the element transparent.
    &, &.cdk-overlay-backdrop-showing {
      opacity: 0;
    }
  }

  // Overlay parent element used with the connected position strategy. Used to constrain the
  // overlay element's size to fit within the viewport.
  .cdk-overlay-connected-position-bounding-box {
    position: absolute;
    z-index: $cdk-z-index-overlay;

    // We use `display: flex` on this element exclusively for centering connected overlays.
    // When *not* centering, a top/left/bottom/right will be set which overrides the normal
    // flex layout.
    display: flex;

    // We use the `column` direction here to avoid some flexbox issues in Edge
    // when using the "grow after open" options.
    flex-direction: column;

    // Add some dimensions so the element has an `innerText` which some people depend on in tests.
    min-width: 1px;
    min-height: 1px;
  }

  // Used when disabling global scrolling.
  .cdk-global-scrollblock {
    position: fixed;

    // Necessary for the content not to lose its width. Note that we're using 100%, instead of
    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width
    // that the element had before we made it `fixed`.
    width: 100%;

    // Note: this will always add a scrollbar to whatever element it is on, which can
    // potentially result in double scrollbars. It shouldn't be an issue, because we won't
    // block scrolling on a page that doesn't have a scrollbar in the first place.
    overflow-y: scroll;
  }
}


$mc-blue: (
    40: #F5FAFD,
    60: #EBF4FB,
    100: #D8EAF7,
    200: #AAD1EC,
    300: #7FBAE1,
    400: #57A4D7,
    500: #338FCC,
    560: #277BB3,
    600: #206EA2,
    700: #114E77,
    800: #07314D,
    A100: rgba(0, 153, 255, 0.15),
    A200: rgba(0, 153, 255, 0.3),
    contrast: (
        40: #4D4D4D,
        60: #4D4D4D,
        100: #4D4D4D,
        200: #4D4D4D,
        300: #4D4D4D,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: #4D4D4D,
        A200: white,
    )
);

$mc-green: (
    40: #F6FBF4,
    60: #EDF8E9,
    100: #DCF1D4,
    200: #B4DEA4,
    300: #8FCC79,
    400: #6FBA53,
    500: #52A832,
    560: #449327,
    600: #3B8520,
    700: #276211,
    800: #163F07,
    A100: rgba(68, 255, 0, 0.15),
    contrast: (
        40: #4D4D4D,
        60: #4D4D4D,
        100: #4D4D4D,
        200: #4D4D4D,
        300: #4D4D4D,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: #4D4D4D,
    )
);

$mc-red: (
    40: #FEF7F6,
    60: #FCEFEC,
    100: #FADEDA,
    200: #F4B7AE,
    300: #ED9284,
    400: #E76E5C,
    500: #E04D36,
    560: #C43E29,
    600: #B23522,
    700: #832112,
    800: #541208,
    A100: rgba(224, 79, 56, 0.15),
    contrast: (
        40: #4D4D4D,
        60: #4D4D4D,
        100: #4D4D4D,
        200: #4D4D4D,
        300: #4D4D4D,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: #4D4D4D,
    )
);

$mc-grey: (
    40: #F5F5F5,
    60: #F0F0F0,
    100: #E6E6E6,
    200: #CCCCCC,
    300: #B3B3B3,
    400: #999999,
    500: #808080,
    560: #707070,
    600: #666666,
    700: #4D4D4D,
    800: #333333,
    A40: rgba(0, 0, 0, 0.04),
    A60: rgba(0, 0, 0, 0.06),
    A100: rgba(0, 0, 0, 0.1),
    A200: rgba(0, 0, 0, 0.2),
    A300: rgba(0, 0, 0, 0.3),
    A500: rgba(0, 0, 0, 0.5),
    contrast: (
        40: #4D4D4D,
        60: #4D4D4D,
        100: #4D4D4D,
        200: #4D4D4D,
        300: #4D4D4D,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
    )
);

$mc-yellow: (
    40: #FDFAF3,
    60: #FCF5E8,
    100: #F8EBD1,
    200: #F0D49B,
    300: #E7BD68,
    400: #DFA739,
    500: #D6930D,
    560: #BB800A,
    600: #AA7408,
    700: #7D5504,
    800: #503602,
    A100: rgba(255, 170, 0, 0.15),
    contrast: (
        40: #4D4D4D,
        60: #4D4D4D,
        100: #4D4D4D,
        200: #4D4D4D,
        300: #4D4D4D,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: #4D4D4D,
    )
);


$mc-light-theme-foreground: (
    text:                       map-get($mc-grey, 700),
    text-less-contrast:         map-get($mc-grey, 400),
    text-disabled:              map-get($mc-grey, 300),

    divider:                    map-get($mc-grey, 100),
    border:                     map-get($mc-grey, 300),

    icon:                       map-get($mc-grey, 400),
);

$mc-dark-theme-foreground: (
    text:                       map-get($mc-grey, 60),
    text-less-contrast:         map-get($mc-grey, 400),
    text-disabled:              map-get($mc-grey, 400),

    divider:                    map-get($mc-grey, 600),
    border:                     map-get($mc-grey, 500),

    icon:                       map-get($mc-grey, 400),
);

$mc-light-theme-background: (
    background:                 white,
    background-popup:           white,
    background-popup-footer:    map-get($mc-grey, 60),
    background-disabled:        map-get($mc-grey, 60),

    overlay-hovered:            rgba(black, 0.05),
    overlay-active:             rgba(black, 0.1),
    overlay-disabled:           rgba(white, 0.3)
);

$mc-dark-theme-background: (
    background:                 map-get($mc-grey, 800),
    background-popup:           map-get($mc-grey, 700),
    background-popup-footer:    transparent,
    background-disabled:        map-get($mc-grey, 600),

    overlay-hovered:            rgba(white, 0.05),
    overlay-active:             rgba(white, 0.1),
    overlay-disabled:           rgba(black, 0.2)
);

@function mc-light-theme-components($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $focused-color: map-get(map-get($theme, states), focused-color);

    $popup-common: (
        shadow: 0 3px 3px 0 mc-color($second, A200),
        border-color: mc-color($second),
        divider-color: mc-color($second, 200),

        background: map-get($background, background-popup),
        footer_background-color: map-get($background, background-popup-footer)
    );

    $button: (
        state-active_shadow: inset 0 1px 2px 0 rgba(black, 0.2),

        primary: (
            color: mc-contrast($primary, 500),
            border-color: map-get($primary, 560),
            background: map-get($primary, 500),
            icon-color: mc-contrast($primary, 500),

            state-active_border-color: darken(mc-color($primary, 560), 5),
            state-active_background: darken(mc-color($primary, 500), 5)
        ),

        second: (
            border-color: mc-color($foreground, border),
            background: map-get($background, background-disabled),
            color: map-get($foreground, text),
            icon-color: map-get($foreground, text-less-contrast),

            state-active_border-color: darken(mc-color($foreground, border), 5),
            state-active_background: darken(map-get($background, background-disabled), 5)
        ),

        error: (
            border-color: mc-color($foreground, border),
            background: map-get($background, background-disabled),
            color: mc-color($error),
            icon-color: mc-color($error, 400),

            state-active_border-color: darken(mc-color($foreground, border), 5),
            state-active_background: darken(map-get($background, background-disabled), 5)
        )
    );

    $checkbox: (
        border-color: mc-color($second),

        state-checked_border-color: mc-color($primary, darker),
        state-checked_background: mc-color($primary),

        state-focused_border-color: mc-color($primary),
        state-focused_shadow: (inset 0 0 0 1px map-get($background, background), 0 0 0 1px mc-color($primary))
    );

    $modal: (
        mask-background: rgba(0, 0, 0, 0.5),
        shadow: (0 0 0 1px mc-color($second, 300), 0 6px 12px 0 rgba(0, 0, 0, 0.5))
    );

    $navbar: (
        background-color: mc-color($primary, 700),
        color: mc-color($primary, 100),
        opacity: 0.5,

        item_color: mc-color($primary, 100),

        item_state-active_color: lighten(mc-color($primary, 700), 5%),
        item_state-hover_color: lighten(mc-color($primary, 700), 5%),
        item_state-progress_color: lighten(mc-color($primary, 800), 15%),
        item_state-disabled_opacity: 0.3,
    );

    $popover: (
        border-color: map-get($foreground, border),
    );

    $progress-bar: (
        background: mc-color($second, 60),
    );

    $radio: (
        outer-circle_border-color: mc-color($second),
        inner-circle_border-color: transparent,

        outer-circle_checked-state_border-color: mc-color($primary),
        outer-circle_focused-state_border-color: $focused-color,
        outer-circle_focused-state_shadow: 0 0 0 2px $focused-color,

        inner-circle_checked-state_border-color: mc-color($primary),
        inner-circle_focused-state_shadow: 0 0 0 1px map-get($background, background)
    );

    $sidepanel: (
        border_color: mc-color($second, 300)
    );

    $tabs: (
        border-color: mc-color($second, 300),
        state-active_color: mc-color($primary),
    );

    $tags: (
        primary: (
            background: mc-color($primary, 100),
            border-color: mc-color($primary, 100),
            focused-state_color: mc-color($primary),
            icon-color: mix(mc-color($primary, 400), map-get($background, overlay-hovered)),
            hovered-icon-color: mc-color($primary, darker),
            state-disable_background: mix(mc-color($primary), transparent, 10%),
            state-disable_color: mix(mc-color($primary), transparent, 50%),
        ),

        second: (
            background: mc-color($second, 100),
            border-color: mc-color($second, 100),
            focused-state_color: mc-color($primary),
            icon-color: mix(mc-color($second, 400), map-get($background,  overlay-hovered)),
            hovered-icon-color: mc-color($second, darker),
            state-disable_background: mix(mc-color($second), transparent, 10%),
            state-disable_color: mix(mc-color($second), transparent, 50%),
        ),

        error: (
            background: mc-color($error, 100),
            border-color: mc-color($error, 100),
            focused-state_color: mc-color($error),
            icon-color: mix(mc-color($error, 400), map-get($background,  overlay-hovered)),
            hovered-icon-color: mc-color($error, darker),
            state-disable_background: mix(mc-color($error), transparent, 10%),
            state-disable_color: mix(mc-color($error), transparent, 50%),
        )
    );

    $toggle: (
        border-color: mc-color($foreground, border),
        background: linear-gradient(to bottom, mc-color($second, lighter), mc-color($background, background-disabled)),

        circle_border-color: mc-color($foreground, border),
        circle_background: linear-gradient(to bottom, white, mc-color($second, lighter)),

        focused-state_color: (inset 0 0 0 1px map-get($background, background), 0 0 0 2px mc-color($primary))
    );

    $tooltip: (
        background-color: map-get($second, 700),
        color: mc-contrast($second, 700),
        shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2)
    );

    $vertical-navbar: (
        background-color: mc-color($primary, 700),
        color: mc-contrast($primary, 700),

        toggle-button_color: mc-contrast($primary, 700),

        state-hover_background-color: lighten(mc-color($primary, 700), 5%),
        state-active_background-color: lighten(mc-color($primary, 700), 5%),
        state-progress_background-color: lighten(mc-color($primary, 800), 15%)
    );

    @return (
        popup-common: $popup-common,
        button: $button,
        checkbox: $checkbox,
        modal: $modal,
        navbar: $navbar,
        popover: $popover,
        progress-bar: $progress-bar,
        radio: $radio,
        sidepanel: $sidepanel,
        tabs: $tabs,
        tags: $tags,
        toggle: $toggle,
        tooltip: $tooltip,
        vertical-navbar: $vertical-navbar,
    );
}

@function mc-dark-theme-components($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $focused-color: map-get(map-get($theme, states), focused-color);

    $popup-common: (
        shadow: 0 3px 3px 0 mc-color($second, A200),
        border-color: mc-color($second),
        divider-color: mc-color($foreground, divider),

        background: map-get($background, background-popup),
        footer_background-color: map-get($background, background-popup-footer)
    );

    $button: (
        state-active_shadow: inset 1px 2px 2px 0 rgba(black, 0.2),

        primary: (
            color: mc-contrast($primary, 500),
            border-color: map-get($primary, 560),
            background: map-get($primary, 500),
            icon-color: mc-contrast($primary, 500),

            state-active_border-color: darken(mc-color($primary, 560), 5),
            state-active_background: darken(mc-color($primary, 500), 5),
        ),

        second: (
            color: map-get($foreground, text),
            border-color: mc-color($foreground, border),
            background: map-get($background, background-disabled),
            icon-color: map-get($foreground, text-less-contrast),

            state-active_border-color: darken(mc-color($foreground, border), 5),
            state-active_background: darken(map-get($background, background-disabled), 5),
        ),

        error: (
            color: mc-color($error),
            border-color: mc-color($foreground, border),
            background: map-get($background, background-disabled),
            icon-color: mc-color($error, 400),

            state-active_border-color: darken(mc-color($foreground, border), 5),
            state-active_background: darken(map-get($background, background-disabled), 5)
        )
    );

    $checkbox: (
        border-color: mc-color($second),

        state-checked_border-color: mc-color($primary, lighter),
        state-checked_background: mc-color($primary, 600),

        state-focused_border-color: mc-color($primary),
        state-focused_shadow: (inset 0 0 0 1px map-get($background, background), 0 0 0 1px mc-color($primary))
    );

    $datepicker: ();

    $modal: (
        mask-background: rgba(0, 0, 0, 0.5),
        shadow: (0 0 0 1px mc-color($second, 800), 0 6px 12px 0 rgba(0, 0, 0, 0.5))
    );

    $navbar: (
        background-color: mc-color($primary, 700),
        color: mc-color($primary, 100),
        opacity: 0.5,

        item_color: mc-color($primary, 100),

        item_state-active_color: lighten(mc-color($primary, 700), 5%),
        item_state-hover_color: lighten(mc-color($primary, 700), 5%),
        item_state-progress_color: lighten(mc-color($primary, 800), 15%),
        item_state-disabled_opacity: 0.3,
    );

    $popover: (
        border-color: mc-color($second, 700),
    );

    $progress-bar: (
        background-color: mc-color($second, 600),
    );

    $radio: (
        outer-circle_border-color: mc-color($second),
        inner-circle_border-color: transparent,

        outer-circle_checked-state_border-color: mc-color($primary),
        outer-circle_focused-state_border-color: $focused-color,
        outer-circle_focused-state_shadow: 0 0 0 2px $focused-color,

        inner-circle_checked-state_border-color: mc-color($primary, 600),
        inner-circle_focused-state_shadow: 0 0 0 1px map-get($background, background)
    );

    $sidepanel: (
        border_color: mc-color($second, 800),
    );

    $tabs: (
        border-color: mc-color($second, 300),
        state-active_color: mc-color($primary),
    );

    $tags: (
        primary: (
            background: mc-color($primary, 700),
            border-color: mc-color($primary, 700),
            focused-state_color: mc-color($primary),
            icon-color: mix(mc-color($primary, 400), map-get($background, overlay-hovered)),
            hovered-icon-color: mc-color($primary, lighter),
            state-disable_background: mix(mc-color($primary), transparent, 10%),
            state-disable_color: mix(mc-color($primary), transparent, 50%),
        ),

        second: (
            background: mc-color($second, 700),
            border-color: mc-color($second, 700),
            focused-state_color: mc-color($primary),
            icon-color: mix(mc-color($second, 400), map-get($background,  overlay-hovered)),
            hovered-icon-color: mc-color($second, lighter),
            state-disable_background: mix(mc-color($second), transparent, 10%),
            state-disable_color: mix(mc-color($second), transparent, 50%),
        ),

        error: (
            background: mc-color($error, 700),
            border-color: mc-color($error, 700),
            focused-state_color: mc-color($error),
            icon-color: mix(mc-color($error, 400), map-get($background,  overlay-hovered)),
            hovered-icon-color: mc-color($error, lighter),
            state-disable_background: mix(mc-color($error), transparent, 10%),
            state-disable_color: mix(mc-color($error), transparent, 50%),
        )
    );

    $toggle: (
        border-color: mc-color($foreground, border),
        background: map-get($background, background),

        circle_border-color: mc-color($foreground, border),
        circle_background: white,

        focused-state_color: (inset 0 0 0 1px map-get($background, background), 0 0 0 2px mc-color($primary)),
    );

    $tooltip: (
        background-color: white,
        color: mc-color($second, 700),
        shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2)
    );

    $vertical-navbar: (
        background-color: mc-color($primary, 700),
        color: mc-contrast($primary, 700),

        toggle-button_color: mc-contrast($primary, 700),

        state-hover_background-color: lighten(mc-color($primary, 700), 5%),
        state-active_background-color: lighten(mc-color($primary, 700), 5%),
        state-progress_background-color: lighten(mc-color($primary, 800), 15%),
    );

    @return (
        popup-common: $popup-common,
        button: $button,
        checkbox: $checkbox,
        modal: $modal,
        navbar: $navbar,
        popover: $popover,
        progress-bar: $progress-bar,
        radio: $radio,
        sidepanel: $sidepanel,
        tabs: $tabs,
        tags: $tags,
        toggle: $toggle,
        tooltip: $tooltip,
        vertical-navbar: $vertical-navbar,
    );
}



@function mc-contrast($palette, $hue) {
    @return map-get(map-get($palette, contrast), $hue);
}

@function mc-palette($base-palette, $lighter: 100, $default: 500, $darker: 700) {
    $result: map_merge($base-palette, (
        default: map-get($base-palette, $default),
        lighter: map-get($base-palette, $lighter),
        darker:  map-get($base-palette, $darker),

        default-contrast: mc-contrast($base-palette, $default),
        lighter-contrast: mc-contrast($base-palette, $lighter),
        darker-contrast:  mc-contrast($base-palette, $darker)
    ));

    // For each hue in the palette, add a "-contrast" color to the map.
    @each $hue, $color in $base-palette {
        $result: map_merge($result, (
            '#{$hue}-contrast': mc-contrast($base-palette, $hue)
        ));
    }

    @return $result;
}

@function mc-color($palette, $hue: default, $opacity: null) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return mc-color($palette, default, $hue);
    }

    $color: map-get($palette, $hue);
    $opacity: if($opacity == null, opacity($color), $opacity);

    @return rgba($color, $opacity);
}

@function mc-light-theme(
    $primary,
    $second,
    $error,

    $info: mc-palette($mc-blue),
    $success: mc-palette($mc-green),
    $warning: mc-palette($mc-yellow)
) {
    $states: (
        focused-color: mc-color($primary),
        selected-color: mc-color($primary, 100),
        pressed-shadow: inset 0 1px 2px 0 rgba(black, 0.2),
        disabled-opacity: 0.3
    );

    $theme: (
        is-dark: false,

        primary: $primary,
        second: $second,
        error: $error,

        foreground: $mc-light-theme-foreground,
        background: $mc-light-theme-background,

        warning: $warning,
        success: $success,
        info: $info,

        states: $states
    );

    @return map_merge($theme, (components: mc-light-theme-components($theme)));
}

@function mc-dark-theme(
    $primary,
    $second,
    $error,

    $info: mc-palette($mc-blue),
    $success: mc-palette($mc-green),
    $warning: mc-palette($mc-yellow)
) {
    $states: (
        focused-color: mc-color($primary),
        selected-color: mc-color($primary, 700),
        pressed-shadow: inset 1px 2px 2px 0 rgba(black, 0.2),
        disabled-opacity: 0.3
    );

    $theme: (
        is-dark: true,

        primary: $primary,
        second: $second,
        error: $error,

        foreground: $mc-dark-theme-foreground,
        background: $mc-dark-theme-background,

        warning: $warning,
        success: $success,
        info: $info,

        states: $states
    );

    @return map_merge($theme, (components: mc-dark-theme-components($theme)));
}



@mixin mc-pseudo-checkbox-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    .mc-pseudo-checkbox {
        border-color: mc-color($second);
        background-color: map-get($background, background);

        & .mc-checkbox-checkmark,
        & .mc-checkbox-mixedmark {
            color: white;
        }

        &.mc-checked {
            border-color: mc-color($primary, if($is-dark, lighter, darker));

            background: if($is-dark, mc-color($primary, 600), mc-color($primary));
        }

        &.mc-disabled {
            border-color: map-get($foreground, border);

            background-color: map-get($background, background-disabled);

            .mc-checkbox-checkmark,
            .mc-checkbox-mixedmark {
                color: map-get($foreground, text-disabled);
            }
        }
    }
}



$typography-font-weight-values: (
    thin: 100,
    light: 300,
    regular: 400,
    medium: 500,
    bold: 700,
    black: 900
) !default;


// TODO add caption-height
$fonts: (
    base: (
        font-family: #{Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif}
    ),
    monospace: (
        font-family: #{'Roboto Mono', 'Consolas', 'Menlo', 'Monaco', monospace}
    )
);




@function mc-typography-level(
    $font-size,
    $line-height: $font-size,
    $letter-spacing: normal,
    $font-weight: normal,
    $font-family: null,
    $text-transform: null
) {
    @return (
        font-size: $font-size,
        line-height: $line-height,
        font-weight: $font-weight,
        font-family: $font-family,
        letter-spacing: $letter-spacing,
        text-transform: $text-transform
    );
}

@function _mc-get-type-value($config, $level, $name) {
    @return map-get(map-get($config, $level), $name);
}

@function mc-font-size($config, $level) {
    @return _mc-get-type-value($config, $level, font-size);
}

@function mc-line-height($config, $level) {
    @return _mc-get-type-value($config, $level, line-height);
}

@function mc-font-weight($config, $level) {
    @return _mc-get-type-value($config, $level, font-weight);
}

@function mc-letter-spacing($config, $level) {
    @return _mc-get-type-value($config, $level, letter-spacing);
}

@function mc-text-transform($config, $level) {
    @return _mc-get-type-value($config, $level, text-transform);
}

// Gets the font-family from a typography config and removes the quotes around it.
@function mc-font-family($config, $level: null) {
    $font-family: map-get($config, font-family);

    @if $level != null {
        $font-family: _mc-get-type-value($config, $level, font-family);
    }

    // Guard against unquoting non-string values, because it's deprecated.
    @return if(type-of($font-family) == string, unquote($font-family), $font-family);
}

@mixin mc-typography-level-to-styles($config, $level) {
    $font-size: mc-font-size($config, $level);
    $font-weight: mc-font-weight($config, $level);
    $line-height: mc-line-height($config, $level);
    $font-family: mc-font-family($config, $level);
    $text-transform: mc-font-family($config, $level);

    font: $font-weight #{$font-size}/#{$line-height} $font-family;
    letter-spacing: mc-letter-spacing($config, $level);
    text-transform: mc-text-transform($config, $level);
}

@mixin mc-base-typography($config) {
    .mc-display-1 {
        @include mc-typography-level-to-styles($config, display-1);
    }

    .mc-display-2 {
        @include mc-typography-level-to-styles($config, display-2);
    }

    .mc-display-3 {
        @include mc-typography-level-to-styles($config, display-3);
    }

    .mc-headline {
        @include mc-typography-level-to-styles($config, headline);
    }

    .mc-subheading {
        @include mc-typography-level-to-styles($config, subheading);
    }

    .mc-title {
        @include mc-typography-level-to-styles($config, title);
    }

    .mc-body {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-body_strong {
        @include mc-typography-level-to-styles($config, body-strong);
    }

    .mc-body_caps {
        @include mc-typography-level-to-styles($config, body-caps);
    }

    .mc-body_mono {
        @include mc-typography-level-to-styles($config, body-mono);
    }

    .mc-caption {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-caption_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }

    .mc-caption_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-small-text {
        @include mc-typography-level-to-styles($config, small-text);
    }

    .mc-extra-small-text {
        @include mc-typography-level-to-styles($config, extra-small-text);
    }
}



@function mc-typography-config(
    $font-family:   map-get(map-get($fonts, base), font-family),
    $font-family-mono:   map-get(map-get($fonts, monospace), font-family),

    $display-1:     mc-typography-level(56px, 76px, -0.4px),
    $display-2:     mc-typography-level(45px, 56px),
    $display-3:     mc-typography-level(34px, 44px, 0.25px),

    $headline:      mc-typography-level(24px, 32px),
    $title:         mc-typography-level(20px, 28px, 0.15px, 500),
    $subheading:    mc-typography-level(15px, 20px, 0.15px, 700),

    $body:          mc-typography-level(15px, 20px, 0.15px),
    $body-strong:   mc-typography-level(15px, 20px, 0.15px, 500),
    $body-caps:     mc-typography-level(15px, 20px, 1.7px, normal, $font-family, uppercase),
    $body-mono:     mc-typography-level(15px, 20px, normal, normal, $font-family-mono),

    $caption:       mc-typography-level(13px, 16px, 0.25px),
    $caption-caps:  mc-typography-level(13px, 16px, 1.5px, normal, $font-family, uppercase),
    $caption-mono:  mc-typography-level(13px, 16px, normal, normal, $font-family-mono),

    $small-text:    mc-typography-level(13px, 16px, 0.25px),
    $extra-small-text:    mc-typography-level(11px, 16px, 0.22px)
) {

    $config: (
        display-1:      $display-1,
        display-2:      $display-2,
        display-3:      $display-3,

        headline:       $headline,
        subheading:     $subheading,
        title:          $title,

        body:           $body,
        body-strong:    $body-strong,
        body-caps:      $body-caps,
        body-mono:      $body-mono,

        caption:        $caption,
        caption-caps:   $caption-caps,
        caption-mono:   $caption-mono,

        small-text:     $small-text,
        extra-small-text: $extra-small-text
    );

    @each $key, $level in $config {
        @if map-get($level, font-family) == null {
            $new-level: map-merge($level, (font-family: $font-family));
            $config: map-merge($config, ($key: $new-level));
        }
    }

    // Add the base font family to the config.
    @return map-merge($config, (font-family: $font-family));
}






.mc-alert {
    display: flex;
    align-items: baseline;

    vertical-align: top;
    text-align: left;

    border: 1px solid transparent;
    border-radius: 4px;

    .mc-link {
        padding-left: 0;
    }

    .mc-alert__icon {
        margin-right: 8px;
    }

    &.mc-alert_small {
        // todo откуда такие паддинги ?
        padding: 11px 15px;

        &.mc-alert_dismissible {
            padding-right: 32px;
        }
    }

    &:not(.mc-alert_small) {
        // todo откуда такие паддинги ?
        padding: 13px 15px;

        &.mc-alert_dismissible {
            padding-right: 32px;
        }
    }
}

.mc-alert_dismissible {
    position: relative;

    .mc-alert__close {
        position: absolute;

        z-index: 10;
        right: 15px;

        border: 1px solid transparent;
        outline: 0;

        margin: 0;

        background: transparent;

        padding: 0;

        cursor: pointer;
        text-align: center;
    }

    &.mc-alert_small {
        .mc-alert__close {
            top: 10px;
        }
    }

    &:not(.mc-alert_small) {
        .mc-alert__close {
            top: 14px;
        }
    }
}

@mixin alert-theme($color, $is-dark) {
    background-color: mc-color($color, if($is-dark, darker, lighter));
    border-color: mc-color($color, if($is-dark, darker, default));

    .mc-alert__icon {
        color: mc-color($color, if($is-dark, default, darker));
    }
}

@mixin mc-alert-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $warning: map-get($theme, warning);
    $success: map-get($theme, success);
    $info: map-get($theme, info);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-alert__close:focus {
        outline: none;
    }

    .mc-alert {
        color: mc-color($foreground, text);
    }

    .mc-alert_error {
        background-color: mc-color($error, if($is-dark, darker, lighter));
        // todo $error более темный в светлой теме
        border-color: mc-color($error, if($is-dark, darker, 200));

        .mc-alert__icon {
            color: mc-color($error, if($is-dark, default, 400));
        }
    }

    .mc-alert_warning {
        @include alert-theme($warning, $is-dark);
    }

    .mc-alert_success {
        @include alert-theme($success, $is-dark);
    }

    .mc-alert_info {
        @include alert-theme($info, $is-dark);
    }

    .mc-alert:not(.mc-alert_error):not(.mc-alert_warning):not(.mc-alert_success):not(.mc-alert_info) {
        background-color: mc-color($second, if($is-dark, darker, lighter));
        border-color: mc-color($second, if($is-dark, darker, 200));

        .mc-alert__icon {
            color: mc-color($second, if($is-dark, default, 400));
        }
    }
}

@mixin mc-alert-typography($config) {

    .mc-alert:not(.mc-alert_small) {
        @include mc-typography-level-to-styles($config, body);

        header {
            @include mc-typography-level-to-styles($config, subheading);
        }
    }

    .mc-alert.mc-alert_small {
        @include mc-typography-level-to-styles($config, caption);

        header {
            @include mc-typography-level-to-styles($config, caption);
        }

        .mc-link__text {
            @include mc-typography-level-to-styles($config, caption);
        }
    }

    .mc-icon {
        letter-spacing: unset;
    }
}






.mc-badge {
    display: inline-block;

    vertical-align: middle;

    min-width: 10px;

    padding: 4px 8px;

    border: {
        width: 1px;
        style: solid;
        radius: 4px;
    }

    text-align: center;
    white-space: nowrap;
}


@mixin mc-badge-color($color, $is-dark) {
    color: white;

    $color: mc-color($color, if($is-dark, 700, 500));

    border-color: $color;
    background-color: $color;
}

@mixin mc-badge-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);
    $warning: map-get($theme, warning);
    $success: map-get($theme, success);
    $info: map-get($theme, info);

    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    .mc-badge {
        color: map-get($foreground, text);
        border-color: mc-color($second, 400);
    }

    .mc-badge_light {
        $color: mc-color($second, if($is-dark, 400, 100));

        border-color: $color;
        background-color: $color;
    }

    .mc-badge_second {
        @include mc-badge-color($second, $is-dark);
    }

    .mc-badge_primary {
        @include mc-badge-color($primary, $is-dark);
    }

    .mc-badge_error {
        @include mc-badge-color($error, $is-dark);
    }

    .mc-badge_info {
        @include mc-badge-color($info, $is-dark);
    }

    .mc-badge_success {
        @include mc-badge-color($success, $is-dark);
    }

    .mc-badge_warning {
        @include mc-badge-color($warning, $is-dark);
    }
}

@mixin mc-badge-typography($config) {

    .mc-badge {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-badge_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }
}


@mixin popup-params($theme) {
    $popup-common: map-get(map-get($theme, components), popup-common);

    box-shadow: map-get($popup-common, shadow);
    border-color: map-get($popup-common, border-color);

    background-color: map-get($popup-common, background);
}


@mixin mc-autocomplete-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-autocomplete-panel {
        @include popup-params($theme);

        color: mc-color($foreground, text);

        .mc-selected {
            $popup-common: map-get(map-get($theme, components), popup-common);

            background-color: map-get($popup-common, background);
        }
    }
}

@mixin mc-autocomplete-typography($config) {}

@mixin mc-button-color($params) {
    color: map-get($params, color);
    border-color: map-get($params, border-color);
    background: map-get($params, background);

    .mc-icon {
        color: map-get($params, icon-color);
    }

    &:active,
    &.mc-active {
        border-color: map-get($params, state-active_border-color);
        background: map-get($params, state-active_background);
    }
}

@mixin mc-button-theme($theme) {
    $background: map-get($theme, background);

    $button: map-get(map-get($theme, components), button);

    $state-active_shadow: map-get($button, state-active_shadow);

    .mc-button-overlay {
        background: transparent;
    }

    .mc-button,
    .mc-icon-button {
        -webkit-font-smoothing: antialiased;

        &.mc-primary {
            @include mc-button-color(map-get($button, primary));
        }

        &.mc-second {
            @include mc-button-color(map-get($button, second));
        }

        &.mc-error {
            @include mc-button-color(map-get($button, error));
        }

        &:hover,
        &.mc-hover {
            & .mc-button-overlay {
                background: map-get($background, overlay-hovered);
            }
        }

        &:active,
        &.mc-active {
            box-shadow: $state-active_shadow;
        }

        &.mc-primary,
        &.mc-second,
        &.mc-error {
            &.cdk-keyboard-focused {
                $focused-color: map-get(map-get($theme, states), focused-color);

                border-color: $focused-color;
                box-shadow: inset 0 0 0 1px map-get($background, background), 0 0 0 1px $focused-color;
            }
        }

        &.mc-button_transparent {
            border-color: transparent;
            background-color: transparent;

            &:hover,
            &.mc-hover {
                & .mc-button-overlay {
                    background: map-get($background, overlay-hovered);
                }
            }

            &:active,
            &.mc-active {
                border-color: transparent;
                background-color: transparent;
                box-shadow: none;

                & .mc-button-overlay {
                    background: map-get($background, overlay-active);
                }
            }

            &.mc-disabled,
            &[disabled] {
                border-color: transparent;
            }
        }

        &.mc-disabled,
        &[disabled] {
            opacity: map-get(map-get($theme, states), disabled-opacity);
        }
    }
}

@mixin mc-button-typography($config) {
    .mc-button,
    .mc-icon-button {
        @include mc-typography-level-to-styles($config, body);

        &.mc-primary {
            @include mc-typography-level-to-styles($config, body-strong);
        }
    }

    .mc-icon-button.mc-button-wrapper {
        .mc-icon {
            line-height: mc-line-height($config, body);
        }
    }
}




// Width and height of input toggles
$mc-toggle-size: 16px !default;

$zindex-modal-mask      : 1000;
$zindex-modal           : 1000;
$zindex-notification    : 1010;
$zindex-message         : 1010;
$zindex-popover         : 1030;
$zindex-picker          : 1050;
$zindex-dropdown        : 1050;
$zindex-tooltip         : 1060;

// The default animation curves used by material design.
$mc-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;
$mc-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;
$mc-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;

$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;

$swift-ease-out-duration: 400ms !default;
$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;
$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;

$swift-ease-in-duration: 300ms !default;
$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;
$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;

$swift-ease-in-out-duration: 500ms !default;
$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;
$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;

$swift-linear-duration: 80ms !default;
$swift-linear-timing-function: linear !default;
$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;


@mixin mc-checkbox-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $checkbox: map-get(map-get($theme, components), checkbox);

    $border-color: map-get($checkbox, border-color);
    $state-checked_border-color: map-get($checkbox, state-checked_border-color);
    $state-checked_background: map-get($checkbox, state-checked_background);

    $state-focused_shadow: map-get($checkbox, state-focused_shadow);
    $state-focused_border-color: map-get($checkbox, state-focused_border-color);

    .mc-checkbox-frame {
        border-color: $border-color;

        & .mc-checkbox-checkmark,
        & .mc-checkbox-mixedmark {
            color: white;
        }
    }

    .mc-checkbox {
        color: map-get($foreground, text);

        &:hover {
            .mc-checkbox-frame {
                background: map-get($background, overlay-hovered);
            }
        }

        &.mc-checked,
        &.mc-indeterminate {
            .mc-checkbox-frame {
                border-color: $state-checked_border-color;

                background: $state-checked_background;
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            .mc-checkbox-frame {
                border-color: map-get($foreground, text-disabled);

                background-color: map-get($background, background-disabled);

                & .mc-checkbox-checkmark,
                & .mc-checkbox-mixedmark {
                    color: map-get($foreground, text-disabled);
                }
            }
        }

        & .mc-checkbox-input.cdk-keyboard-focused {
            + .mc-checkbox-frame {
                border-color: $state-focused_border-color;

                box-shadow: $state-focused_shadow;
            }
        }
    }
}

@mixin mc-checkbox-typography($config) {
    .mc-checkbox {
        @include mc-typography-level-to-styles($config, body);
    }
}







$mc-datepicker-selected-today-box-shadow-width: 1px;
$mc-datepicker-selected-fade-amount: 0.6;
$mc-datepicker-today-fade-amount: 0.2;

@mixin _mc-datepicker-color($color) {
    .mc-calendar__body-cell-content.mc-selected {
        background: $color;
    }

    .mc-calendar__body_disabled > .mc-selected {
        background-color: fade-out($color, $mc-datepicker-selected-fade-amount);
    }
}

@mixin mc-datepicker-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);

    $selected-color: map-get(map-get($theme, states), selected-color);

    .mc-calendar__table-header {
        color: mc-color($second, 400);
    }

    .mc-datepicker-toggle__button.mc-icon-button {
        border-color: transparent;
        border-radius: 0;
        background: transparent;
        opacity: 1;

        .mc-icon {
            color: map-get($foreground, icon);
        }
    }

    .mc-calendar__table-header-divider::after {
        background: mc-color($foreground, divider);
    }

    .mc-calendar__body-label {
        color: mc-color($foreground, text);
    }

    .mc-calendar__body-cell-content {
        color: mc-color($foreground, text);
        border-color: transparent;
    }

    .mc-calendar__body_disabled > .mc-calendar__body-cell-content:not(.mc-selected) {
        color: mc-color($foreground, text-disabled);
    }

    .cdk-keyboard-focused .mc-calendar__body_active,
    .cdk-program-focused .mc-calendar__body_active {
        & > .mc-calendar__body-cell-content {
            $focused-color: map-get(map-get($theme, states), focused-color);

            border-color: $focused-color;
            box-shadow: 0 0 0 1px $focused-color;
        }
    }

    .mc-calendar__body-cell:not(.mc-calendar__body_disabled):hover {
        & > .mc-calendar__body-cell-content:not(.mc-selected) {
            background-color: mc-color($second, A60);
        }
    }

    .mc-calendar__controls {
        .mc-button,
        .mc-icon-button {
            border-radius: 0;
            border-color: transparent;
            background-color: transparent;

            .mc-button-overlay {
                z-index: -1;
            }

            &:hover {
                background: mc-color($second, A60);
            }
        }
    }

    .mc-calendar__body-today {
        color: mc-color($primary);
    }

    .mc-calendar__body_disabled > .mc-calendar__body-today:not(.mc-selected) {
        border-color: fade-out(mc-color($foreground, text), $mc-datepicker-today-fade-amount);
    }

    @include _mc-datepicker-color($selected-color);

    .mc-datepicker__content {
        @include popup-params($theme);

        color: mc-color($foreground, text);
    }

    .mc-active {
        color: mc-color($primary);
    }
}

@mixin mc-datepicker-typography($config) {
    .mc-calendar {
        font-family: mc-font-family($config);
    }

    .mc-calendar__body {
        font-size: mc-font-size($config, body);
    }

    .mc-calendar__period-button {
        font: {
            size: mc-font-size($config, body);
            weight: mc-font-weight($config, body);
        }
    }

    .mc-calendar__body-label {
        font: {
            size: mc-font-size($config, body-strong);
            weight: mc-font-weight($config, body-strong);
        }
    }

    .mc-calendar__table-header th {
        font: {
            size: mc-font-size($config, caption);
            weight: mc-font-weight($config, body);
        }
        line-height: mc-font-size($config, caption);
    }

    .mc-calendar__body-today {
        font-weight: mc-font-weight($config, body-strong);
    }
}







@mixin mc-dropdown-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $selected-color: map-get(map-get($theme, states), selected-color);

    .mc-dropdown__panel {
        @include popup-params($theme);
    }

    .mc-dropdown__item {
        @include user-select(text);

        color: mc-color($foreground, text);

        background: transparent;

        &:hover {
            background: mc-color($background, overlay-hovered);
        }

        &.cdk-keyboard-focused {
            $focused-color: map-get(map-get($theme, states), focused-color);

            outline: $focused-color solid 2px;
            outline-offset: -2px;

            &.mc-link {
                outline-offset: -2px;
            }
        }

        &.mc-selected {
            background: $selected-color;
        }

        &[disabled],
        &.mc-disabled {
            color: mc-color($foreground, text-disabled);

            background: transparent;
        }

        .mc-dropdown__item-caption {
            color: mc-color($foreground, text-less-contrast);
        }
    }

    .mc-dropdown__item_highlighted:not([disabled]):not(.mc-disabled) {
        background: mc-color($background, overlay-hovered);
    }
}

@mixin mc-dropdown-typography($config) {
    .mc-dropdown__item,
    .mc-dropdown__content {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-dropdown__item-caption {
        @include mc-typography-level-to-styles($config, caption);
    }
}





@mixin mc-form-field-theme($theme) {
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-form-field {
        background-color: map-get($background, background);

        &:not(.mc-form-field_without-borders) {
            .mc-form-field__container {
                border-color: mc-color($second);
            }

            &:hover .mc-form-field__container {
                border-color: mc-color($second, if($is-dark, lighter, darker));
            }

            &.ng-invalid .mc-form-field__container {
                background-color: if($is-dark, transparent, mc-color($error, lighter));

                border-color: mc-color($error);

                .mc-input,
                .mc-textarea {
                    color: mc-color($error);
                }
            }

            &.mc-focused {
                &:not(.ng-invalid) .mc-form-field__container {
                    $focused-color: map-get(map-get($theme, states), focused-color);

                    border-color: $focused-color;
                    box-shadow: 0 0 0 1px $focused-color;
                }

                &.ng-invalid .mc-form-field__container {
                    box-shadow: 0 0 0 1px mc-color($error);
                }
            }

            /* stylelint-disable no-descending-specificity */
            &.mc-disabled .mc-form-field__container {
                border-color: mix(map-get($foreground, border), map-get($background, overlay-disabled));

                background-color:
                    mix(map-get($background, background-disabled), map-get($background, overlay-disabled));

                .mc-icon,
                .mc-input,
                .mc-textarea {
                    color: mc-color($foreground, text-disabled);
                }
            }
            /* stylelint-enable no-descending-specificity */
        }
    }

    .mc-form-field__hint {
        color: mc-color($foreground, text-less-contrast);
    }
}

@mixin mc-form-field-typography($config) {
    .mc-form-field {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-form-field__hint {
        @include mc-typography-level-to-styles($config, caption);
    }
}




@mixin mc-input-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-input {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-input-typography($config) {
    .mc-input {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-input.mc-input_monospace {
        @include mc-typography-level-to-styles($config, body-mono);
    }
}






@mixin mc-link-theme($theme) {
    $primary: map-get($theme, primary);
    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    $color: mc-color($primary);
    $color_hover: mc-color($primary, if($is-dark, lighter, darker));

    .mc-link {
        color: $color;

        text-decoration: none;

        cursor: pointer;

        &:focus {
            outline: none;
        }

        &:visited {
            color: $color;
        }

        &:hover {
            color: $color_hover;
        }

        &.cdk-keyboard-focused {
            $focused-color: map-get(map-get($theme, states), focused-color);

            outline: $focused-color solid 2px;
            outline-offset: 2px;
        }

        & .mc-link__icon {
            color: inherit;
        }

        & .mc-link__text:not(:first-child) {
            margin-left: 4px;
        }

        & .mc-link__text:not(:last-child) {
            margin-right: 4px;
        }

        &.mc-link_dashed .mc-link__text {
            border-bottom-style: dashed;
            border-bottom-width: 1px;
            border-bottom-color: rgba($color, 0.5);

            &:visited {
                border-bottom-color: rgba($color, 0.5);
            }

            &:hover {
                border-bottom-color: rgba($color_hover, 0.5);
            }
        }

        /* stylelint-disable no-descending-specificity */
        &.mc-link_underlined .mc-link__text {
            border-bottom-style: solid;
            border-bottom-width: 1px;
            border-bottom-color: rgba($color, 0.32);

            &:visited {
                border-bottom-color: rgba($color, 0.32);
            }

            &:hover {
                border-bottom-color: rgba($color_hover, 0.32);
            }
        }
        /* stylelint-enable no-descending-specificity */

        &[disabled] {
            $color_disabled: mc-color($foreground, text-disabled);

            color: $color_disabled;

            cursor: default;
            pointer-events: none;

            &.mc-link_underlined .mc-link__text {
                border-bottom-color: rgba($color_disabled, 0.64);
            }

            &.mc-link_dashed .mc-link__text {
                border-bottom-color: $color_disabled;
            }
        }
    }
}

@mixin mc-link-typography($config) {
    .mc-link {
        @include mc-typography-level-to-styles($config, body);
    }
}





// TODO: Its only for testing colors


// This mixin will ensure that lines that overflow the container will hide the overflow and
// truncate neatly with an ellipsis.
@mixin mc-truncate-line() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Mixin to provide all mc-line styles, changing secondary font size based on whether the list is in dense mode.
@mixin mc-line-base($secondary-font-size) {
    .mc-line {
        @include mc-truncate-line();

        display: block;
        box-sizing: border-box;

        // all lines but the top line should have smaller text
        &:nth-child(n + 2) {
            font-size: $secondary-font-size;
        }
    }
}

// This mixin normalizes default element styles, e.g. font weight for heading text.
@mixin mc-normalize-text() {
    & > * {
        margin: 0;
        padding: 0;
        font-weight: normal;
        font-size: inherit;
    }
}

// This mixin provides base styles for the wrapper around mc-line elements in a list.
@mixin mc-line-wrapper-base() {
    @include mc-normalize-text();

    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;

    // Must remove wrapper when lines are empty or it takes up horizontal
    // space and pushes other elements to the right.
    &:empty {
        display: none;
    }
}

.mc-no-select {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
}



@mixin mc-list-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $states: map-get($theme, states);
    $selected-color: map-get($states, selected-color);
    $focused-color: map-get($states, focused-color);

    .mc-list-item {
        color: mc-color($foreground, text);
    }

    .mc-list-option {
        outline: none;

        color: mc-color($foreground, text);

        &:hover {
            background: mc-color($background, overlay-hovered);
        }

        &.mc-focused {
            border-color: $focused-color;
        }

        &.mc-selected {
            background: $selected-color;
        }

        &.mc-disabled,
        &[disabled] {
            background: transparent;

            color: mc-color($foreground, text-disabled);
        }
    }
}

@mixin mc-list-typography($config) {
    .mc-list-item,
    .mc-list-option {
        @include mc-typography-level-to-styles($config, body);
    }
}







@mixin mc-modal-theme($theme) {
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);
    $is-dark: map-get($theme, is-dark);

    $popup-common: map-get(map-get($theme, components), popup-common);
    $footer_background-color: map-get($popup-common, footer_background-color);

    $modal: map-get(map-get($theme, components), modal);

    $divider-color: mc-color($popup-common, divider-color);

    .mc-modal {
        .mc-modal-content {
            // У модалки должен быть фон background. Чтобы поповеры и дропдауны было видно поверх модалки
            background-color: map-get($background, background);

            box-shadow: map-get($modal, shadow);
        }

        .mc-modal-title {
            color: map-get($foreground, text);
        }

        .mc-modal-header {
            border-bottom: 1px solid $divider-color;
        }

        .mc-modal-footer {
            border-top: 1px solid if($is-dark, $divider-color, transparent);
            background-color: $footer_background-color;
        }

        .mc-modal-close {
            border: 1px solid transparent;

            &:hover {
                .mc-button-overlay {
                    background: map-get($background, overlay-hovered);
                }

                .mc-icon {
                    color: inherit;
                }
            }
        }
    }

    .mc-modal-mask {
        background-color: map-get($modal, mask-background);
    }

    .mc-confirm {
        .mc-confirm-btns {
            border-top: 1px solid if($is-dark, $divider-color, transparent);
            background-color: $footer_background-color;
        }
    }
}

@mixin mc-modal-typography($config) {
    .mc-modal {
        .mc-modal-title {
            @include mc-typography-level-to-styles($config, title);
        }
    }

    .mc-modal-body {
        @include mc-typography-level-to-styles($config, body);
    }
}





@mixin mc-navbar-theme($theme) {
    $focused-color: map-get(map-get($theme, states), focused-color);

    $navbar: map-get(map-get($theme, components), navbar);

    .mc-navbar {
        background-color: map-get($navbar, background-color);

        .mc-navbar-title,
        .mc-icon {
            color: map-get($navbar, color);
        }
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            opacity: map-get($navbar, opacity);
        }
    }

    .mc-navbar-item {
        outline: 0;

        color: map-get($navbar, item_color);

        &:not([disabled]) {
            outline: 0;

            &.cdk-keyboard-focused {
                box-shadow: inset 0 0 0 2px $focused-color;
            }
        }

        &.mc-navbar-item-active {
            background-color: map-get($navbar, item_state-active_color);
        }

        &:hover:not([disabled]):not(.mc-progress) {
            background-color: map-get($navbar, item_state-hover_color);
        }

        &.mc-progress:hover:not([disabled]) {
            background-color: map-get($navbar, item_state-progress_color);
        }

        &[disabled] {
            .mc-navbar-title,
            .mc-icon {
                opacity: map-get($navbar, item_state-disabled_opacity);
            }
        }
    }
}

@mixin mc-navbar-typography($config) {
    .mc-navbar-title {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            @include mc-typography-level-to-styles($config, title);
        }
    }
}







@mixin mc-popover-theme($theme) {
    $foreground: map-get($theme, foreground);
    $is-dark: map-get($theme, is-dark);

    $popup-common: map-get(map-get($theme, components), popup-common);
    $popover: map-get(map-get($theme, components), popover);

    $background-color: map-get($popup-common, background);
    $footer_background-color: if($is-dark, $background-color, map-get($popup-common, footer_background-color));
    $border-color: map-get($popover, border-color);
    $divider-color: map-get($popup-common, divider-color);

    .mc-popover {
        border-color: $border-color;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    }

    .mc-popover__container {
        color: map-get($foreground, text);
        background-color: $background-color;
    }

    .mc-popover__header {
        border-bottom-color: $divider-color;
    }

    .mc-popover__header,
    .mc-popover__content {
        background-color: $background-color;
    }

    .mc-popover__footer {
        background-color: $footer_background-color;
        border-top-color: if($is-dark, $divider-color, transparent);
    }

    .mc-popover .mc-popover__arrow {
        border-color: $border-color;
    }

    .mc-popover_placement-top .mc-popover__arrow,
    .mc-popover_placement-top-left .mc-popover__arrow,
    .mc-popover_placement-top-right .mc-popover__arrow {
        background-color: $background-color;
        border-top-color: $background-color;
        border-left-color: $background-color;
    }

    .mc-popover_placement-top .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-top-left .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-top-right .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $footer_background-color;
        border-top-color: $footer_background-color;
        border-left-color: $footer_background-color;
    }

    .mc-popover_placement-right .mc-popover__arrow,
    .mc-popover_placement-right-top .mc-popover__arrow,
    .mc-popover_placement-right-bottom .mc-popover__arrow {
        background-color: $background-color;
        border-top-color: $background-color;
        border-right-color: $background-color;
    }

    .mc-popover_placement-right-bottom .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $footer_background-color;
        border-top-color: $footer_background-color;
        border-right-color: $footer_background-color;
    }

    .mc-popover_placement-left .mc-popover__arrow,
    .mc-popover_placement-left-top .mc-popover__arrow,
    .mc-popover_placement-left-bottom .mc-popover__arrow {
        background-color: $background-color;
        border-bottom-color: $background-color;
        border-left-color: $background-color;
    }

    .mc-popover_placement-left-bottom .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $footer_background-color;
        border-bottom-color: $footer_background-color;
        border-left-color: $footer_background-color;
    }

    .mc-popover_placement-bottom .mc-popover__arrow,
    .mc-popover_placement-bottom-left .mc-popover__arrow,
    .mc-popover_placement-bottom-right .mc-popover__arrow,
    .mc-popover_placement-bottom .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-bottom-left .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-bottom-right .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $background-color;
        border-right-color: $background-color;
        border-bottom-color: $background-color;
    }
}

@mixin mc-popover-typography($config) {
    .mc-popover__content,
    .mc-popover__footer {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-popover__header {
        @include mc-typography-level-to-styles($config, subheading);
    }
}






@mixin mc-radio-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $radio: map-get(map-get($theme, components), radio);

    $outer-circle_border-color: map-get($radio, outer-circle_border-color);
    $inner-circle_border-color: map-get($radio, inner-circle_border-color);

    $outer-circle_checked-state_border-color: map-get($radio, outer-circle_checked-state_border-color);
    $inner-circle_checked-state_border-color: map-get($radio, inner-circle_checked-state_border-color);

    $outer-circle_focused-state_border-color: map-get($radio, outer-circle_focused-state_border-color);
    $outer-circle_focused-state_shadow: map-get($radio, outer-circle_focused-state_shadow);
    $inner-circle_focused-state_shadow: map-get($radio, inner-circle_focused-state_shadow);

    .mc-radio-group {
        color: map-get($foreground, text);
    }

    .mc-radio-button {
        & .mc-radio-button__outer-circle {
            border-color: $outer-circle_border-color;
            background: map-get($background, background);
        }

        & .mc-radio-button__inner-circle {
            border-color: $inner-circle_border-color;
        }

        &:hover {
            & .mc-radio-button__outer-circle {
                background: map-get($background, overlay-hovered);
            }
        }

        &.mc-selected {
            & .mc-radio-button__outer-circle {
                border-color: $outer-circle_checked-state_border-color;
                background: white;
            }

            & .mc-radio-button__inner-circle {
                display: block;
                border-color: $inner-circle_checked-state_border-color;
            }
        }

        &.cdk-keyboard-focused {
            & .mc-radio-button__outer-circle {
                border-color: $outer-circle_focused-state_border-color;
                box-shadow: $outer-circle_focused-state_shadow;
            }

            & .mc-radio-button__inner-circle {
                box-shadow: $inner-circle_focused-state_shadow;
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            & .mc-radio-label {
                cursor: default;
            }

            & .mc-radio-button__outer-circle {
                border-color: map-get($foreground, border);
                background: map-get($background, background-disabled);
            }

            & .mc-radio-button__inner-circle {
                border-color: map-get($background, background-disabled);
                background: map-get($foreground, text-disabled);
            }
        }
    }
}

@mixin mc-radio-typography($config) {
    .mc-radio-group {
        @include mc-typography-level-to-styles($config, body);
    }
}







@mixin mc-select-theme($theme) {
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);

    $popup-common: map-get(map-get($theme, components), popup-common);

    .mc-select {
        color: map-get($foreground, text);

        &.ng-invalid {
            color: mc-color($error);
        }

        &.mc-disabled {
            color: mc-color($foreground, text-disabled);
        }
    }

    .mc-select__placeholder {
        color: map-get($foreground, text-disabled);
    }

    .mc-select__panel {
        @include popup-params($theme);
    }

    .mc-select__search-container {
        border-bottom-color: map-get($popup-common, border-color);
    }

    .mc-select__no-options-message {
        color: mc-color($foreground, text-less-contrast);
    }
}

@mixin mc-select-typography($config) {
    .mc-select,
    .mc-select__panel {
        @include mc-typography-level-to-styles($config, body);
    }
}





@mixin mc-sidepanel-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);
    $is-dark: map-get($theme, is-dark);

    $popup-common: map-get(map-get($theme, components), popup-common);

    $sidepanel: map-get(map-get($theme, components), sidepanel);

    $divider-color: mc-color($popup-common, divider-color);

    .mc-sidepanel-content {
        background-color: map-get($background, background);
    }

    .mc-sidepanel-container_shadowed {
        &.mc-sidepanel-container_right {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px map-get($sidepanel, border_color),
                    -6px 0 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_left {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px map-get($sidepanel, border_color),
                    6px 0 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_bottom {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px map-get($sidepanel, border_color),
                    0 -6px 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_top {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px map-get($sidepanel, border_color),
                    0 6px 12px 0 rgba(0, 0, 0, 0.24);
            }
        }
    }

    .mc-sidepanel-header {
        border-bottom: 1px solid $divider-color;
    }

    .mc-sidepanel-footer {
        border-top: 1px solid  if($is-dark, $divider-color, transparent);
        background-color: map-get($popup-common, footer_background-color);
    }
}

@mixin mc-sidepanel-typography($config) {
    .mc-sidepanel-container {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-sidepanel-title {
        @include mc-typography-level-to-styles($config, title);
    }
}

@mixin mc-tabs-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $focused-color: map-get(map-get($theme, states), focused-color);

    $tabs: map-get(map-get($theme, components), tabs);
    $border-color: map-get($tabs, border-color);
    $state-active_color: map-get($tabs, state-active_color);

    .mc-tab-label,
    .mc-tab-light-label,
    .mc-tab-link {
        color: mc-color($foreground, text);

        border-bottom-color: $border-color;

        & .mc-tab-overlay {
            background: transparent;
        }

        &:hover .mc-tab-overlay {
            background: mc-color($background, overlay-hovered);
        }

        &.cdk-keyboard-focused:after {
            border-color: $focused-color;
        }

        &.mc-disabled {
            color: mc-color($foreground, text-disabled);

            cursor: default;

            background: mc-color($background, background-disabled);

            & .mc-tab-overlay {
                background: mc-color($background, overlay-disabled);
            }
        }
    }

    .mc-tab-label {
        border: {
            top-color: transparent;
            bottom-color: $border-color;
        }

        &.mc-active {
            border: {
                color: $border-color;
                bottom-color: transparent;
            }

            & .mc-tab-overlay {
                background: transparent;
            }
        }
    }

    .mc-tab-light-label,
    .mc-tab-link {
        &:hover {
            border-bottom-color: transparent;

            &:before {
                background-color: $border-color;
            }
        }

        &.mc-active {
            &:before {
                background-color: $state-active_color;
            }

            & .mc-tab-overlay {
                background: transparent;
            }
        }

        &.mc-disabled {
            &:before {
                background-color: $border-color;
            }
        }
    }
}

@mixin mc-tabs-typography($config) {
    .mc-tab-label,
    .mc-tab-light-label,
    .mc-tab-link {
        @include mc-typography-level-to-styles($config, body);
    }
}






@mixin mc-tag-color($params) {
    background: map-get($params, background);
    border-color: map-get($params, border-color);

    &.mc-active,
    &.mc-focused {
        border-color: map-get($params, focused-state_color);
        box-shadow: 0 0 0 1px map-get($params, focused-state_color);
    }

    & .mc-icon {
        color: map-get($params, icon-color);

        &:hover {
            cursor: pointer;
            color: map-get($params, hovered-icon-color);
        }
    }

    &.mc-disabled {
        border-color: map-get($params, state-disable_background);
        background: map-get($params, state-disable_background);

        color: map-get($params, state-disable_color);

        & .mc-tag-overlay {
            background: transparent;
        }

        & .mc-icon {
            color: inherit;
        }
    }
}


@mixin mc-tag-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $tags: map-get(map-get($theme, components), tags);

    .mc-tag {
        color: mc-color($foreground, text);

        &.mc-primary {
            @include mc-tag-color(map-get($tags, primary));
        }

        &.mc-second {
            @include mc-tag-color(map-get($tags, second));
        }

        &.mc-error {
            @include mc-tag-color(map-get($tags, error));
        }

        &:hover,
        &.mc-hovered {
            & .mc-tag-overlay {
                background: mc-color($background, overlay-hovered);
            }
        }

        .mc-icon {
            color: map-get($foreground, icon);

            &:hover {
                cursor: pointer;
                color: inherit;
            }
        }

        &.mc-disabled {
            color: mc-color($foreground, text-disabled);

            border-color: transparent;

            background-color: map-get($background, background-disabled);

            & .mc-tag-overlay {
                background: mc-color($background, overlay-disabled);
            }

            & .mc-icon {
                color: map-get($foreground, icon);
                cursor: default;
            }
        }
    }

    .mc-tag-input {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-tag-typography($config) {
    .mc-tag:not(.mc-tag_mono):not(.mc-tag_caps) {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-tag_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-tag_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }

    .mc-tag-input {
        @include mc-typography-level-to-styles($config, body);
    }
}





@mixin mc-textarea-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-textarea {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-textarea-typography($config) {
    textarea.mc-textarea {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-textarea.mc-textarea_monospace {
        @include mc-typography-level-to-styles($config, body-mono);
    }
}





@mixin mc-toggle-theme($theme) {
    $primary: map-get($theme, primary);
    $error: map-get($theme, error);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $toggle: map-get(map-get($theme, components), toggle);

    $border-color: map-get($toggle, border-color);
    $background_color: map-get($toggle, background);
    $circle_border-color: map-get($toggle, circle_border-color);
    $circle_background: map-get($toggle, circle_background);

    $focused-state_color: map-get($toggle, focused-state_color);

    .mc-toggle {
        color: map-get($foreground, text);

        .mc-toggle-bar {
            border-color: $border-color;

            background: $background_color;
        }

        .mc-toggle__circle {
            border-color: $circle_border-color;

            background: $circle_background;
        }

        &:hover {
            & .mc-toggle__overlay {
                background: map-get($background, overlay-hovered);
            }
        }

        &.cdk-keyboard-focused {
            & .mc-toggle__overlay {
                box-shadow: $focused-state_color;
            }
        }

        &.mc-active {
            &.mc-primary {
                .mc-toggle-bar {
                    border-color: mc-color($primary);
                    background: mc-color($primary);
                }
            }

            &.mc-error {
                .mc-toggle-bar {
                    border-color: mc-color($error);
                    background: mc-color($error);
                }
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            & .mc-toggle__overlay {
                background: map-get($background, overlay-disabled);
            }
        }
    }
}


@mixin mc-toggle-typography($config) {
    .mc-toggle:not(.mc-toggle_small) {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-toggle.mc-toggle_small {
        @include mc-typography-level-to-styles($config, caption);
    }
}







@mixin mc-tooltip-theme($theme) {
    $tooltip: map-get(map-get($theme, components), tooltip);

    $shadow: map-get($tooltip, shadow);
    $background-color: map-get($tooltip, background-color);
    $color: map-get($tooltip, color);

    .mc-tooltip-inner {
        color: $color;

        box-shadow: $shadow;
        background-color: $background-color;
    }

    .mc-tooltip .mc-tooltip-arrow {
        background-color: $background-color;
    }

    .mc-tooltip.mc-tooltip_warning {
        $warning: map_get($theme, warning);

        $color: map-get($mc-grey, 700);
        $background-color: mc-color($warning, 60);
        $border-color: mc-color($warning, 200);

        .mc-tooltip-arrow {
            border: 1px solid transparent;

            background-color: $background-color;
        }

        .mc-tooltip-inner {
            box-shadow: $shadow;
            border: 1px solid $border-color;

            color: $color;

            background-color: $background-color;
        }

        &.mc-tooltip_placement-top .mc-tooltip-arrow {
            border-bottom-color: $border-color;
            border-right-color: $border-color;
        }

        &.mc-tooltip_placement-right .mc-tooltip-arrow {
            border-left-color: $border-color;
            border-bottom-color: $border-color;
        }

        &.mc-tooltip_placement-left .mc-tooltip-arrow {
            border-right-color: $border-color;
            border-top-color: $border-color;
        }

        &.mc-tooltip_placement-bottom .mc-tooltip-arrow {
            border-top-color: $border-color;
            border-left-color: $border-color;
        }
    }
}

@mixin mc-tooltip-typography($config) {
    .mc-tooltip {
        @include mc-typography-level-to-styles($config, caption);
    }
}







@mixin mc-tree-select-theme($theme) {
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);

    .mc-tree-select {
        color: map-get($foreground, text);

        &.ng-invalid {
            color: mc-color($error);
        }

        &.mc-disabled {
            color: mc-color($foreground, text-disabled);
        }
    }

    .mc-tree-select__placeholder {
        color: mc-color($foreground, text-disabled);
    }

    .mc-tree-select__panel {
        @include popup-params($theme);
    }
}

@mixin mc-tree-select-typography($config) {
    .mc-tree-select,
    .mc-tree-select__panel {
        @include mc-typography-level-to-styles($config, body);
    }
}






@mixin mc-tree-theme($theme) {
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $selected-color: map-get(map-get($theme, states), selected-color);
    $focused-color: map-get(map-get($theme, states), focused-color);

    .mc-tree-selection {
        &:focus {
            outline: none;
        }
    }

    .mc-tree-option {
        color: mc-color($foreground, text);

        &:hover {
            background-color: mc-color($background, overlay-hovered);
        }

        &.mc-focused {
            border-color: $focused-color;
        }

        &.mc-selected {
            background: $selected-color;
        }

        &[disabled] {
            background-color: transparent;

            color: mc-color($foreground, text-disabled);
        }
    }
}

@mixin mc-tree-typography($config) {
    .mc-tree-node,
    .mc-tree-option {
        @include mc-typography-level-to-styles($config, body);
    }
}




@mixin mc-vertical-navbar-theme($theme) {
    $focused-color: map-get(map-get($theme, states), focused-color);

    $navbar: map-get(map-get($theme, components), vertical-navbar);

    $color: map-get($navbar, color);
    $background-color: map-get($navbar, background-color);
    $toggle-button_color: map-get($navbar, toggle-button_color);

    $state-hover_background-color: map-get($navbar, state-hover_background-color);
    $state-active_background-color: map-get($navbar, state-active_background-color);
    $state-progress_background-color: map-get($navbar, state-progress_background-color);

    .mc-vertical-navbar {
        background-color: $background-color;

        :focus {
            outline: 0;
        }

        .cdk-keyboard-focused {
            outline: 2px solid $focused-color;
            outline-offset: -2px;
        }

        .mc-vertical-navbar__toggle-button {
            color: $toggle-button_color;
        }

        .mc-vertical-navbar__header,
        .mc-vertical-navbar__toggle-button {
            &:hover {
                background-color: $state-hover_background-color;
            }
        }

        .mc-vertical-navbar__title {
            color: $color;
        }

        .mc-vertical-navbar-item {
            color: $color;

            &.mc-vertical-navbar__item_active {
                background-color: $state-active_background-color;
            }

            &:hover:not([disabled]):not(.mc-progress) {
                background-color: $state-hover_background-color;
            }

            &.mc-progress:hover:not([disabled]) {
                background-color: $state-progress_background-color;
            }

            &[disabled] {
                .mc-vertical-navbar__title,
                .mc-icon {
                    opacity: map-get(map-get($theme, states), disabled-opacity);
                }
            }
        }
    }
}

@mixin mc-vertical-navbar-typography($config) {
    .mc-vertical-navbar__item {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-vertical-navbar__header {
        @include mc-typography-level-to-styles($config, title);
    }
}

@mixin mc-table-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-table {
        & > thead {
            color: mc-color($foreground, text-less-contrast);

            & > tr > th {
                border-color: mc-color($foreground, divider);
            }
        }

        & > tbody {
            & > tr {
                &:hover {
                    background-color: mc-color($background, overlay-hovered);
                }

                & > th,
                & > td {
                    color: mc-color($foreground, text);
                }
            }
        }

        &.mc-table_bordered {
            & > tbody > tr {
                & th,
                & td {
                    border-color: mc-color($foreground, divider);
                }
            }
        }
    }
}

@mixin mc-table-typography($config) {
    .mc-table {
        & > thead {
            & > tr > th {
                font-weight: normal;
            }

            @include mc-typography-level-to-styles($config, caption);
        }

        & > tbody {
            & > tr > th {
                font-weight: normal;
            }

            @include mc-typography-level-to-styles($config, body);
        }
    }
}







@mixin mc-option-theme($theme) {
    $primary: map-get($theme, primary);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $selected-color: map-get(map-get($theme, states), selected-color);

    .mc-option {
        color: mc-color($foreground, text);

        &:hover:not(.mc-disabled) {
            .mc-option-overlay {
                background: mc-color($background, overlay-hovered);
            }
        }

        &.mc-active {
            border-color: mc-color($primary);
        }

        &.mc-selected {
            background: $selected-color;
        }

        &.mc-disabled {
            background: transparent;

            color: mc-color($foreground, text-disabled);
        }
    }
}

@mixin mc-option-typography($config) {
    .mc-option {
        @include mc-typography-level-to-styles($config, body);
    }
}






@mixin mc-optgroup-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-optgroup-label {
        color: mc-color($foreground, text);
    }

    .mc-disabled .mc-optgroup-label {
        color: mc-color($foreground, text-disabled);
    }
}

@mixin mc-optgroup-typography($config) {
    .mc-optgroup-label {
        @include mc-typography-level-to-styles($config, subheading);
    }
}



@mixin mosaic-typography($config: null) {
    @if $config == null {
        $config: mc-typography-config();
    }

    @include mc-base-typography($config);

    @include mc-alert-typography($config);
    @include mc-autocomplete-typography($config);
    @include mc-badge-typography($config);
    @include mc-button-typography($config);
    @include mc-checkbox-typography($config);
    @include mc-datepicker-typography($config);
    @include mc-dropdown-typography($config);
    @include mc-form-field-typography($config);
    @include mc-input-typography($config);
    @include mc-link-typography($config);
    @include mc-list-typography($config);
    @include mc-modal-typography($config);
    @include mc-navbar-typography($config);
    @include mc-option-typography($config);
    @include mc-optgroup-typography($config);
    @include mc-popover-typography($config);
    @include mc-radio-typography($config);
    @include mc-select-typography($config);
    @include mc-sidepanel-typography($config);
    @include mc-tabs-typography($config);
    @include mc-tag-typography($config);
    @include mc-textarea-typography($config);
    @include mc-toggle-typography($config);
    @include mc-tooltip-typography($config);
    @include mc-tree-select-typography($config);
    @include mc-tree-typography($config);
    @include mc-vertical-navbar-typography($config);
    @include mc-table-typography($config);
}



// Mixin that renders all of the core styles that are not theme-dependent.
@mixin mc-core($typography-config: null) {
    @include mosaic-typography($typography-config);
    @include cdk-a11y();
    @include cdk-overlay();
}

// Mixin that renders all of the core styles that depend on the theme.
@mixin mc-core-theme($theme) {
    @include mc-pseudo-checkbox-theme($theme);

    .mc-app-background {
        $background: map-get($theme, background);
        $foreground: map-get($theme, foreground);

        background-color: mc-color($background, background);
        color: mc-color($foreground, text);
    }

    .mc-theme-loaded-marker {
        display: none;
    }
}









@mixin card-type($color, $second, $is-dark) {
    box-shadow:
        inset -1px 0 0 0 mc-color($second, if($is-dark, darker, lighter)),
        inset 0 1px 0 0 mc-color($second, if($is-dark, darker, lighter)),
        inset 0 -1px 0 0 mc-color($second, if($is-dark, darker, lighter));

    background-color: mc-color($color, if($is-dark, darker, lighter));

    border-left-color: mc-color($color);
}

@mixin mc-card-theme($theme) {
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $info: map-get($theme, info);
    $success: map-get($theme, success);
    $warning: map-get($theme, warning);

    $is-dark: map-get($theme, is-dark);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $selected-color: map-get(map-get($theme, states), selected-color);

    .mc-card {
        color: map-get($foreground, text);

        &.mc-card_info {
            @include card-type($info, $second, $is-dark);
        }

        &.mc-card_warning {
            @include card-type($warning, $second, $is-dark);
        }

        &.mc-card_success {
            @include card-type($success, $second, $is-dark);
        }

        &.mc-card_error {
            @include card-type($error, $second, $is-dark);
        }

        &.mc-card_white {
            $popup-common: map-get(map-get($theme, components), popup-common);

            background-color: map-get($popup-common, background);
        }

        &.mc-selected {
            background-color: $selected-color;
        }

        &:not(.mc-card_readonly):hover {
            .mc-card__overlay {
                background: map-get($background, overlay-hovered);
            }
        }

        &.cdk-keyboard-focused {
            $focused-color: map-get(map-get($theme, states), focused-color);

            box-shadow: 0 0 0 2px $focused-color;
        }
    }
}











@mixin mc-icon-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary-color: mc-color($primary, 400);
    $second-color: mc-color($second);
    $error-color: mc-color($error);

    // Дефолтные серые иконки default-icon: лупа в поле, иконки дропдаунов v, все иконки вне полей.
    .mc-icon:not(.mc-icon_light) {
        color: map-get($foreground, icon);

        &.mc-primary {
            color: mix(map-get($foreground, icon), $primary-color, 30%);

            &[disabled],
            &.mc-disabled {
                color: $primary-color;
            }
        }

        &.mc-second {
            color: map-get($foreground, text-less-contrast);

            &[disabled],
            &.mc-disabled {
                color: mc-color($second);
            }
        }

        &.mc-error {
            color: mix(map-get($foreground, icon), $error-color, 30%);

            &[disabled],
            &.mc-disabled {
                color: $error-color;
            }
        }

        &:not(.mc-primary):not(.mc-second):not(.mc-error) {
            &[disabled],
            &.mc-disabled {
                color: mc-color($second);

                cursor: default;
            }
        }
    }

    // Облегченные серые иконки less-contrast-icon нужны тогда, когда действие, которое они делают не дефолтное и
    // не самое важное. Не используются вне инпутов или селектов.
    .mc-icon.mc-icon_light {
        &.mc-primary {
            color: $primary-color;

            &:hover {
                color: mix(map-get($foreground, text), $primary-color);
            }
        }

        &.mc-second {
            color: $second-color;

            &:hover {
                color: mix(map-get($foreground, text), $second-color, 90%);
            }
        }

        &.mc-error {
            color: $error-color;

            &:hover {
                color: mix(map-get($foreground, text), $error-color);
            }
        }
    }
}

@mixin mc-icon-typography($config) {
    .mc-icon {
        font: {
            size:   mc-font-size($config, button);
            family: mc-font-family($config, button);
            weight: mc-font-weight($config, button);
        }
    }
}











@mixin mc-progress-bar-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $progress-bar: map-get(map-get($theme, components), progress-bar);

    .mc-progress-bar {
        background-color: map-get($progress-bar, background);

        &.mc-primary .mc-progress-bar__line {
            background-color: mc-color($primary);
        }

        &.mc-second .mc-progress-bar__line {
            background-color: mc-color($second);
        }

        &.mc-error .mc-progress-bar__line {
            background-color: mc-color($error);
        }
    }
}





@mixin mc-progress-spinner-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    .mc-progress-spinner {
        &.mc-primary .mc-progress-spinner__circle {
            stroke: mc-color($primary);
        }

        &.mc-second .mc-progress-spinner__circle {
            stroke: mc-color($second);
        }

        &.mc-error .mc-progress-spinner__circle {
            stroke: mc-color($error);
        }
    }
}





@mixin mc-splitter-theme($theme) {
    $background: map-get($theme, background);

    .mc-gutter {
        cursor: col-resize;

        &:hover,
        &.mc-gutter_dragged {
            background-color: mix(map-get($background, background-disabled), map-get($background, overlay-hovered));
        }

        &.mc-gutter_vertical {
            cursor: row-resize;
        }

        &[disabled] {
            background-color: mix(map-get($background, overlay-disabled), map-get($background, overlay-hovered));

            cursor: default;
        }
    }
}

.mc-table {
    border-spacing: 0;

    & > thead,
    & > tbody,
    & > tfoot {
        & > tr {
            & > th,
            & > td {
                padding: 8px 8px 7px;

                vertical-align: baseline;
                text-align: left;
            }

            & > th:first-child,
            & > td:first-child {
                padding-left: 16px;
            }

            & > th:last-child,
            & > td:last-child {
                padding-right: 16px;
            }
        }
    }

    /* stylelint-disable no-descending-specificity */
    & > thead {
        & > tr > th {
            padding-top: 8px;
            padding-bottom: 7px;

            border-bottom: 1px solid transparent;
        }
    }

    & > tbody > tr {
        & th,
        & td {
            border-bottom: 1px solid transparent;
        }
    }
    /* stylelint-enable no-descending-specificity */
}














@mixin mc-highlight-theme($theme) {
    .mc-highlight {
        color: inherit;

        font-weight: bold;
        background-color: transparent;
    }
}




@mixin mc-panel-theme($theme) {
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-panel {
        background-color: map-get($background, background);
        border: 1px solid map-get($mc-grey, if($is-dark, 700, 60));
    }
}



@mixin mosaic-theme($theme) {
    @include mc-core-theme($theme);

    @include mc-alert-theme($theme);
    @include mc-autocomplete-theme($theme);
    @include mc-badge-theme($theme);
    @include mc-button-theme($theme);
    @include mc-card-theme($theme);
    @include mc-checkbox-theme($theme);
    @include mc-datepicker-theme($theme);
    @include mc-dropdown-theme($theme);
    @include mc-form-field-theme($theme);
    @include mc-icon-theme($theme);
    @include mc-input-theme($theme);
    @include mc-link-theme($theme);
    @include mc-list-theme($theme);
    @include mc-modal-theme($theme);
    @include mc-navbar-theme($theme);
    @include mc-option-theme($theme);
    @include mc-optgroup-theme($theme);
    @include mc-panel-theme($theme);
    @include mc-popover-theme($theme);
    @include mc-progress-bar-theme($theme);
    @include mc-progress-spinner-theme($theme);
    @include mc-radio-theme($theme);
    @include mc-select-theme($theme);
    @include mc-sidepanel-theme($theme);
    @include mc-splitter-theme($theme);
    @include mc-tabs-theme($theme);
    @include mc-tag-theme($theme);
    @include mc-textarea-theme($theme);
    @include mc-toggle-theme($theme);
    @include mc-tooltip-theme($theme);
    @include mc-tree-select-theme($theme);
    @include mc-tree-theme($theme);
    @include mc-vertical-navbar-theme($theme);
    @include mc-highlight-theme($theme);
    @include mc-table-theme($theme);
}
