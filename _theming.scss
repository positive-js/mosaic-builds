// Import all the theming
@keyframes mc-progress {
    from {
        background-position: 0 0;
    }

    to {
        background-position: 29px 0;
    }
}

.mc-progress {
    position: relative;

    &:after {
        content: '';
        position: absolute;
        border-radius: inherit;

        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        $lighter: transparent;
        $darker: rgba(0, 0, 0, 0.05);
        background: linear-gradient(
            135deg,
            $darker 10px, $lighter 10px,
            $lighter 20px, $darker 20px,
            $darker 30px, $lighter 30px
        ) repeat;
        background-size: 29px 29px;
        animation: mc-progress 1s linear infinite;
    }
}

@mixin user-select($value) {
    -webkit-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

@mixin input-placeholder {
    &::placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin cursor-grab {
    cursor: -webkit-grab;
    cursor: grab;
}

@mixin cursor-grabbing {
    cursor: -webkit-grabbing;
    cursor: grabbing;
}



@mixin mc-button-reset {
    @include user-select(none);
    cursor: pointer;
    outline: none;
    border: none;
}


@mixin clearfix {
    zoom: 1;

    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}


// Do not edit directly
// Generated on Wed, 17 Mar 2021 07:43:45 GMT

$light-color-scheme-primary-default: #338FCC;
$light-color-scheme-second-default: #B3B3B3;
$light-color-scheme-error-default: #E76E5C;
$light-color-scheme-info-default: #AAD1EC;
$light-color-scheme-success-default: #B4DEA4;
$light-color-scheme-warning-default: #F0D49B;
$light-color-scheme-foreground-text: #4D4D4D;
$light-color-scheme-foreground-text-less-contrast: #999999;
$light-color-scheme-foreground-text-disabled: #B3B3B3;
$light-color-scheme-foreground-divider: #E6E6E6;
$light-color-scheme-foreground-border: #B3B3B3;
$light-color-scheme-foreground-icon: #999999;
$light-color-scheme-background-background: white;
$light-color-scheme-background-background-disabled: #F0F0F0;
$light-color-scheme-background-overlay-hover: rgba(black, 0.05);
$light-color-scheme-background-overlay-active: rgba(black, 0.1);
$light-color-scheme-background-overlay-disabled: rgba(white, 0.3);
$light-color-scheme-states-focused-color: #338FCC;
$light-color-scheme-states-selected-color: #D8EAF7;
$light-color-scheme-states-pressed-shadow: inset 0 1px 2px 0 rgba(black, 0.2);
$light-color-scheme-states-disabled-opacity: 0.3;
$dark-color-scheme-primary-default: #57A4D7;
$dark-color-scheme-second-default: #999999;
$dark-color-scheme-error-default: #E76E5C;
$dark-color-scheme-info-default: #57A4D7;
$dark-color-scheme-success-default: #6FBA53;
$dark-color-scheme-warning-default: #DFA739;
$dark-color-scheme-foreground-text: #F0F0F0;
$dark-color-scheme-foreground-text-less-contrast: #999999;
$dark-color-scheme-foreground-text-disabled: #999999;
$dark-color-scheme-foreground-divider: #666666;
$dark-color-scheme-foreground-border: #808080;
$dark-color-scheme-foreground-icon: #999999;
$dark-color-scheme-background-background: #333333;
$dark-color-scheme-background-background-disabled: #666666;
$dark-color-scheme-background-overlay-hover: rgba(black, 0.05);
$dark-color-scheme-background-overlay-active: rgba(black, 0.1);
$dark-color-scheme-background-overlay-disabled: rgba(white, 0.2);
$dark-color-scheme-states-focused-color: #57A4D7;
$dark-color-scheme-states-selected-color: #114E77;
$dark-color-scheme-states-pressed-shadow: inset 1px 2px 2px 0 rgba(black, 0.2);
$dark-color-scheme-states-disabled-opacity: 0.3;
$font-family-base: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
$font-family-monospace: 'Roboto Mono', 'Consolas', 'Menlo', 'Monaco', monospace;
$palette-blue-40: #F5FAFD;
$palette-blue-60: #EBF4FB;
$palette-blue-100: #D8EAF7;
$palette-blue-200: #AAD1EC;
$palette-blue-300: #7FBAE1;
$palette-blue-400: #57A4D7;
$palette-blue-500: #338FCC;
$palette-blue-560: #277BB3;
$palette-blue-600: #206EA2;
$palette-blue-700: #114E77;
$palette-blue-800: #07314D;
$palette-blue-a-100: rgba(0, 153, 255, 0.15);
$palette-blue-a-200: rgba(0, 153, 255, 0.3);
$palette-blue-contrast-40: #4D4D4D;
$palette-blue-contrast-60: #4D4D4D;
$palette-blue-contrast-100: #4D4D4D;
$palette-blue-contrast-200: #4D4D4D;
$palette-blue-contrast-300: #4D4D4D;
$palette-blue-contrast-400: white;
$palette-blue-contrast-500: white;
$palette-blue-contrast-560: white;
$palette-blue-contrast-600: white;
$palette-blue-contrast-700: white;
$palette-blue-contrast-800: white;
$palette-blue-contrast-a-100: #4D4D4D;
$palette-blue-contrast-a-200: white;
$palette-green-40: #F6FBF4;
$palette-green-60: #EDF8E9;
$palette-green-100: #DCF1D4;
$palette-green-200: #B4DEA4;
$palette-green-300: #8FCC79;
$palette-green-400: #6FBA53;
$palette-green-500: #52A832;
$palette-green-560: #449327;
$palette-green-600: #3B8520;
$palette-green-700: #276211;
$palette-green-800: #163F07;
$palette-green-a-100: rgba(68, 255, 0, 0.15);
$palette-green-contrast-40: #4D4D4D;
$palette-green-contrast-60: #4D4D4D;
$palette-green-contrast-100: #4D4D4D;
$palette-green-contrast-200: #4D4D4D;
$palette-green-contrast-300: #4D4D4D;
$palette-green-contrast-400: white;
$palette-green-contrast-500: white;
$palette-green-contrast-560: white;
$palette-green-contrast-600: white;
$palette-green-contrast-700: white;
$palette-green-contrast-800: white;
$palette-green-contrast-a-100: #4D4D4D;
$palette-red-40: #FEF7F6;
$palette-red-60: #FCEFEC;
$palette-red-100: #FADEDA;
$palette-red-200: #F4B7AE;
$palette-red-300: #ED9284;
$palette-red-400: #E76E5C;
$palette-red-500: #E04D36;
$palette-red-560: #C43E29;
$palette-red-600: #B23522;
$palette-red-700: #832112;
$palette-red-800: #541208;
$palette-red-a-100: rgba(224, 79, 56, 0.15);
$palette-red-contrast-40: #4D4D4D;
$palette-red-contrast-60: #4D4D4D;
$palette-red-contrast-100: #4D4D4D;
$palette-red-contrast-200: #4D4D4D;
$palette-red-contrast-300: #4D4D4D;
$palette-red-contrast-400: white;
$palette-red-contrast-500: white;
$palette-red-contrast-560: white;
$palette-red-contrast-600: white;
$palette-red-contrast-700: white;
$palette-red-contrast-800: white;
$palette-red-contrast-a-100: #4D4D4D;
$palette-grey-40: #F5F5F5;
$palette-grey-60: #F0F0F0;
$palette-grey-100: #E6E6E6;
$palette-grey-200: #CCCCCC;
$palette-grey-300: #B3B3B3;
$palette-grey-400: #999999;
$palette-grey-500: #808080;
$palette-grey-560: #707070;
$palette-grey-600: #666666;
$palette-grey-700: #4D4D4D;
$palette-grey-800: #333333;
$palette-grey-a-40: rgba(0, 0, 0, 0.04);
$palette-grey-a-60: rgba(0, 0, 0, 0.06);
$palette-grey-a-100: rgba(0, 0, 0, 0.1);
$palette-grey-a-200: rgba(0, 0, 0, 0.2);
$palette-grey-a-300: rgba(0, 0, 0, 0.3);
$palette-grey-a-500: rgba(0, 0, 0, 0.5);
$palette-grey-contrast-40: #4D4D4D;
$palette-grey-contrast-60: #4D4D4D;
$palette-grey-contrast-100: #4D4D4D;
$palette-grey-contrast-200: #4D4D4D;
$palette-grey-contrast-300: #4D4D4D;
$palette-grey-contrast-400: white;
$palette-grey-contrast-500: white;
$palette-grey-contrast-560: white;
$palette-grey-contrast-600: white;
$palette-grey-contrast-700: white;
$palette-grey-contrast-800: white;
$palette-yellow-40: #FDFAF3;
$palette-yellow-60: #FCF5E8;
$palette-yellow-100: #F8EBD1;
$palette-yellow-200: #F0D49B;
$palette-yellow-300: #E7BD68;
$palette-yellow-400: #DFA739;
$palette-yellow-500: #D6930D;
$palette-yellow-560: #BB800A;
$palette-yellow-600: #AA7408;
$palette-yellow-700: #7D5504;
$palette-yellow-800: #503602;
$palette-yellow-a-100: rgba(255, 170, 0, 0.15);
$palette-yellow-contrast-40: #4D4D4D;
$palette-yellow-contrast-60: #4D4D4D;
$palette-yellow-contrast-100: #4D4D4D;
$palette-yellow-contrast-200: #4D4D4D;
$palette-yellow-contrast-300: #4D4D4D;
$palette-yellow-contrast-400: white;
$palette-yellow-contrast-500: white;
$palette-yellow-contrast-560: white;
$palette-yellow-contrast-600: white;
$palette-yellow-contrast-700: white;
$palette-yellow-contrast-800: white;
$palette-yellow-contrast-a-100: #4D4D4D;
$alert-light-color-scheme-error-background: #FCEFEC;
$alert-light-color-scheme-error-border: #E76E5C;
$alert-light-color-scheme-error-icon: #E76E5C;
$alert-light-color-scheme-warning-background: #FCF5E8;
$alert-light-color-scheme-warning-border: #F0D49B;
$alert-light-color-scheme-warning-icon: #F0D49B;
$alert-light-color-scheme-success-background: #EDF8E9;
$alert-light-color-scheme-success-border: #B4DEA4;
$alert-light-color-scheme-success-icon: #B4DEA4;
$alert-light-color-scheme-info-background: #EBF4FB;
$alert-light-color-scheme-info-border: #AAD1EC;
$alert-light-color-scheme-info-icon: #AAD1EC;
$alert-light-color-scheme-default-background: #F0F0F0;
$alert-light-color-scheme-default-border: #B3B3B3;
$alert-light-color-scheme-default-icon: #CCCCCC;
$alert-dark-color-scheme-error-background: #832112;
$alert-dark-color-scheme-error-border: #832112;
$alert-dark-color-scheme-error-icon: #E76E5C;
$alert-dark-color-scheme-warning-background: #7D5504;
$alert-dark-color-scheme-warning-border: #7D5504;
$alert-dark-color-scheme-warning-icon: #DFA739;
$alert-dark-color-scheme-success-background: #276211;
$alert-dark-color-scheme-success-border: #276211;
$alert-dark-color-scheme-success-icon: #6FBA53;
$alert-dark-color-scheme-info-background: #114E77;
$alert-dark-color-scheme-info-border: #114E77;
$alert-dark-color-scheme-info-icon: #57A4D7;
$alert-dark-color-scheme-default-background: #4D4D4D;
$alert-dark-color-scheme-default-border: #4D4D4D;
$alert-dark-color-scheme-default-icon: #999999;
$alert-size-border-width: 1px;
$alert-size-border-radius: 4px;
$alert-size-horizontal-padding: 16px;
$alert-size-vertical-padding: 13px;
$alert-size-icon-margin: 8px;
$alert-size-close-button-width: 16px;
$alert-size-small-vertical-padding: 11px;
$alert-font-default-header: subheading;
$alert-font-default-body: body;
$alert-font-small-header: caption;
$alert-font-small-body: caption;
$autocomplete-size-panel-padding: 4px 0;
$autocomplete-size-panel-max-height: 256px;
$autocomplete-size-panel-border-radius: 3px;
$badge-size-min-width: 10px;
$badge-size-padding: 4px 8px;
$badge-size-border-width: 1px;
$badge-size-border-radius: 4px;
$badge-font-default: body;
$badge-font-caps: caption;
$button-toggle-size-border-size: 1px;
$button-toggle-size-border-radius: 3px;
$button-light-color-scheme-active-shadow: inset 0 1px 2px 0 rgba(black, 0.2);
$button-light-color-scheme-primary-color: white;
$button-light-color-scheme-primary-border: #277BB3;
$button-light-color-scheme-primary-background: #338FCC;
$button-light-color-scheme-primary-icon: white;
$button-light-color-scheme-primary-states-active-border: darken(#277BB3, 5);
$button-light-color-scheme-primary-states-active-background: darken(#338FCC, 5);
$button-light-color-scheme-second-border: #B3B3B3;
$button-light-color-scheme-second-background: #F0F0F0;
$button-light-color-scheme-second-color: #4D4D4D;
$button-light-color-scheme-second-icon: #999999;
$button-light-color-scheme-second-states-active-border: darken(#B3B3B3, 5);
$button-light-color-scheme-second-states-active-background: darken(#F0F0F0, 5);
$button-light-color-scheme-error-border: #B3B3B3;
$button-light-color-scheme-error-background: #F0F0F0;
$button-light-color-scheme-error-color: #E76E5C;
$button-light-color-scheme-error-icon: #E76E5C;
$button-light-color-scheme-error-states-active-border: darken(#B3B3B3, 5);
$button-light-color-scheme-error-states-active-background: darken(#F0F0F0, 5);
$button-dark-color-scheme-active-shadow: inset 1px 2px 2px 0 rgba(black, 0.2);
$button-dark-color-scheme-primary-color: white;
$button-dark-color-scheme-primary-border: #277BB3;
$button-dark-color-scheme-primary-background: #338FCC;
$button-dark-color-scheme-primary-icon: white;
$button-dark-color-scheme-primary-states-active-border: darken(#277BB3, 5);
$button-dark-color-scheme-primary-states-active-background: darken(#57A4D7, 5);
$button-dark-color-scheme-second-border: #808080;
$button-dark-color-scheme-second-background: #666666;
$button-dark-color-scheme-second-color: #F0F0F0;
$button-dark-color-scheme-second-icon: #999999;
$button-dark-color-scheme-second-states-active-border: darken(#808080, 5);
$button-dark-color-scheme-second-states-active-background: darken(#666666, 5);
$button-dark-color-scheme-error-border: #808080;
$button-dark-color-scheme-error-background: #666666;
$button-dark-color-scheme-error-color: #E76E5C;
$button-dark-color-scheme-error-icon: #E76E5C;
$button-dark-color-scheme-error-states-active-border: darken(#808080, 5);
$button-dark-color-scheme-error-states-active-background: darken(#666666, 5);
$button-size-border-width: 1px;
$button-size-border-radius: 3px;
$button-size-vertical-padding: 6px;
$button-size-horizontal-padding: 16px;
$button-font-default: body;
$button-font-primary: body-strong;
$icon-button-size-vertical-padding: 6px;
$icon-button-size-horizontal-padding: 8px;
$icon-button-size-icon-horizontal-padding: 16px;
$card-light-color-scheme-error-vertical-line: #E76E5C;
$card-light-color-scheme-error-background: #FCEFEC;
$card-light-color-scheme-error-shadow: #E6E6E6;
$card-light-color-scheme-warning-vertical-line: #F0D49B;
$card-light-color-scheme-warning-background: #FCF5E8;
$card-light-color-scheme-warning-shadow: #E6E6E6;
$card-light-color-scheme-success-vertical-line: #B4DEA4;
$card-light-color-scheme-success-background: #EDF8E9;
$card-light-color-scheme-success-shadow: #E6E6E6;
$card-light-color-scheme-info-vertical-line: #AAD1EC;
$card-light-color-scheme-info-background: #EBF4FB;
$card-light-color-scheme-info-shadow: #E6E6E6;
$card-dark-color-scheme-error-vertical-line: #E76E5C;
$card-dark-color-scheme-error-background: #832112;
$card-dark-color-scheme-error-shadow: #4D4D4D;
$card-dark-color-scheme-warning-vertical-line: #DFA739;
$card-dark-color-scheme-warning-background: #7D5504;
$card-dark-color-scheme-warning-shadow: #4D4D4D;
$card-dark-color-scheme-success-vertical-line: #6FBA53;
$card-dark-color-scheme-success-background: #276211;
$card-dark-color-scheme-success-shadow: #4D4D4D;
$card-dark-color-scheme-info-vertical-line: #57A4D7;
$card-dark-color-scheme-info-background: #114E77;
$card-dark-color-scheme-info-shadow: #4D4D4D;
$card-size-vertical-line: 4px;
$checkbox-light-color-scheme-border: #B3B3B3;
$checkbox-light-color-scheme-states-checked-border: #206EA2;
$checkbox-light-color-scheme-states-checked-background: #338FCC;
$checkbox-light-color-scheme-states-focused-border: #206EA2;
$checkbox-light-color-scheme-states-focused-shadow: inset 0 0 0 1px white, 0 0 0 1px #206EA2;
$checkbox-dark-color-scheme-border: #999999;
$checkbox-dark-color-scheme-states-checked-border: #57A4D7;
$checkbox-dark-color-scheme-states-checked-background: #206EA2;
$checkbox-dark-color-scheme-states-focused-border: #57A4D7;
$checkbox-dark-color-scheme-states-focused-shadow: inset 0 0 0 1px #333333, 0 0 0 1px #57A4D7;
$checkbox-size-width: 16px;
$checkbox-size-label-margin: 8px;
$checkbox-size-border-width: 1px;
$checkbox-size-toggle-box-shadow: inset 0 0 1px 0 rgba(0, 0, 0, 0.2);
$checkbox-font-default: body;
$datepicker-toggle-size-width: 30px;
$datepicker-toggle-size-height: 30px;
$datepicker-body-size-label-padding-side: 33% / 7;
$datepicker-body-size-cell-min-size: 32px;
$datepicker-body-size-cell-margin: 5%;
$datepicker-body-size-cell-padding: 8px;
$datepicker-body-size-cell-border-width: 1px;
$datepicker-body-font-label: body-strong;
$datepicker-body-font-today: body-strong;
$datepicker-calendar-size-padding: 8px;
$datepicker-calendar-size-divider-width: 1px;
$datepicker-calendar-size-icon-border-width: 2px;
$datepicker-calendar-size-icon-prev-icon-transform: translateX(2px) rotate(-45deg);
$datepicker-calendar-size-icon-nex-icon-transform: translateX(-2px) rotate(45deg);
$datepicker-calendar-font-default: body;
$datepicker-calendar-font-header: caption;
$divider-size-width: 1px;
$divider-size-inset-margin: 80px;
$dropdown-item-size-padding: 5px 15px;
$dropdown-item-font-default: body;
$dropdown-item-font-caption: caption;
$dropdown-trigger-size-padding-left: 16px;
$dropdown-panel-size-padding: 4px 0;
$dropdown-panel-size-border-width: 1px;
$dropdown-panel-size-border-radius: 3px;
$form-field-light-color-scheme-border: #B3B3B3;
$form-field-light-color-scheme-background: white;
$form-field-light-color-scheme-states-hover-border: #999999;
$form-field-light-color-scheme-states-invalid-border: #E76E5C;
$form-field-light-color-scheme-states-invalid-background: transparent;
$form-field-dark-color-scheme-border: #999999;
$form-field-dark-color-scheme-background: #333333;
$form-field-dark-color-scheme-states-hover-border: #CCCCCC;
$form-field-dark-color-scheme-states-invalid-border: #E76E5C;
$form-field-dark-color-scheme-states-invalid-background: transparent;
$form-field-size-border-width: 1px;
$form-field-size-border-radius: 3px;
$form-field-size-button-width: 32px;
$form-field-font-default: body;
$form-field-hint-size-margin-top: 4px;
$form-field-hint-font-default: caption;
$input-size-padding: 5px 16px;
$input-size-width: 100%;
$input-size-min-height: 30px;
$input-font-default: body;
$input-font-monospace: body-mono;
$link-light-color-scheme-text: #338FCC;
$link-light-color-scheme-state-hover-text: #206EA2;
$link-light-color-scheme-state-focused-outline: #338FCC;
$link-light-color-scheme-dashed-border-bottom: rgba(#338FCC, 0.5);
$link-light-color-scheme-dashed-state-hover-border-bottom: rgba(#206EA2, 0.5);
$link-light-color-scheme-underlined-border-bottom: rgba(#338FCC, 0.32);
$link-light-color-scheme-underlined-state-hover-border-bottom: rgba(#206EA2, 0.32);
$link-dark-color-scheme-text: #338FCC;
$link-dark-color-scheme-state-hover-text: #7FBAE1;
$link-dark-color-scheme-state-focused-outline: #57A4D7;
$link-dark-color-scheme-dashed-border-bottom: rgba(#338FCC, 0.5);
$link-dark-color-scheme-dashed-state-hover-border-bottom: rgba(#7FBAE1, 0.5);
$link-dark-color-scheme-underlined-border-bottom: rgba(#338FCC, 0.32);
$link-dark-color-scheme-underlined-state-hover-border-bottom: rgba(#7FBAE1, 0.32);
$link-size-icon-margin: 4px;
$link-font-default: body;
$list-size-horizontal-padding: 16px;
$list-size-icon-padding: 4px;
$list-size-item-height: 28px;
$list-size-two-line-height: 72px;
$list-size-three-line-height: 88px;
$list-size-multi-line-padding: 16px;
$list-size-icon-width: 24px;
$list-font-item: body;
$modal-light-color-scheme-shadow: (0 0 0 1px #B3B3B3, 0 6px 12px 0 rgba(0, 0, 0, 0.5));
$modal-light-color-scheme-background-mask: rgba(0, 0, 0, 0.5);
$modal-dark-color-scheme-shadow: (0 0 0 1px #333333, 0 6px 12px 0 rgba(0, 0, 0, 0.5));
$modal-dark-color-scheme-background-mask: rgba(0, 0, 0, 0.5);
$modal-size-top: 48px;
$modal-size-padding: 0 0 24px;
$modal-size-close-width: 56px;
$modal-size-border-radius: 4px;
$modal-size-border-width: 1px;
$modal-header-size-border-radius: 4px 4px 0 0;
$modal-header-size-padding: 14px 16px;
$modal-header-font-default: title;
$modal-body-size-max-height: calc(100vh - 260px);
$modal-body-size-padding: 16px 24px 24px;
$modal-body-font-default: body;
$modal-footer-size-border-radius: 0 0 4px 4px;
$modal-footer-size-padding: 16px 16px;
$modal-confirm-size-padding: 24px;
$navbar-light-color-scheme-background: #114E77;
$navbar-light-color-scheme-text: #D8EAF7;
$navbar-light-color-scheme-opacity: 0.5;
$navbar-dark-color-scheme-background: #114E77;
$navbar-dark-color-scheme-text: #D8EAF7;
$navbar-dark-color-scheme-opacity: 0.5;
$navbar-size-height: 48px;
$navbar-size-icon-margin: 8px;
$navbar-font-title: body;
$navbar-item-light-color-scheme-text: #D8EAF7;
$navbar-item-light-color-scheme-states-active: lighten(#206EA2, 5%);
$navbar-item-light-color-scheme-states-hover: lighten(#206EA2, 5%);
$navbar-item-light-color-scheme-states-progress: lighten(#07314D, 5%);
$navbar-item-light-color-scheme-states-disabled-opacity: 0.3;
$navbar-item-dark-color-scheme-text: #D8EAF7;
$navbar-item-dark-color-scheme-states-active: lighten(#114E77, 5%);
$navbar-item-dark-color-scheme-states-hover: lighten(#114E77, 5%);
$navbar-item-dark-color-scheme-states-progress: lighten(#07314D, 15%);
$navbar-item-dark-color-scheme-states-disabled-opacity: 0.3;
$navbar-item-size-padding: 16px;
$navbar-brand-size-padding: 12px;
$navbar-brand-size-margin-right: 24px;
$navbar-brand-font-title: title;
$optgroup-size-padding-left: 17px;
$optgroup-font-default: subheading;
$option-size-horizontal-padding: 16px;
$option-size-height: 32px;
$option-size-border-width: 2px;
$option-font-default: body;
$popover-light-color-scheme-border: #B3B3B3;
$popover-dark-color-scheme-border: #4D4D4D;
$popover-size-padding: 16px;
$popover-size-border-width: 1px;
$popover-size-border-radius: 4px;
$popover-size-arrow-width: 4px;
$popover-size-small-width: 200px;
$popover-size-normal-width: 400px;
$popover-size-large-width: 640px;
$popover-font-default: body;
$popover-header-size-padding: 10px 16px;
$popover-header-font-default: subheading;
$popover-footer-size-padding: 12px 16px;
$popover-footer-size-margin-top: 8px;
$popover-footer-font-default: body;
$popup-light-color-scheme-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);
$popup-light-color-scheme-border: #B3B3B3;
$popup-light-color-scheme-divider: #CCCCCC;
$popup-light-color-scheme-background: white;
$popup-light-color-scheme-footer-background: #F0F0F0;
$popup-dark-color-scheme-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);
$popup-dark-color-scheme-border: #999999;
$popup-dark-color-scheme-divider: #666666;
$popup-dark-color-scheme-background: #4D4D4D;
$popup-dark-color-scheme-footer-background: transparent;
$progress-bar-light-color-scheme-background: #F0F0F0;
$progress-bar-dark-color-scheme-background: #666666;
$progress-bar-size-height: 4px;
$progress-spinner-size-size: 16px;
$radio-light-color-scheme-outer-circle-border: #B3B3B3;
$radio-light-color-scheme-inner-circle-border: transparent;
$radio-light-color-scheme-states-checked-outer-circle-border: #338FCC;
$radio-light-color-scheme-states-checked-inner-circle-border: #338FCC;
$radio-light-color-scheme-states-focused-outer-circle-border: #338FCC;
$radio-light-color-scheme-states-focused-outer-circle-shadow: 0 0 0 2px #B3B3B3;
$radio-light-color-scheme-states-focused-inner-circle-shadow: 0 0 0 1px white;
$radio-dark-color-scheme-outer-circle-border: #999999;
$radio-dark-color-scheme-inner-circle-border: transparent;
$radio-dark-color-scheme-states-checked-outer-circle-border: #57A4D7;
$radio-dark-color-scheme-states-checked-inner-circle-border: #206EA2;
$radio-dark-color-scheme-states-focused-outer-circle-border: #57A4D7;
$radio-dark-color-scheme-states-focused-outer-circle-shadow: 0 0 0 2px #57A4D7;
$radio-dark-color-scheme-states-focused-inner-circle-shadow: 0 0 0 1px #333333;
$radio-size-size: 14px;
$radio-size-label-margin: 8px;
$radio-font-default: body;
$select-size-height: 30px;
$select-size-left-padding: 16px;
$select-size-right-padding: 8px;
$select-size-left-padding-multiple: 8px;
$select-font-default: body;
$select-panel-size-max-height: 232px;
$select-panel-size-max-width: 640px;
$select-panel-size-vertical-padding: 4px;
$select-panel-size-border-width: 1px;
$select-panel-size-border-radius: 3px;
$select-panel-font-default: body;
$sidepanel-light-color-scheme-border: #B3B3B3;
$sidepanel-dark-color-scheme-border: #333333;
$sidepanel-font-default: body;
$sidepanel-header-size-padding: 14px 16px;
$sidepanel-header-size-close-padding: 0 0 0 8px;
$sidepanel-header-font-default: title;
$sidepanel-footer-size-padding: 16px;
$sidepanel-footer-font-default: body;
$table-size-border-width: 1px;
$table-size-row-padding-vertical: 8px;
$table-size-row-padding-horizontal: 16px;
$table-font-header: caption;
$table-font-body: body;
$tabs-light-color-scheme-border: #B3B3B3;
$tabs-light-color-scheme-state-active: #338FCC;
$tabs-dark-color-scheme-border: #B3B3B3;
$tabs-dark-color-scheme-state-active: #57A4D7;
$tabs-size-height: 40px;
$tabs-size-highlight-height: 4px;
$tabs-size-padding-horizontal: 16px;
$tabs-size-border-width: 1px;
$tabs-size-border-radius: 3px;
$tabs-font-default: body;
$tags-light-color-scheme-primary-background: #D8EAF7;
$tags-light-color-scheme-primary-border: #D8EAF7;
$tags-light-color-scheme-primary-icon: mix(#57A4D7, rgba(black, 0.05));
$tags-light-color-scheme-primary-states-hover-icon: #206EA2;
$tags-light-color-scheme-primary-states-focused: #338FCC;
$tags-light-color-scheme-primary-states-disabled-text: mix(#338FCC, transparent, 50%);
$tags-light-color-scheme-primary-states-disabled-background: mix(#338FCC, transparent, 10%);
$tags-light-color-scheme-second-background: #E6E6E6;
$tags-light-color-scheme-second-border: #E6E6E6;
$tags-light-color-scheme-second-icon: mix(#999999, rgba(black, 0.05));
$tags-light-color-scheme-second-states-hover-icon: #999999;
$tags-light-color-scheme-second-states-focused: #338FCC;
$tags-light-color-scheme-second-states-disabled-text: mix(#B3B3B3, transparent, 50%);
$tags-light-color-scheme-second-states-disabled-background: mix(#B3B3B3, transparent, 10%);
$tags-light-color-scheme-error-background: #FADEDA;
$tags-light-color-scheme-error-border: #FADEDA;
$tags-light-color-scheme-error-icon: mix(#E76E5C, rgba(black, 0.05));
$tags-light-color-scheme-error-states-hover-icon: #E04D36;
$tags-light-color-scheme-error-states-focused: #E76E5C;
$tags-light-color-scheme-error-states-disabled-text: mix(#E76E5C, transparent, 50%);
$tags-light-color-scheme-error-states-disabled-background: mix(#E76E5C, transparent, 10%);
$tags-dark-color-scheme-primary-background: #114E77;
$tags-dark-color-scheme-primary-border: #114E77;
$tags-dark-color-scheme-primary-icon: mix(#57A4D7, rgba(black, 0.05));
$tags-dark-color-scheme-primary-states-hover-icon: #338FCC;
$tags-dark-color-scheme-primary-states-focused: #57A4D7;
$tags-dark-color-scheme-primary-states-disabled-text: mix(#57A4D7, transparent, 50%);
$tags-dark-color-scheme-primary-states-disabled-background: mix(#57A4D7, transparent, 10%);
$tags-dark-color-scheme-second-background: #4D4D4D;
$tags-dark-color-scheme-second-border: #4D4D4D;
$tags-dark-color-scheme-second-icon: mix(#999999, rgba(black, 0.05));
$tags-dark-color-scheme-second-states-hover-icon: #E6E6E6;
$tags-dark-color-scheme-second-states-focused: #57A4D7;
$tags-dark-color-scheme-second-states-disabled-text: mix(#999999, transparent, 50%);
$tags-dark-color-scheme-second-states-disabled-background: mix(#999999, transparent, 10%);
$tags-dark-color-scheme-error-background: #832112;
$tags-dark-color-scheme-error-border: #832112;
$tags-dark-color-scheme-error-icon: mix(#E76E5C, rgba(black, 0.05));
$tags-dark-color-scheme-error-states-hover-icon: #F4B7AE;
$tags-dark-color-scheme-error-states-focused: #E76E5C;
$tags-dark-color-scheme-error-states-disabled-text: mix(#E76E5C, transparent, 50%);
$tags-dark-color-scheme-error-states-disabled-background: mix(#E76E5C, transparent, 10%);
$tags-size-margin: 2px;
$tags-size-height: 24px;
$tags-size-border-width: 1px;
$tags-size-border-radius: 4px;
$tags-size-icon-padding: 3px;
$tags-size-text-margin: 8px;
$tags-font-default: caption;
$tags-font-mono: caption-mono;
$tags-font-caps: caption-caps;
$tag-list-size-padding: 1px 6px;
$tag-list-size-min-height: 28px;
$tag-input-size-height: 22px;
$tag-input-size-margin: 2px 4px;
$tag-input-font-default: body;
$textarea-size-min-height: 50px;
$textarea-size-padding: 5px 16px;
$textarea-font-default: body;
$textarea-font-mono: body-mono;
$timepicker-size-padding-right: 16px;
$toggle-light-color-scheme-border: #B3B3B3;
$toggle-light-color-scheme-background: linear-gradient(to bottom, #E6E6E6, #F0F0F0);
$toggle-light-color-scheme-circle-border: #B3B3B3;
$toggle-light-color-scheme-circle-background: linear-gradient(to bottom, white, #E6E6E6);
$toggle-light-color-scheme-states-focused-shadow: inset 0 0 0 1px white, 0 0 0 2px #338FCC;
$toggle-dark-color-scheme-border: #808080;
$toggle-dark-color-scheme-background: #333333;
$toggle-dark-color-scheme-circle-border: #808080;
$toggle-dark-color-scheme-circle-background: white;
$toggle-dark-color-scheme-states-focused-shadow: inset 0 0 0 1px #333333, 0 0 0 2px #57A4D7;
$toggle-size-height: 16px;
$toggle-size-width: 28px;
$toggle-size-border-radius: 9px;
$toggle-size-label-margin: 8px;
$toggle-font-default: body;
$toggle-small-size-height: 14px;
$toggle-small-size-width: 24px;
$toggle-small-size-border-radius: 8px;
$toggle-small-font-default: caption;
$tooltip-light-color-scheme-background: #4D4D4D;
$tooltip-light-color-scheme-text: white;
$tooltip-light-color-scheme-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);
$tooltip-dark-color-scheme-background: white;
$tooltip-dark-color-scheme-text: white;
$tooltip-dark-color-scheme-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);
$tooltip-size-max-width: 240px;
$tooltip-size-border-radius: 3px;
$tooltip-size-arrow-size: 12px;
$tooltip-size-arrow-width: 5px;
$tooltip-size-padding: 8px 16px;
$tooltip-size-distance: 5px + 4px;
$tooltip-font-default: caption;
$tree-size-padding-right: 16px;
$tree-size-border-width: 2px;
$tree-size-node-height: 28px;
$tree-font-node: body;
$vertical-navbar-light-color-scheme-background: #114E77;
$vertical-navbar-light-color-scheme-text: white;
$vertical-navbar-light-color-scheme-toggle-button: white;
$vertical-navbar-light-color-scheme-states-active-background: lighten(#114E77, 5%);
$vertical-navbar-light-color-scheme-states-hover-background: lighten(#114E77, 5%);
$vertical-navbar-light-color-scheme-states-progress-background: lighten(#07314D, 15%);
$vertical-navbar-dark-color-scheme-background: #114E77;
$vertical-navbar-dark-color-scheme-text: white;
$vertical-navbar-dark-color-scheme-toggle-button: white;
$vertical-navbar-dark-color-scheme-states-active-background: lighten(#114E77, 5%);
$vertical-navbar-dark-color-scheme-states-hover-background: lighten(#114E77, 5%);
$vertical-navbar-dark-color-scheme-states-progress-background: lighten(#07314D, 15%);
$vertical-navbar-font-header: title;
$vertical-navbar-item-size-height: 64px;
$vertical-navbar-item-size-margin: 1px 0;
$vertical-navbar-item-size-padding-horizontal: 16px;
$vertical-navbar-item-size-icon-margin-right: 16px;
$vertical-navbar-item-font-default: body;
$vertical-navbar-item-font-icon-size: 32px;
$navbar-badge-size-width: 64px;
$light-color-scheme-primary-palette: (
40: #F5FAFD,
60: #EBF4FB,
100: #D8EAF7,
200: #AAD1EC,
300: #7FBAE1,
400: #57A4D7,
500: #338FCC,
560: #277BB3,
600: #206EA2,
700: #114E77,
800: #07314D,
A100: rgba(0, 153, 255, 0.15),
A200: rgba(0, 153, 255, 0.3),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,
A200: white,

)
);

$light-color-scheme-second-palette: (
40: #F5F5F5,
60: #F0F0F0,
100: #E6E6E6,
200: #CCCCCC,
300: #B3B3B3,
400: #999999,
500: #808080,
560: #707070,
600: #666666,
700: #4D4D4D,
800: #333333,
A40: rgba(0, 0, 0, 0.04),
A60: rgba(0, 0, 0, 0.06),
A100: rgba(0, 0, 0, 0.1),
A200: rgba(0, 0, 0, 0.2),
A300: rgba(0, 0, 0, 0.3),
A500: rgba(0, 0, 0, 0.5),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,

)
);

$light-color-scheme-error-palette: (
40: #FEF7F6,
60: #FCEFEC,
100: #FADEDA,
200: #F4B7AE,
300: #ED9284,
400: #E76E5C,
500: #E04D36,
560: #C43E29,
600: #B23522,
700: #832112,
800: #541208,
A100: rgba(224, 79, 56, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$light-color-scheme-info-palette: (
40: #F5FAFD,
60: #EBF4FB,
100: #D8EAF7,
200: #AAD1EC,
300: #7FBAE1,
400: #57A4D7,
500: #338FCC,
560: #277BB3,
600: #206EA2,
700: #114E77,
800: #07314D,
A100: rgba(0, 153, 255, 0.15),
A200: rgba(0, 153, 255, 0.3),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,
A200: white,

)
);

$light-color-scheme-success-palette: (
40: #F6FBF4,
60: #EDF8E9,
100: #DCF1D4,
200: #B4DEA4,
300: #8FCC79,
400: #6FBA53,
500: #52A832,
560: #449327,
600: #3B8520,
700: #276211,
800: #163F07,
A100: rgba(68, 255, 0, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$light-color-scheme-warning-palette: (
40: #FDFAF3,
60: #FCF5E8,
100: #F8EBD1,
200: #F0D49B,
300: #E7BD68,
400: #DFA739,
500: #D6930D,
560: #BB800A,
600: #AA7408,
700: #7D5504,
800: #503602,
A100: rgba(255, 170, 0, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$dark-color-scheme-primary-palette: (
40: #F5FAFD,
60: #EBF4FB,
100: #D8EAF7,
200: #AAD1EC,
300: #7FBAE1,
400: #57A4D7,
500: #338FCC,
560: #277BB3,
600: #206EA2,
700: #114E77,
800: #07314D,
A100: rgba(0, 153, 255, 0.15),
A200: rgba(0, 153, 255, 0.3),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,
A200: white,

)
);

$dark-color-scheme-second-palette: (
40: #F5F5F5,
60: #F0F0F0,
100: #E6E6E6,
200: #CCCCCC,
300: #B3B3B3,
400: #999999,
500: #808080,
560: #707070,
600: #666666,
700: #4D4D4D,
800: #333333,
A40: rgba(0, 0, 0, 0.04),
A60: rgba(0, 0, 0, 0.06),
A100: rgba(0, 0, 0, 0.1),
A200: rgba(0, 0, 0, 0.2),
A300: rgba(0, 0, 0, 0.3),
A500: rgba(0, 0, 0, 0.5),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,

)
);

$dark-color-scheme-error-palette: (
40: #FEF7F6,
60: #FCEFEC,
100: #FADEDA,
200: #F4B7AE,
300: #ED9284,
400: #E76E5C,
500: #E04D36,
560: #C43E29,
600: #B23522,
700: #832112,
800: #541208,
A100: rgba(224, 79, 56, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$dark-color-scheme-info-palette: (
40: #F5FAFD,
60: #EBF4FB,
100: #D8EAF7,
200: #AAD1EC,
300: #7FBAE1,
400: #57A4D7,
500: #338FCC,
560: #277BB3,
600: #206EA2,
700: #114E77,
800: #07314D,
A100: rgba(0, 153, 255, 0.15),
A200: rgba(0, 153, 255, 0.3),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,
A200: white,

)
);

$dark-color-scheme-success-palette: (
40: #F6FBF4,
60: #EDF8E9,
100: #DCF1D4,
200: #B4DEA4,
300: #8FCC79,
400: #6FBA53,
500: #52A832,
560: #449327,
600: #3B8520,
700: #276211,
800: #163F07,
A100: rgba(68, 255, 0, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$dark-color-scheme-warning-palette: (
40: #FDFAF3,
60: #FCF5E8,
100: #F8EBD1,
200: #F0D49B,
300: #E7BD68,
400: #DFA739,
500: #D6930D,
560: #BB800A,
600: #AA7408,
700: #7D5504,
800: #503602,
A100: rgba(255, 170, 0, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$color-blue-palette: (
40: #F5FAFD,
60: #EBF4FB,
100: #D8EAF7,
200: #AAD1EC,
300: #7FBAE1,
400: #57A4D7,
500: #338FCC,
560: #277BB3,
600: #206EA2,
700: #114E77,
800: #07314D,
A100: rgba(0, 153, 255, 0.15),
A200: rgba(0, 153, 255, 0.3),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,
A200: white,

)
);

$color-green-palette: (
40: #F6FBF4,
60: #EDF8E9,
100: #DCF1D4,
200: #B4DEA4,
300: #8FCC79,
400: #6FBA53,
500: #52A832,
560: #449327,
600: #3B8520,
700: #276211,
800: #163F07,
A100: rgba(68, 255, 0, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$color-red-palette: (
40: #FEF7F6,
60: #FCEFEC,
100: #FADEDA,
200: #F4B7AE,
300: #ED9284,
400: #E76E5C,
500: #E04D36,
560: #C43E29,
600: #B23522,
700: #832112,
800: #541208,
A100: rgba(224, 79, 56, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);

$color-grey-palette: (
40: #F5F5F5,
60: #F0F0F0,
100: #E6E6E6,
200: #CCCCCC,
300: #B3B3B3,
400: #999999,
500: #808080,
560: #707070,
600: #666666,
700: #4D4D4D,
800: #333333,
A40: rgba(0, 0, 0, 0.04),
A60: rgba(0, 0, 0, 0.06),
A100: rgba(0, 0, 0, 0.1),
A200: rgba(0, 0, 0, 0.2),
A300: rgba(0, 0, 0, 0.3),
A500: rgba(0, 0, 0, 0.5),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,

)
);

$color-yellow-palette: (
40: #FDFAF3,
60: #FCF5E8,
100: #F8EBD1,
200: #F0D49B,
300: #E7BD68,
400: #DFA739,
500: #D6930D,
560: #BB800A,
600: #AA7408,
700: #7D5504,
800: #503602,
A100: rgba(255, 170, 0, 0.15),
contrast: (
40: #4D4D4D,
60: #4D4D4D,
100: #4D4D4D,
200: #4D4D4D,
300: #4D4D4D,
400: white,
500: white,
560: white,
600: white,
700: white,
800: white,
A100: #4D4D4D,

)
);


/*
  Do not edit directly
  Generated on Tue, 16 Mar 2021 14:45:51 GMT
*/

$typography-display-1-font-size: 56px !default;
$typography-display-1-line-height: 76px !default;
$typography-display-1-letter-spacing: -0.4px !default;
$typography-display-1-font-weight: normal !default;
$typography-display-1-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-display-1-text-transform: null !default;
$typography-display-2-font-size: 45px !default;
$typography-display-2-line-height: 56px !default;
$typography-display-2-letter-spacing: normal !default;
$typography-display-2-font-weight: normal !default;
$typography-display-2-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-display-2-text-transform: null !default;
$typography-display-3-font-size: 34px !default;
$typography-display-3-line-height: 44px !default;
$typography-display-3-letter-spacing: 0.25px !default;
$typography-display-3-font-weight: normal !default;
$typography-display-3-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-display-3-text-transform: null !default;
$typography-headline-font-size: 24px !default;
$typography-headline-line-height: 32px !default;
$typography-headline-letter-spacing: normal !default;
$typography-headline-font-weight: normal !default;
$typography-headline-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-headline-text-transform: null !default;
$typography-title-font-size: 20px !default;
$typography-title-line-height: 28px !default;
$typography-title-letter-spacing: 0.15px !default;
$typography-title-font-weight: 500 !default;
$typography-title-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-title-text-transform: null !default;
$typography-subheading-font-size: 15px !default;
$typography-subheading-line-height: 20px !default;
$typography-subheading-letter-spacing: 0.15px !default;
$typography-subheading-font-weight: 700 !default;
$typography-subheading-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-subheading-text-transform: null !default;
$typography-body-font-size: 15px !default;
$typography-body-line-height: 20px !default;
$typography-body-letter-spacing: 0.15px !default;
$typography-body-font-weight: normal !default;
$typography-body-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-body-text-transform: null !default;
$typography-body-strong-font-size: 15px !default;
$typography-body-strong-line-height: 20px !default;
$typography-body-strong-letter-spacing: 0.15px !default;
$typography-body-strong-font-weight: 500 !default;
$typography-body-strong-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-body-strong-text-transform: null !default;
$typography-body-caps-font-size: 15px !default;
$typography-body-caps-line-height: 20px !default;
$typography-body-caps-letter-spacing: 1.7px !default;
$typography-body-caps-font-weight: normal !default;
$typography-body-caps-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-body-caps-text-transform: uppercase !default;
$typography-body-mono-font-size: 15px !default;
$typography-body-mono-line-height: 20px !default;
$typography-body-mono-letter-spacing: normal !default;
$typography-body-mono-font-weight: normal !default;
$typography-body-mono-font-family: 'Roboto Mono', 'Consolas', 'Menlo', 'Monaco', monospace !default;
$typography-body-mono-text-transform: null !default;
$typography-caption-font-size: 13px !default;
$typography-caption-line-height: 16px !default;
$typography-caption-letter-spacing: 0.25px !default;
$typography-caption-font-weight: normal !default;
$typography-caption-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-caption-text-transform: null !default;
$typography-caption-caps-font-size: 13px !default;
$typography-caption-caps-line-height: 16px !default;
$typography-caption-caps-letter-spacing: 1.5px !default;
$typography-caption-caps-font-weight: normal !default;
$typography-caption-caps-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-caption-caps-text-transform: uppercase !default;
$typography-caption-mono-font-size: 13px !default;
$typography-caption-mono-line-height: 16px !default;
$typography-caption-mono-letter-spacing: normal !default;
$typography-caption-mono-font-weight: normal !default;
$typography-caption-mono-font-family: 'Roboto Mono', 'Consolas', 'Menlo', 'Monaco', monospace !default;
$typography-caption-mono-text-transform: null !default;
$typography-small-text-font-size: 13px !default;
$typography-small-text-line-height: 16px !default;
$typography-small-text-letter-spacing: 0.25px !default;
$typography-small-text-font-weight: normal !default;
$typography-small-text-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-small-text-text-transform: null !default;
$typography-extra-small-text-font-size: 11px !default;
$typography-extra-small-text-line-height: 16px !default;
$typography-extra-small-text-letter-spacing: 0.22px !default;
$typography-extra-small-text-font-weight: normal !default;
$typography-extra-small-text-font-family: Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif !default;
$typography-extra-small-text-text-transform: null !default;

$mosaic: (
  'typography': (
    'display-1': (
      'font-size': $typography-display-1-font-size,
      'line-height': $typography-display-1-line-height,
      'letter-spacing': $typography-display-1-letter-spacing,
      'font-weight': $typography-display-1-font-weight,
      'font-family': $typography-display-1-font-family,
      'text-transform': $typography-display-1-text-transform
    ),
    'display-2': (
      'font-size': $typography-display-2-font-size,
      'line-height': $typography-display-2-line-height,
      'letter-spacing': $typography-display-2-letter-spacing,
      'font-weight': $typography-display-2-font-weight,
      'font-family': $typography-display-2-font-family,
      'text-transform': $typography-display-2-text-transform
    ),
    'display-3': (
      'font-size': $typography-display-3-font-size,
      'line-height': $typography-display-3-line-height,
      'letter-spacing': $typography-display-3-letter-spacing,
      'font-weight': $typography-display-3-font-weight,
      'font-family': $typography-display-3-font-family,
      'text-transform': $typography-display-3-text-transform
    ),
    'headline': (
      'font-size': $typography-headline-font-size,
      'line-height': $typography-headline-line-height,
      'letter-spacing': $typography-headline-letter-spacing,
      'font-weight': $typography-headline-font-weight,
      'font-family': $typography-headline-font-family,
      'text-transform': $typography-headline-text-transform
    ),
    'title': (
      'font-size': $typography-title-font-size,
      'line-height': $typography-title-line-height,
      'letter-spacing': $typography-title-letter-spacing,
      'font-weight': $typography-title-font-weight,
      'font-family': $typography-title-font-family,
      'text-transform': $typography-title-text-transform
    ),
    'subheading': (
      'font-size': $typography-subheading-font-size,
      'line-height': $typography-subheading-line-height,
      'letter-spacing': $typography-subheading-letter-spacing,
      'font-weight': $typography-subheading-font-weight,
      'font-family': $typography-subheading-font-family,
      'text-transform': $typography-subheading-text-transform
    ),
    'body': (
      'font-size': $typography-body-font-size,
      'line-height': $typography-body-line-height,
      'letter-spacing': $typography-body-letter-spacing,
      'font-weight': $typography-body-font-weight,
      'font-family': $typography-body-font-family,
      'text-transform': $typography-body-text-transform
    ),
    'body-strong': (
      'font-size': $typography-body-strong-font-size,
      'line-height': $typography-body-strong-line-height,
      'letter-spacing': $typography-body-strong-letter-spacing,
      'font-weight': $typography-body-strong-font-weight,
      'font-family': $typography-body-strong-font-family,
      'text-transform': $typography-body-strong-text-transform
    ),
    'body-caps': (
      'font-size': $typography-body-caps-font-size,
      'line-height': $typography-body-caps-line-height,
      'letter-spacing': $typography-body-caps-letter-spacing,
      'font-weight': $typography-body-caps-font-weight,
      'font-family': $typography-body-caps-font-family,
      'text-transform': $typography-body-caps-text-transform
    ),
    'body-mono': (
      'font-size': $typography-body-mono-font-size,
      'line-height': $typography-body-mono-line-height,
      'letter-spacing': $typography-body-mono-letter-spacing,
      'font-weight': $typography-body-mono-font-weight,
      'font-family': $typography-body-mono-font-family,
      'text-transform': $typography-body-mono-text-transform
    ),
    'caption': (
      'font-size': $typography-caption-font-size,
      'line-height': $typography-caption-line-height,
      'letter-spacing': $typography-caption-letter-spacing,
      'font-weight': $typography-caption-font-weight,
      'font-family': $typography-caption-font-family,
      'text-transform': $typography-caption-text-transform
    ),
    'caption-caps': (
      'font-size': $typography-caption-caps-font-size,
      'line-height': $typography-caption-caps-line-height,
      'letter-spacing': $typography-caption-caps-letter-spacing,
      'font-weight': $typography-caption-caps-font-weight,
      'font-family': $typography-caption-caps-font-family,
      'text-transform': $typography-caption-caps-text-transform
    ),
    'caption-mono': (
      'font-size': $typography-caption-mono-font-size,
      'line-height': $typography-caption-mono-line-height,
      'letter-spacing': $typography-caption-mono-letter-spacing,
      'font-weight': $typography-caption-mono-font-weight,
      'font-family': $typography-caption-mono-font-family,
      'text-transform': $typography-caption-mono-text-transform
    ),
    'small-text': (
      'font-size': $typography-small-text-font-size,
      'line-height': $typography-small-text-line-height,
      'letter-spacing': $typography-small-text-letter-spacing,
      'font-weight': $typography-small-text-font-weight,
      'font-family': $typography-small-text-font-family,
      'text-transform': $typography-small-text-text-transform
    ),
    'extra-small-text': (
      'font-size': $typography-extra-small-text-font-size,
      'line-height': $typography-extra-small-text-line-height,
      'letter-spacing': $typography-extra-small-text-letter-spacing,
      'font-weight': $typography-extra-small-text-font-weight,
      'font-family': $typography-extra-small-text-font-family,
      'text-transform': $typography-extra-small-text-text-transform
    )
  )
);






@mixin border-top-radius($radius) {
    border-top: {
        right-radius: $radius;
        left-radius: $radius;
    }
}

@mixin border-bottom-radius($radius) {
    border-bottom: {
        right-radius: $radius;
        left-radius: $radius;
    }
}

@mixin border-right-radius($radius) {
    border: {
        bottom-right-radius: $radius;
        top-right-radius: $radius;
    }
}

@mixin border-left-radius($radius) {
    border: {
        bottom-left-radius: $radius;
        top-left-radius: $radius;
    }
}

.mc-group {
    display: flex;
    flex-direction: row;

    .mc-group_justified {
        > .mc-group-item {
            width: 100%;
        }
    }

    .mc-group-item + .mc-group-item {
        margin-left: calc(-1 * var(--mc-button-size-border-width, #{$button-size-border-width}));
    }

    & > .mc-group-item:first-child:not(:last-child) {
        @include border-right-radius(0);

        > .mc-form-field__container {
            @include border-right-radius(0);
        }
    }

    & > .mc-group-item:last-child:not(:first-child) {
        @include border-left-radius(0);

        > .mc-form-field__container {
            @include border-left-radius(0);
        }
    }

    & > .mc-group-item:not(:first-child):not(:last-child) {
        border-radius: 0;

        > .mc-form-field__container {
            border-radius: 0;
        }
    }
}

.mc-vertical-group {
    display: flex;
    flex-direction: column;

    /* stylelint-disable no-descending-specificity */
    > .mc-group-item {
        &:first-child:not(:last-child) {
            @include border-bottom-radius(0);

            border-top-right-radius: var(--mc-button-size-border-radius, $button-size-border-radius);

            > .mc-form-field__container {
                @include border-bottom-radius(0);
            }
        }

        &:last-child:not(:first-child) {
            @include border-top-radius(0);

            border-bottom-left-radius: var(--mc-button-size-border-radius, $button-size-border-radius);

            > .mc-form-field__container {
                @include border-top-radius(0);
            }
        }

        &:not(:first-child):not(:last-child) {
            border-radius: 0;

            > .mc-form-field__container {
                border-radius: 0;
            }
        }
    }

    .mc-group-item + .mc-group-item {
        margin-top: calc(-1 * var(--mc-button-size-border-width, #{$button-size-border-width}));
    }
    /* stylelint-enable no-descending-specificity */
}


@mixin mc-reset-input {
    background: transparent;
    padding: 0;
    margin: 0;
    border: none;
    outline: none;

    /* clears the 'X' from Internet Explorer */
    &::-ms-clear {
        display: none;
        width: 0;
        height: 0;
    }

    &::-ms-reveal {
        display: none;
        width: 0;
        height: 0;
    }

    /* clears the 'X' from Chrome */
    &::-webkit-search-decoration,
    &::-webkit-search-cancel-button,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
        display: none;
    }

}

// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.
@mixin mc-fill {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
}

// This mixin will ensure that lines that overflow the container will hide the overflow and
// truncate neatly with an ellipsis.
@mixin mc-truncate-line() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Mixin to provide all mc-line styles, changing secondary font size based on whether the list is in dense mode.
@mixin mc-line-base($secondary-font-size) {
    .mc-line {
        @include mc-truncate-line();

        display: block;
        box-sizing: border-box;

        // all lines but the top line should have smaller text
        &:nth-child(n + 2) {
            font-size: $secondary-font-size;
        }
    }
}

// This mixin normalizes default element styles, e.g. font weight for heading text.
@mixin mc-normalize-text() {
    & > * {
        margin: 0;
        padding: 0;
        font-weight: normal;
        font-size: inherit;
    }
}

// This mixin provides base styles for the wrapper around mc-line elements in a list.
@mixin mc-line-wrapper-base() {
    @include mc-normalize-text();

    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;

    // Must remove wrapper when lines are empty or it takes up horizontal
    // space and pushes other elements to the right.
    &:empty {
        display: none;
    }
}

.mc-no-select {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
}

.cdk-overlay-container {
    pointer-events: none;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    position: fixed;
    z-index: 1000;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

.cdk-overlay-backdrop {
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    -webkit-tap-highlight-color: transparent;
    transition: opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    opacity: 0;
    position: absolute;
    pointer-events: auto;
    z-index: 1000;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

.cdk-overlay-pane {
    box-sizing: border-box;
    position: absolute;
    pointer-events: auto;
    margin: 0;
    padding: 0;
    z-index: 1000;
    max-width: 100%;
    max-height: 100%;
}

.cdk-overlay-connected-position-bounding-box {
    box-sizing: border-box;
    position: absolute;
    z-index: 1000;
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    min-width: 1px;
    min-height: 1px;
}




@mixin popup-params($theme) {
    $popup: map-get(map-get($theme, components), popup);

    box-shadow: map-get($popup, shadow);
    border-color: map-get($popup, border);

    background-color: map-get($popup, background);
}

// mixin definition ; sets LTR and RTL within the same style call
// @see https://css-tricks.com/almanac/properties/d/direction/

@mixin rtl($prop, $ltr-value, $rtl-value) {
    #{$prop}: $ltr-value;

    [dir=rtl] & {
        #{$prop}: $rtl-value;
    }
}

@mixin rtl-prop($ltr-prop, $rtl-prop, $value, $reset-value) {
    #{$ltr-prop}: $value;

    [dir=rtl] & {
        #{$ltr-prop}: $reset-value;
        #{$rtl-prop}: $value;
    }
}

// To reverse padding (top left bottom right) -> (top right bottom left)
@function rtl-value($list) {
    @if length($list) == 4 {
        @return nth($list, 1) nth($list, 4) nth($list, 3) nth($list, 2)
    }
    @if length($list) == 5 {
        @return nth($list, 1) nth($list, 4) nth($list, 3) nth($list, 2) nth($list, 5)
    }
    @return $list;
}

$zindex-modal-mask      : 1000;
$zindex-modal           : 1000;
$zindex-notification    : 1010;
$zindex-message         : 1010;
$zindex-popover         : 1030;
$zindex-picker          : 1050;
$zindex-dropdown        : 1050;
$zindex-tooltip         : 1060;

// The default animation curves used by material design.
$mc-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;
$mc-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;
$mc-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;

$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;

$swift-ease-out-duration: 400ms !default;
$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;
$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;

$swift-ease-in-duration: 300ms !default;
$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;
$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;

$swift-ease-in-out-duration: 500ms !default;
$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;
$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;

$swift-linear-duration: 80ms !default;
$swift-linear-timing-function: linear !default;
$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;



.mc-scrollbar {
    &::-webkit-scrollbar,
    ::-webkit-scrollbar {
        width: 10px;
        height: 10px;
        box-shadow: inset 1px 1px 0 rgba(#000, 0.12);
        transition: $swift-ease-in-out;
        background-color: rgba(#000, 0.05);

        &:hover {
            box-shadow:
                inset 1px 1px 0 rgba(#000, 0.054),
                inset 0 -1px 0 rgba(#000, 0.038);
            background-color: rgba(#000, 0.087);
        }
    }

    /* stylelint-disable */
    &::-webkit-scrollbar-button,
    ::-webkit-scrollbar-button {
        display: none;
    }

    &::-webkit-scrollbar-corner,
    ::-webkit-scrollbar-corner {
        background-color: transparent;
    }

    &::-webkit-scrollbar-thumb,
    ::-webkit-scrollbar-thumb {
        background-color: rgba(#000, 0.26);
        box-shadow:
            inset 1px 1px 0 rgba(#000, 0.054),
            inset 0 -1px 0 rgba(#000, 0.087);
        transition: $swift-ease-in-out;
    }
    /* stylelint-enable */
}

@mixin size($width, $height) {
    width: $width;
    height: $height;
}

@mixin square($size) {
    @include size($size, $size);
}



@mixin cdk-a11y {
    .cdk-visually-hidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;

        // Avoid browsers rendering the focus ring in some cases.
        outline: 0;

        // Avoid some cases where the browser will still render the native controls (see #9049).
        -webkit-appearance: none;
        -moz-appearance: none;
    }
}

/// Emits the mixin's content nested under `$selector-context` if `$selector-context`
/// is non-empty.
/// @param selector-context The selector under which to nest the mixin's content.
@mixin _cdk-optionally-nest-content($selector-context) {
    @if ($selector-context == '') {
        @content;
    }
    @else {
        #{$selector-context} {
            @content;
        }
    }
}

/// Applies styles for users in high contrast mode. Note that this only applies
/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`
/// attribute, however Chrome handles high contrast differently.
///
/// @param target Which kind of high contrast setting to target. Defaults to `active`, can be
///    `white-on-black` or `black-on-white`.
/// @param encapsulation Whether to emit styles for view encapsulation. Values are:
///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`
///     * `off` - works for `None`
///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).
@mixin cdk-high-contrast($target: active, $encapsulation: 'any') {
    @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {
        @error 'Unknown cdk-high-contrast value "#{$target}" provided. ' +
            'Allowed values are "active", "black-on-white", and "white-on-black"';
    }

    @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {
        @error 'Unknown cdk-high-contrast encapsulation "#{$encapsulation}" provided. ' +
            'Allowed values are "on", "off", and "any"';
    }

    // If the selector context has multiple parts, such as `.section, .region`, just doing
    // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the
    // context. We address this by nesting the selector context under .cdk-high-contrast.
    @at-root {
        $selector-context: #{&};

        @if ($encapsulation != 'on') {
            .cdk-high-contrast-#{$target} {
                @include _cdk-optionally-nest-content($selector-context) {
                    @content;
                }
            }
        }

        @if ($encapsulation != 'off') {
            .cdk-high-contrast-#{$target} :host {
                @include _cdk-optionally-nest-content($selector-context) {
                    @content;
                }
            }
        }
    }
}

@mixin cdk-a11y {
  .cdk-visually-hidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    // Avoid browsers rendering the focus ring in some cases.
    outline: 0;

    // Avoid some cases where the browser will still render the native controls (see #9049).
    -webkit-appearance: none;
    -moz-appearance: none;
  }
}

/// Emits the mixin's content nested under `$selector-context` if `$selector-context`
/// is non-empty.
/// @param selector-context The selector under which to nest the mixin's content.
@mixin _cdk-optionally-nest-content($selector-context) {
  @if ($selector-context == '') {
    @content;
  }
  @else {
    #{$selector-context} {
      @content;
    }
  }
}

/// Applies styles for users in high contrast mode. Note that this only applies
/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`
/// attribute, however Chrome handles high contrast differently.
///
/// @param target Which kind of high contrast setting to target. Defaults to `active`, can be
///    `white-on-black` or `black-on-white`.
/// @param encapsulation Whether to emit styles for view encapsulation. Values are:
///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`
///     * `off` - works for `None`
///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).
@mixin cdk-high-contrast($target: active, $encapsulation: 'any') {
  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {
    @error 'Unknown cdk-high-contrast value "#{$target}" provided. ' +
           'Allowed values are "active", "black-on-white", and "white-on-black"';
  }

  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {
    @error 'Unknown cdk-high-contrast encapsulation "#{$encapsulation}" provided. ' +
           'Allowed values are "on", "off", and "any"';
  }

  // If the selector context has multiple parts, such as `.section, .region`, just doing
  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the
  // context. We address this by nesting the selector context under .cdk-high-contrast.
  @at-root {
    $selector-context: #{&};

    @if ($encapsulation != 'on') {
      .cdk-high-contrast-#{$target} {
        @include _cdk-optionally-nest-content($selector-context) {
          @content;
        }
      }
    }

    @if ($encapsulation != 'off') {
      .cdk-high-contrast-#{$target} :host {
        @include _cdk-optionally-nest-content($selector-context) {
          @content;
        }
      }
    }
  }
}


// We want overlays to always appear over user content, so set a baseline
// very high z-index for the overlay container, which is where we create the new
// stacking context for all overlays.
$cdk-z-index-overlay-container: 1000 !default;
$cdk-z-index-overlay: 1000 !default;
$cdk-z-index-overlay-backdrop: 1000 !default;

// Background color for all of the backdrops
$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.32) !default;

// Default backdrop animation is based on the Material Design swift-ease-out.
$backdrop-animation-duration: 400ms !default;
$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;


@mixin cdk-overlay() {
  .cdk-overlay-container, .cdk-global-overlay-wrapper {
    // Disable events from being captured on the overlay container.
    pointer-events: none;

    // The container should be the size of the viewport.
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  // The overlay-container is an invisible element which contains all individual overlays.
  .cdk-overlay-container {
    position: fixed;
    z-index: $cdk-z-index-overlay-container;

    &:empty {
      // Hide the element when it doesn't have any child nodes. This doesn't
      // include overlays that have been detached, rather than disposed.
      display: none;
    }
  }

  // We use an extra wrapper element in order to use make the overlay itself a flex item.
  // This makes centering the overlay easy without running into the subpixel rendering
  // problems tied to using `transform` and without interfering with the other position
  // strategies.
  .cdk-global-overlay-wrapper {
    display: flex;
    position: absolute;
    z-index: $cdk-z-index-overlay;
  }

  // A single overlay pane.
  .cdk-overlay-pane {
    // Note: it's important for this one to start off `absolute`,
    // in order for us to be able to measure it correctly.
    position: absolute;
    pointer-events: auto;
    box-sizing: border-box;
    z-index: $cdk-z-index-overlay;

    // For connected-position overlays, we set `display: flex` in
    // order to force `max-width` and `max-height` to take effect.
    display: flex;
    max-width: 100%;
    max-height: 100%;
  }

  .cdk-overlay-backdrop {
    // TODO(jelbourn): reuse sidenav fullscreen mixin.
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    z-index: $cdk-z-index-overlay-backdrop;
    pointer-events: auto;
    -webkit-tap-highlight-color: transparent;
    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;
    opacity: 0;

    &.cdk-overlay-backdrop-showing {
      opacity: 1;

      // In high contrast mode the rgba background will become solid so we need to fall back
      // to making it opaque using `opacity`. Note that we can't use the `cdk-high-contrast`
      // mixin, because we can't normalize the import path to the _a11y.scss both for the
      // source and when this file is distributed. See #10908.
      @include cdk-high-contrast(active, off) {
        opacity: 0.6;
      }
    }
  }

  .cdk-overlay-dark-backdrop {
    background: $cdk-overlay-dark-backdrop-background;
  }

  .cdk-overlay-transparent-backdrop {
    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from
    // capturing the user's mouse scroll events. Since we also can't use something like
    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at
    // all and using `opacity` to make the element transparent.
    &, &.cdk-overlay-backdrop-showing {
      opacity: 0;
    }
  }

  // Overlay parent element used with the connected position strategy. Used to constrain the
  // overlay element's size to fit within the viewport.
  .cdk-overlay-connected-position-bounding-box {
    position: absolute;
    z-index: $cdk-z-index-overlay;

    // We use `display: flex` on this element exclusively for centering connected overlays.
    // When *not* centering, a top/left/bottom/right will be set which overrides the normal
    // flex layout.
    display: flex;

    // We use the `column` direction here to avoid some flexbox issues in Edge
    // when using the "grow after open" options.
    flex-direction: column;

    // Add some dimensions so the element has an `innerText` which some people depend on in tests.
    min-width: 1px;
    min-height: 1px;
  }

  // Used when disabling global scrolling.
  .cdk-global-scrollblock {
    position: fixed;

    // Necessary for the content not to lose its width. Note that we're using 100%, instead of
    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width
    // that the element had before we made it `fixed`.
    width: 100%;

    // Note: this will always add a scrollbar to whatever element it is on, which can
    // potentially result in double scrollbars. It shouldn't be an issue, because we won't
    // block scrolling on a page that doesn't have a scrollbar in the first place.
    overflow-y: scroll;
  }
}






@function mc-light-theme-components($theme) {
    $alert: (
        error: (
            background: $alert-light-color-scheme-error-background,
            border: $alert-light-color-scheme-error-border,
            icon: $alert-light-color-scheme-error-icon
        ),
        warning: (
            background: $alert-light-color-scheme-warning-background,
            border: $alert-light-color-scheme-warning-border,
            icon: $alert-light-color-scheme-warning-icon
        ),
        success: (
            background: $alert-light-color-scheme-success-background,
            border: $alert-light-color-scheme-success-border,
            icon: $alert-light-color-scheme-success-icon
        ),
        info: (
            background: $alert-light-color-scheme-info-background,
            border: $alert-light-color-scheme-info-border,
            icon: $alert-light-color-scheme-info-icon
        ),
        default: (
            background: $alert-light-color-scheme-default-background,
            border: $alert-light-color-scheme-default-border,
            icon: $alert-light-color-scheme-default-icon
        ),
    );

    $popup: (
        shadow: $popup-light-color-scheme-shadow,
        border: $popup-light-color-scheme-border,
        divider: $popup-light-color-scheme-divider,

        background: $popup-light-color-scheme-background,
        footer-background: $popup-light-color-scheme-footer-background
    );

    $button: (
        state-active_shadow: $button-light-color-scheme-active-shadow,

        primary: (
            color: $button-light-color-scheme-primary-color,
            border: $button-light-color-scheme-primary-border,
            background: $button-light-color-scheme-primary-background,
            icon: $button-light-color-scheme-primary-icon,

            active_border: $button-light-color-scheme-primary-states-active-border,
            active_background: $button-light-color-scheme-primary-states-active-background
        ),

        second: (
            color: $button-light-color-scheme-second-color,
            border: $button-light-color-scheme-second-border,
            background: $button-light-color-scheme-second-background,
            icon: $button-light-color-scheme-second-icon,

            active_border: $button-light-color-scheme-second-states-active-border,
            active_background: $button-light-color-scheme-second-states-active-background
        ),

        error: (
            color: $button-light-color-scheme-error-color,
            border: $button-light-color-scheme-error-border,
            background: $button-light-color-scheme-error-background,
            icon: $button-light-color-scheme-error-icon,

            active_border: $button-light-color-scheme-error-states-active-border,
            active_background: $button-light-color-scheme-error-states-active-background
        )
    );

    $card: (
        error: (
            vertical-line: $card-light-color-scheme-error-vertical-line,
            background: $card-light-color-scheme-error-background,
            shadow: $card-light-color-scheme-error-shadow
        ),
        warning: (
            vertical-line: $card-light-color-scheme-warning-vertical-line,
            background: $card-light-color-scheme-warning-background,
            shadow: $card-light-color-scheme-warning-shadow
        ),
        success: (
            vertical-line: $card-light-color-scheme-success-vertical-line,
            background: $card-light-color-scheme-success-background,
            shadow: $card-light-color-scheme-success-shadow
        ),
        info: (
            vertical-line: $card-light-color-scheme-info-vertical-line,
            background: $card-light-color-scheme-info-background,
            shadow: $card-light-color-scheme-info-shadow
        )
    );

    $checkbox: (
        border: $checkbox-light-color-scheme-border,

        state-checked-border: $checkbox-light-color-scheme-states-checked-border,
        state-checked-background: $checkbox-light-color-scheme-states-checked-background,

        state-focused-border: $checkbox-light-color-scheme-states-focused-border,
        state-focused-shadow: $checkbox-light-color-scheme-states-focused-shadow
    );


    $form-field: (
        border: $form-field-light-color-scheme-border,
        background: $form-field-light-color-scheme-background,

        state-hover-border: $form-field-light-color-scheme-states-hover-border,
        state-invalid-border: $form-field-light-color-scheme-states-invalid-border,
        state-invalid-background: $form-field-light-color-scheme-states-invalid-background
    );

    $link: (
        text: $link-light-color-scheme-text,

        state-hover-text: $link-light-color-scheme-state-hover-text,
        state-focused-outline: $link-light-color-scheme-state-focused-outline,

        dashed: (
            border-bottom: $link-light-color-scheme-dashed-border-bottom,
            state-hover-border-bottom: $link-light-color-scheme-dashed-state-hover-border-bottom
        ),

        underlined: (
            border-bottom: $link-light-color-scheme-underlined-border-bottom,
            state-hover-border-bottom: $link-light-color-scheme-underlined-state-hover-border-bottom
        )
    );

    $modal: (
        background-mask: $modal-light-color-scheme-background-mask,
        shadow: $modal-light-color-scheme-shadow
    );

    $navbar: (
        background: $navbar-light-color-scheme-background,
        color: $navbar-light-color-scheme-text,
        opacity: $navbar-light-color-scheme-opacity,
    );

    $navbar-item: (
        color: $navbar-item-light-color-scheme-text,

        state-active: $navbar-item-light-color-scheme-states-active,
        state-hover: $navbar-item-light-color-scheme-states-hover,
        state-progress: $navbar-item-light-color-scheme-states-progress,
        state-disabled-opacity: $navbar-item-light-color-scheme-states-disabled-opacity,
    );

    $popover: (
        border: $popover-light-color-scheme-border
    );

    $progress-bar: (
        background: $progress-bar-light-color-scheme-background
    );

    $radio: (
        outer-circle_border: $radio-light-color-scheme-outer-circle-border,
        inner-circle_border: $radio-light-color-scheme-inner-circle-border,

        outer-circle_checked-state_border: $radio-light-color-scheme-states-checked-outer-circle-border,
        outer-circle_focused-state_border: $radio-light-color-scheme-states-focused-outer-circle-border,
        outer-circle_focused-state_shadow: $radio-light-color-scheme-states-focused-outer-circle-shadow,

        inner-circle_checked-state_border: $radio-light-color-scheme-states-checked-inner-circle-border,
        inner-circle_focused-state_shadow: $radio-light-color-scheme-states-focused-inner-circle-shadow
    );

    $sidepanel: (
        border: $sidepanel-light-color-scheme-border
    );

    $tabs: (
        border: $tabs-light-color-scheme-border,
        state-active: $tabs-light-color-scheme-state-active
    );

    $tags: (
        primary: (
            border: $tags-light-color-scheme-primary-border,
            background: $tags-light-color-scheme-primary-background,
            background_disabled: $tags-light-color-scheme-primary-states-disabled-background,
            icon: $tags-light-color-scheme-primary-icon,
            icon_hover: $tags-light-color-scheme-primary-states-hover-icon,
            focused: $tags-light-color-scheme-primary-states-focused,
            disabled: $tags-light-color-scheme-primary-states-disabled-text
        ),
        second: (
            border: $tags-light-color-scheme-second-border,
            background: $tags-light-color-scheme-second-background,
            background_disabled: $tags-light-color-scheme-second-states-disabled-background,
            icon: $tags-light-color-scheme-second-icon,
            icon_hover: $tags-light-color-scheme-second-states-hover-icon,
            focused: $tags-light-color-scheme-second-states-focused,
            disabled: $tags-light-color-scheme-second-states-disabled-text
        ),
        error: (
            border: $tags-light-color-scheme-error-border,
            background: $tags-light-color-scheme-error-background,
            background_disabled: $tags-light-color-scheme-error-states-disabled-background,
            icon: $tags-light-color-scheme-error-icon,
            icon_hover: $tags-light-color-scheme-error-states-hover-icon,
            focused: $tags-light-color-scheme-error-states-focused,
            disabled: $tags-light-color-scheme-error-states-disabled-text
        )
    );

    $toggle: (
        border: $toggle-light-color-scheme-border,
        background: $toggle-light-color-scheme-background,

        circle_border: $toggle-light-color-scheme-circle-border,
        circle_background: $toggle-light-color-scheme-circle-background,

        focused: $toggle-light-color-scheme-states-focused-shadow
    );

    $tooltip: (
        background: $tooltip-light-color-scheme-background,
        color: $tooltip-light-color-scheme-text,
        shadow: $tooltip-light-color-scheme-shadow
    );

    $vertical-navbar: (
        background: $vertical-navbar-light-color-scheme-background,
        color: $vertical-navbar-light-color-scheme-text,

        toggle-button: $vertical-navbar-light-color-scheme-toggle-button,

        background_hover: $vertical-navbar-light-color-scheme-states-hover-background,
        background_active: $vertical-navbar-light-color-scheme-states-active-background,
        background_progress: $vertical-navbar-light-color-scheme-states-progress-background
    );

    @return (
        alert: $alert,
        popup: $popup,
        button: $button,
        card: $card,
        checkbox: $checkbox,
        form-field: $form-field,
        link: $link,
        modal: $modal,
        navbar: $navbar,
        navbar-item: $navbar-item,
        popover: $popover,
        progress-bar: $progress-bar,
        radio: $radio,
        sidepanel: $sidepanel,
        tabs: $tabs,
        tags: $tags,
        toggle: $toggle,
        tooltip: $tooltip,
        vertical-navbar: $vertical-navbar,
    );
}

@function mc-dark-theme-components($theme) {
    $alert: (
        error: (
            background: $alert-dark-color-scheme-error-background,
            border: $alert-dark-color-scheme-error-border,
            icon: $alert-dark-color-scheme-error-icon
        ),
        warning: (
            background: $alert-dark-color-scheme-warning-background,
            border: $alert-dark-color-scheme-warning-border,
            icon: $alert-dark-color-scheme-warning-icon
        ),
        success: (
            background: $alert-dark-color-scheme-success-background,
            border: $alert-dark-color-scheme-success-border,
            icon: $alert-dark-color-scheme-success-icon
        ),
        info: (
            background: $alert-dark-color-scheme-info-background,
            border: $alert-dark-color-scheme-info-border,
            icon: $alert-dark-color-scheme-info-icon
        ),
        default: (
            background: $alert-dark-color-scheme-default-background,
            border: $alert-dark-color-scheme-default-border,
            icon: $alert-dark-color-scheme-default-icon
        ),
    );

    $popup: (
        shadow: $popup-dark-color-scheme-shadow,
        border: $popup-dark-color-scheme-border,
        divider: $popup-dark-color-scheme-divider,

        background: $popup-dark-color-scheme-background,
        footer-background: $popup-dark-color-scheme-footer-background
    );

    $button: (
        state-active_shadow: $button-dark-color-scheme-active-shadow,

        primary: (
            color: $button-dark-color-scheme-primary-color,
            border: $button-dark-color-scheme-primary-border,
            background: $button-dark-color-scheme-primary-background,
            icon: $button-dark-color-scheme-primary-icon,

            active_border: $button-dark-color-scheme-primary-states-active-border,
            active_background: $button-dark-color-scheme-primary-states-active-background
        ),

        second: (
            color: $button-dark-color-scheme-second-color,
            border: $button-dark-color-scheme-second-border,
            background: $button-dark-color-scheme-second-background,
            icon: $button-dark-color-scheme-second-icon,

            active_border: $button-dark-color-scheme-second-states-active-border,
            active_background: $button-dark-color-scheme-second-states-active-background
        ),

        error: (
            color: $button-dark-color-scheme-error-color,
            border: $button-dark-color-scheme-error-border,
            background: $button-dark-color-scheme-error-background,
            icon: $button-dark-color-scheme-error-icon,

            active_border: $button-dark-color-scheme-error-states-active-border,
            active_background: $button-dark-color-scheme-error-states-active-background
        )
    );

    $card: (
        error: (
            vertical-line: $card-dark-color-scheme-error-vertical-line,
            background: $card-dark-color-scheme-error-background,
            shadow: $card-dark-color-scheme-error-shadow
        ),
        warning: (
            vertical-line: $card-dark-color-scheme-warning-vertical-line,
            background: $card-dark-color-scheme-warning-background,
            shadow: $card-dark-color-scheme-warning-shadow
        ),
        success: (
            vertical-line: $card-dark-color-scheme-success-vertical-line,
            background: $card-dark-color-scheme-success-background,
            shadow: $card-dark-color-scheme-success-shadow
        ),
        info: (
            vertical-line: $card-dark-color-scheme-info-vertical-line,
            background: $card-dark-color-scheme-info-background,
            shadow: $card-dark-color-scheme-info-shadow
        )
    );

    $checkbox: (
        border: $checkbox-dark-color-scheme-border,

        state-checked-border: $checkbox-dark-color-scheme-states-checked-border,
        state-checked-background: $checkbox-dark-color-scheme-states-checked-background,

        state-focused-border: $checkbox-dark-color-scheme-states-focused-border,
        state-focused-shadow: $checkbox-dark-color-scheme-states-focused-shadow
    );

    $form-field: (
        border: $form-field-dark-color-scheme-border,
        background: $form-field-dark-color-scheme-background,

        state-hover-border: $form-field-dark-color-scheme-states-hover-border,
        state-invalid-border: $form-field-dark-color-scheme-states-invalid-border,
        state-invalid-background: $form-field-dark-color-scheme-states-invalid-background
    );

    $link: (
        text: $link-dark-color-scheme-text,

        state-hover-text: $link-dark-color-scheme-state-hover-text,
        state-focused-outline: $link-dark-color-scheme-state-focused-outline,

        dashed: (
            border-bottom: $link-dark-color-scheme-dashed-border-bottom,
            state-hover-border-bottom: $link-dark-color-scheme-dashed-state-hover-border-bottom
        ),

        underlined: (
            border-bottom: $link-dark-color-scheme-underlined-border-bottom,
            state-hover-border-bottom: $link-dark-color-scheme-underlined-state-hover-border-bottom
        )
    );

    $modal: (
        background-mask: $modal-dark-color-scheme-background-mask,
        shadow: $modal-dark-color-scheme-shadow
    );

    $navbar: (
        background: $navbar-dark-color-scheme-background,
        color: $navbar-dark-color-scheme-text,
        opacity: $navbar-dark-color-scheme-opacity,
    );

    $navbar-item: (
        color: $navbar-item-dark-color-scheme-text,

        state-active: $navbar-item-dark-color-scheme-states-active,
        state-hover: $navbar-item-dark-color-scheme-states-hover,
        state-progress: $navbar-item-dark-color-scheme-states-progress,
        state-disabled-opacity: $navbar-item-dark-color-scheme-states-disabled-opacity,
    );

    $popover: (
        border: $popover-dark-color-scheme-border
    );

    $progress-bar: (
        background: $progress-bar-dark-color-scheme-background
    );

    $radio: (
        outer-circle_border: $radio-dark-color-scheme-outer-circle-border,
        inner-circle_border: $radio-dark-color-scheme-inner-circle-border,

        outer-circle_checked-state_border: $radio-dark-color-scheme-states-checked-outer-circle-border,
        outer-circle_focused-state_border: $radio-dark-color-scheme-states-focused-outer-circle-border,
        outer-circle_focused-state_shadow: $radio-dark-color-scheme-states-focused-outer-circle-shadow,

        inner-circle_checked-state_border: $radio-dark-color-scheme-states-checked-inner-circle-border,
        inner-circle_focused-state_shadow: $radio-dark-color-scheme-states-focused-inner-circle-shadow
    );

    $sidepanel: (
        border: $sidepanel-dark-color-scheme-border
    );

    $tabs: (
        border: $tabs-dark-color-scheme-border,
        state-active: $tabs-dark-color-scheme-state-active
    );

    $tags: (
        primary: (
            border: $tags-dark-color-scheme-primary-border,
            background: $tags-dark-color-scheme-primary-background,
            background_disabled: $tags-dark-color-scheme-primary-states-disabled-background,
            icon: $tags-dark-color-scheme-primary-icon,
            icon_hovered: $tags-dark-color-scheme-primary-states-hover-icon,
            focused: $tags-dark-color-scheme-primary-states-focused,
            disabled: $tags-dark-color-scheme-primary-states-disabled-text
        ),
        second: (
            border: $tags-dark-color-scheme-second-border,
            background: $tags-dark-color-scheme-second-background,
            background_disabled: $tags-dark-color-scheme-second-states-disabled-background,
            icon: $tags-dark-color-scheme-second-icon,
            icon_hovered: $tags-dark-color-scheme-second-states-hover-icon,
            focused: $tags-dark-color-scheme-second-states-focused,
            disabled: $tags-dark-color-scheme-second-states-disabled-text
        ),
        error: (
            border: $tags-dark-color-scheme-error-border,
            background: $tags-dark-color-scheme-error-background,
            background_disabled: $tags-dark-color-scheme-error-states-disabled-background,
            icon: $tags-dark-color-scheme-error-icon,
            icon_hovered: $tags-dark-color-scheme-error-states-hover-icon,
            focused: $tags-dark-color-scheme-error-states-focused,
            disabled: $tags-dark-color-scheme-error-states-disabled-text
        )
    );

    $toggle: (
        border: $toggle-dark-color-scheme-border,
        background: $toggle-dark-color-scheme-background,

        circle_border: $toggle-dark-color-scheme-circle-border,
        circle_background: $toggle-dark-color-scheme-circle-background,

        focused: $toggle-dark-color-scheme-states-focused-shadow
    );

    $tooltip: (
        background: $tooltip-dark-color-scheme-background,
        color: $tooltip-dark-color-scheme-text,
        shadow: $tooltip-dark-color-scheme-shadow
    );

    $vertical-navbar: (
        background: $vertical-navbar-dark-color-scheme-background,
        color: $vertical-navbar-dark-color-scheme-text,

        toggle-button: $vertical-navbar-dark-color-scheme-toggle-button,

        background_hovered: $vertical-navbar-dark-color-scheme-states-hover-background,
        background_active: $vertical-navbar-dark-color-scheme-states-active-background,
        background_progress: $vertical-navbar-dark-color-scheme-states-progress-background
    );

    @return (
        alert: $alert,
        popup: $popup,
        button: $button,
        card: $card,
        checkbox: $checkbox,
        form-field: $form-field,
        link: $link,
        modal: $modal,
        navbar: $navbar,
        navbar-item: $navbar-item,
        popover: $popover,
        progress-bar: $progress-bar,
        radio: $radio,
        sidepanel: $sidepanel,
        tabs: $tabs,
        tags: $tags,
        toggle: $toggle,
        tooltip: $tooltip,
        vertical-navbar: $vertical-navbar,
    );
}



@function mc-contrast($palette, $hue) {
    @return map-get(map-get($palette, contrast), $hue);
}

@function mc-palette($base-palette, $default) {
    $result: map_merge($base-palette, (default: $default));

    // For each hue in the palette, add a "-contrast" color to the map.
    @each $hue, $color in $base-palette {
        $result: map_merge($result, ('#{$hue}-contrast': mc-contrast($base-palette, $hue)));
    }

    @return $result;
}

@function mc-color($palette, $hue: default, $opacity: null) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return mc-color($palette, default, $hue);
    }

    $color: map-get($palette, $hue);
    $opacity: if($opacity == null, opacity($color), $opacity);

    @return rgba($color, $opacity);
}

$light-primary: mc-palette($light-color-scheme-primary-palette, $light-color-scheme-primary-default);
$light-second: mc-palette($light-color-scheme-second-palette, $light-color-scheme-second-default);
$light-error: mc-palette($light-color-scheme-error-palette, $light-color-scheme-error-default);

$light-info: mc-palette($light-color-scheme-info-palette, $light-color-scheme-info-default);
$light-success: mc-palette($light-color-scheme-success-palette, $light-color-scheme-success-default);
$light-warning: mc-palette($light-color-scheme-warning-palette, $light-color-scheme-warning-default);

@function mc-light-theme(
    $primary: $light-primary,
    $second: $light-second,
    $error: $light-error,
    $info: $light-info,
    $success: $light-success,
    $warning: $light-warning
) {
    $states: (
        focused-color: $light-color-scheme-states-focused-color,
        selected-color: $light-color-scheme-states-selected-color,
        pressed-shadow: $light-color-scheme-states-pressed-shadow,
        disabled-opacity: $light-color-scheme-states-disabled-opacity
    );

    $foreground: (
        text: $light-color-scheme-foreground-text,
        text-less-contrast: $light-color-scheme-foreground-text-less-contrast,
        text-disabled: $light-color-scheme-foreground-text_disabled,
        divider: $light-color-scheme-foreground-divider,
        border: $light-color-scheme-foreground-border,
        icon: $light-color-scheme-foreground-icon,
    );

    $background: (
        background: $light-color-scheme-background-background,
        background-disabled: $light-color-scheme-background-background-disabled,
        overlay-hover: $light-color-scheme-background-overlay-hover,
        overlay-active: $light-color-scheme-background-overlay-active,
        overlay-disabled: $light-color-scheme-background-overlay-disabled
    );

    $theme: (
        is-dark: false,

        primary: $primary,
        second: $second,
        error: $error,

        foreground: $foreground,
        background: $background,

        warning: $warning,
        success: $success,
        info: $info,

        states: $states
    );

    @return map_merge($theme, (components: mc-light-theme-components($theme)));
}

$dark-primary: mc-palette($dark-color-scheme-primary-palette, $dark-color-scheme-primary-default);
$dark-second: mc-palette($dark-color-scheme-second-palette, $dark-color-scheme-second-default);
$dark-error: mc-palette($dark-color-scheme-error-palette, $dark-color-scheme-error-default);

$dark-info: mc-palette($dark-color-scheme-info-palette, $dark-color-scheme-info-default);
$dark-success: mc-palette($dark-color-scheme-success-palette, $dark-color-scheme-success-default);
$dark-warning: mc-palette($dark-color-scheme-warning-palette, $dark-color-scheme-warning-default);

@function mc-dark-theme(
    $primary: $dark-primary,
    $second: $dark-second,
    $error: $dark-error,
    $info: $dark-info,
    $success: $dark-success,
    $warning: $dark-warning
) {
    $states: (
        focused-color: $dark-color-scheme-states-focused-color,
        selected-color: $dark-color-scheme-states-focused-color,
        pressed-shadow: $dark-color-scheme-states-pressed-shadow,
        disabled-opacity: $dark-color-scheme-states-disabled-opacity
    );

    $background: (
        background: $dark-color-scheme-background-background,
        background-disabled: $dark-color-scheme-background-background-disabled,
        overlay-hover: $dark-color-scheme-background-overlay-hover,
        overlay-active: $dark-color-scheme-background-overlay-active,
        overlay-disabled: $dark-color-scheme-background-overlay-disabled
    );

    $foreground: (
        text: $dark-color-scheme-foreground-text,
        text-less-contrast: $dark-color-scheme-foreground-text-less-contrast,
        text-disabled: $dark-color-scheme-foreground-text_disabled,
        divider: $dark-color-scheme-foreground-divider,
        border: $dark-color-scheme-foreground-border,
        icon: $dark-color-scheme-foreground-icon,
    );

    $theme: (
        is-dark: true,

        primary: $primary,
        second: $second,
        error: $error,

        foreground: $foreground,
        background: $background,

        warning: $warning,
        success: $success,
        info: $info,

        states: $states
    );

    @return map_merge($theme, (components: mc-dark-theme-components($theme)));
}



@mixin mc-pseudo-checkbox-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $second: map-get($theme, second);

    $checkbox: map-get(map-get($theme, components), checkbox);

    .mc-pseudo-checkbox {
        border-color: mc-color($second);
        background-color: map-get($background, background);

        & .mc-checkbox-checkmark,
        & .mc-checkbox-mixedmark {
            color: white;
        }

        &.mc-checked {
            border-color: map-get($checkbox, state-checked-border);

            background: map-get($checkbox, state-checked-background);
        }

        &.mc-disabled {
            border-color: map-get($foreground, border);

            background-color: map-get($background, background-disabled);

            .mc-checkbox-checkmark,
            .mc-checkbox-mixedmark {
                color: map-get($foreground, text-disabled);
            }
        }
    }
}




$typography-font-weight-values: (
    thin: 100,
    light: 300,
    regular: 400,
    medium: 500,
    bold: 700,
    black: 900
) !default;


// TODO add caption-height
$fonts: (
    base: (
        font-family: $font-family-base
    ),
    monospace: (
        font-family: $font-family-monospace
    )
);





@function mc-typography-level(
    $font-size,
    $line-height: $font-size,
    $letter-spacing: normal,
    $font-weight: normal,
    $font-family: null,
    $text-transform: null
) {
    @return (
        font-size: $font-size,
        line-height: $line-height,
        font-weight: $font-weight,
        font-family: $font-family,
        letter-spacing: $letter-spacing,
        text-transform: $text-transform
    );
}

@function _mc-get-type-value($config, $level, $name) {
    @return map-get(map-get($config, $level), $name);
}

@function mc-font-size($config, $level) {
    @return _mc-get-type-value($config, $level, font-size);
}

@function mc-line-height($config, $level) {
    @return _mc-get-type-value($config, $level, line-height);
}

@function mc-font-weight($config, $level) {
    @return _mc-get-type-value($config, $level, font-weight);
}

@function mc-letter-spacing($config, $level) {
    @return _mc-get-type-value($config, $level, letter-spacing);
}

@function mc-text-transform($config, $level) {
    @return _mc-get-type-value($config, $level, text-transform);
}

// Gets the font-family from a typography config and removes the quotes around it.
@function mc-font-family($config, $level: null) {
    $font-family: map-get($config, font-family);

    @if $level != null {
        $font-family: _mc-get-type-value($config, $level, font-family);
    }

    // Guard against unquoting non-string values, because it's deprecated.
    @return if(type-of($font-family) == string, unquote($font-family), $font-family);
}

@mixin mc-typography-level-to-styles($config, $level) {
    $font-size: mc-font-size($config, $level);
    $font-weight: mc-font-weight($config, $level);
    $line-height: mc-line-height($config, $level);
    $font-family: mc-font-family($config, $level);
    $text-transform: mc-text-transform($config, $level);

    font: $font-weight #{$font-size}/#{$line-height} $font-family;
    letter-spacing: mc-letter-spacing($config, $level);
    text-transform: mc-text-transform($config, $level);
}

@mixin mc-base-typography($config) {
    .mc-display-1 {
        @include mc-typography-level-to-styles($config, display-1);
    }

    .mc-display-2 {
        @include mc-typography-level-to-styles($config, display-2);
    }

    .mc-display-3 {
        @include mc-typography-level-to-styles($config, display-3);
    }

    .mc-headline {
        @include mc-typography-level-to-styles($config, headline);
    }

    .mc-subheading {
        @include mc-typography-level-to-styles($config, subheading);
    }

    .mc-title {
        @include mc-typography-level-to-styles($config, title);
    }

    .mc-body {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-body_strong {
        @include mc-typography-level-to-styles($config, body-strong);
    }

    .mc-body_caps {
        @include mc-typography-level-to-styles($config, body-caps);
    }

    .mc-body_mono {
        @include mc-typography-level-to-styles($config, body-mono);
    }

    .mc-caption {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-caption_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }

    .mc-caption_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-small-text {
        @include mc-typography-level-to-styles($config, small-text);
    }

    .mc-extra-small-text {
        @include mc-typography-level-to-styles($config, extra-small-text);
    }
}



@function mc-typography-config(
    $font-family: map-get(map-get($fonts, base), font-family),
    $font-family-mono: map-get(map-get($fonts, monospace), font-family)
) {
    $typography: map-get($mosaic, typography);

    $config: (
        display-1:          map-get($typography, display-1),
        display-2:          map-get($typography, display-2),
        display-3:          map-get($typography, display-3),

        headline:           map-get($typography, headline),
        subheading:         map-get($typography, subheading),
        title:              map-get($typography, title),

        body:               map-get($typography, body),
        body-strong:        map-get($typography, body-strong),
        body-caps:          map-get($typography, body-caps),
        body-mono:          map-get($typography, body-mono),

        caption:            map-get($typography, caption),
        caption-caps:       map-get($typography, caption-caps),
        caption-mono:       map-get($typography, caption-mono),

        small-text:         map-get($typography, small-text),
        extra-small-text:   map-get($typography, extra-small-text)
    );

    @each $key, $level in $config {
        @if map-get($level, font-family) == null {
            $new-level: map-merge($level, (font-family: $font-family));
            $config: map-merge($config, ($key: $new-level));
        }
    }

    // Add the base font family to the config.
    @return map-merge($config, (font-family: $font-family));
}





.mc-alert {
    display: flex;
    align-items: baseline;

    vertical-align: top;
    text-align: left;

    border: var(--mc-alert-size-border-width, $alert-size-border-width) solid transparent;
    border-radius: var(--mc-alert-size-border-radius, $alert-size-border-radius);

    .mc-link {
        padding-left: 0;
    }

    .mc-alert__icon {
        margin-right: var(--mc-alert-size-icon-margin, $alert-size-icon-margin);
    }

    padding: {
        right: calc(
            var(--mc-alert-size-horizontal-padding, #{$alert-size-horizontal-padding}) -
            var(--mc-alert-size-border-width, #{$alert-size-border-width})
        );
        left: calc(
            var(--mc-alert-size-horizontal-padding, #{$alert-size-horizontal-padding}) -
            var(--mc-alert-size-border-width, #{$alert-size-border-width})
        );
    };

    &:not(.mc-alert_small) {
        padding: {
            top: var(--mc-alert-size-vertical-padding, $alert-size-vertical-padding);
            bottom: var(--mc-alert-size-vertical-padding, $alert-size-vertical-padding);
        };
    }

    &.mc-alert_small {
        padding: {
            top: var(--mc-alert-size-small-vertical-padding, $alert-size-small-vertical-padding);
            bottom: var(--mc-alert-size-small-vertical-padding, $alert-size-small-vertical-padding);
        };
    }

    &.mc-alert_dismissible {
        padding-right: calc(
            var(--mc-alert-size-right-padding-dismissible, #{$alert-size-close-button-width}) +
            var(--mc-alert-size-horizontal-padding, #{$alert-size-horizontal-padding})
        );
    }
}

.mc-alert_dismissible {
    position: relative;

    .mc-alert__close {
        position: absolute;

        z-index: 10;
        right: 15px;

        border: 1px solid transparent;
        outline: 0;

        background: transparent;

        padding: 0;

        cursor: pointer;
        text-align: center;
    }

    &.mc-alert_small {
        .mc-alert__close {
            top: 10px;
        }
    }

    &:not(.mc-alert_small) {
        .mc-alert__close {
            top: 14px;
        }
    }
}

@mixin alert-theme($alert) {
    background-color: map-get($alert, background);
    border-color: map-get($alert, border);

    .mc-alert__icon {
        color: map-get($alert, icon);
    }
}

@mixin mc-alert-theme($theme) {
    $foreground: map-get($theme, foreground);

    $alert: map-get(map-get($theme, components), alert);

    $is-dark: map-get($theme, is-dark);

    .mc-alert__close:focus {
        outline: none;
    }

    .mc-alert {
        color: map-get($foreground, text);
    }

    .mc-alert_error {
        @include alert-theme(map-get($alert, error));
    }

    .mc-alert_warning {
        @include alert-theme(map-get($alert, warning));
    }

    .mc-alert_success {
        @include alert-theme(map-get($alert, success));
    }

    .mc-alert_info {
        @include alert-theme(map-get($alert, info));
    }

    .mc-alert:not(.mc-alert_error):not(.mc-alert_warning):not(.mc-alert_success):not(.mc-alert_info) {
        @include alert-theme(map-get($alert, default));
    }
}

@mixin mc-alert-typography($config) {
    .mc-alert:not(.mc-alert_small) {
        @include mc-typography-level-to-styles($config, $alert-font-default-body);

        header {
            @include mc-typography-level-to-styles($config, $alert-font-default-header);
        }
    }

    .mc-alert.mc-alert_small {
        @include mc-typography-level-to-styles($config, $alert-font-small-body);

        header {
            @include mc-typography-level-to-styles($config, $alert-font-small-header);
        }

        .mc-link__text {
            @include mc-typography-level-to-styles($config, $alert-font-small-body);
        }
    }

    .mc-icon {
        letter-spacing: unset;
    }
}






.mc-badge {
    display: inline-block;

    vertical-align: middle;

    min-width: var(--mc-badge-size-min-width, $badge-size-min-width);

    padding: var(--mc-badge-size-padding, $badge-size-padding);

    border: {
        width: var(--mc-badge-size-border-width, $badge-size-border-width);
        style: solid;
        radius: var(--mc-badge-size-border-radius, $badge-size-border-radius);
    }

    text-align: center;
    white-space: nowrap;
}


@mixin mc-badge-color($palette, $is-dark) {
    color: white;

    $color: mc-color($palette, if($is-dark, 700, 500));

    border-color: $color;
    background-color: $color;
}

@mixin mc-badge-theme($theme) {
    $foreground: map-get($theme, foreground);

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);
    $info: map-get($theme, info);
    $success: map-get($theme, success);
    $warning: map-get($theme, warning);

    $is-dark: map-get($theme, is-dark);

    .mc-badge {
        color: map-get($foreground, text);
        border-color: mc-color($second, 400);
    }

    .mc-badge_light {
        $color: mc-color($second, if($is-dark, 400, 100));

        border-color: $color;
        background-color: $color;
    }

    .mc-badge_second {
        @include mc-badge-color($second, $is-dark);
    }

    .mc-badge_primary {
        @include mc-badge-color($primary, $is-dark);
    }

    .mc-badge_error {
        @include mc-badge-color($error, $is-dark);
    }

    .mc-badge_info {
        @include mc-badge-color($info, $is-dark);
    }

    .mc-badge_success {
        @include mc-badge-color($success, $is-dark);
    }

    .mc-badge_warning {
        @include mc-badge-color($warning, $is-dark);
    }
}

@mixin mc-badge-typography($config) {
    .mc-badge {
        @include mc-typography-level-to-styles($config, $badge-font-default);
    }

    .mc-badge_caps {
        @include mc-typography-level-to-styles($config, $badge-font-caps);
    }
}





@mixin mc-autocomplete-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-autocomplete-panel {
        @include popup-params($theme);

        color: mc-color($foreground, text);

        .mc-selected {
            $popup: map-get(map-get($theme, components), popup);

            background-color: map-get($popup, background);
        }
    }
}





@mixin mc-button-color($params) {
    color: map-get($params, color);
    border-color: map-get($params, border);
    background: map-get($params, background);

    .mc-icon {
        color: map-get($params, icon);
    }

    &:active,
    &.mc-active {
        border-color: map-get($params, active_border);
        background: map-get($params, active_background);
    }

}

@mixin mc-button-theme($theme) {
    $background: map-get($theme, background);

    $button: map-get(map-get($theme, components), button);

    .mc-button-overlay {
        background: transparent;
    }

    .mc-button,
    .mc-icon-button {
        -webkit-font-smoothing: antialiased;

        &.mc-primary {
            @include mc-button-color(map-get($button, primary));
        }

        &.mc-second {
            @include mc-button-color(map-get($button, second));
        }

        &.mc-error {
            @include mc-button-color(map-get($button, error));
        }

        &:hover,
        &.mc-hover {
            & .mc-button-overlay {
                background: map-get($background, overlay-hover);
            }
        }

        &:active,
        &.mc-active {
            box-shadow: map-get($button, active-shadow);
        }

        &.mc-primary,
        &.mc-second,
        &.mc-error {
            &.cdk-keyboard-focused {
                border-color: map-get(map-get($theme, states), focused-color);
                box-shadow:
                    inset 0 0 0 1px map-get($background, background),
                    0 0 0 1px map-get(map-get($theme, states), focused-color);
            }
        }

        &.mc-button_transparent {
            border-color: transparent;
            background-color: transparent;

            &:hover,
            &.mc-hover {
                & .mc-button-overlay {
                    background: map-get($background, overlay-hover);
                }
            }

            &:active,
            &.mc-active {
                border-color: transparent;
                background-color: transparent;
                box-shadow: none;

                & .mc-button-overlay {
                    background: map-get($background, overlay-active);
                }
            }

            &.mc-disabled,
            &[disabled] {
                border-color: transparent;
            }
        }

        &.mc-disabled,
        &[disabled] {
            opacity: map-get(map-get($theme, states), disabled-opacity);
        }
    }
}

@mixin mc-button-typography($config) {
    .mc-button,
    .mc-icon-button {
        @include mc-typography-level-to-styles($config, $button-font-default);

        &.mc-primary {
            @include mc-typography-level-to-styles($config, $button-font-primary);
        }
    }

    .mc-icon-button.mc-button-wrapper {
        .mc-icon {
            line-height: mc-line-height($config, body);
        }
    }
}




@mixin mc-checkbox-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);

    $checkbox: map-get(map-get($theme, components), checkbox);

    .mc-checkbox-frame {
        border-color: map-get($checkbox, border);

        & .mc-checkbox-checkmark,
        & .mc-checkbox-mixedmark {
            color: white;
        }
    }

    .mc-checkbox {
        color: map-get($foreground, text);

        &:hover {
            .mc-checkbox-frame {
                background: map-get($background, overlay-hover);
            }
        }

        &.mc-checked,
        &.mc-indeterminate {
            .mc-checkbox-frame {
                border-color: map-get($checkbox, state-checked-border);

                background: map-get($checkbox, state-checked-background);
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            .mc-checkbox-frame {
                border-color: map-get($foreground, text-disabled);

                background-color: map-get($background, background-disabled);

                & .mc-checkbox-checkmark,
                & .mc-checkbox-mixedmark {
                    color: map-get($foreground, text-disabled);
                }
            }
        }

        & .mc-checkbox-input.cdk-keyboard-focused {
            + .mc-checkbox-frame {
                border-color: map-get($checkbox, state-focused-border);

                box-shadow: map-get($checkbox, state-focused-shadow);
            }
        }
    }
}

@mixin mc-checkbox-typography($config) {
    .mc-checkbox {
        @include mc-typography-level-to-styles($config, $checkbox-font-default);
    }
}






$mc-datepicker-selected-fade-amount: 0.6;
$mc-datepicker-today-fade-amount: 0.2;

@mixin _mc-datepicker-color($color) {
    .mc-calendar__body-cell-content.mc-selected {
        background: $color;
    }

    .mc-calendar__body_disabled > .mc-selected {
        // todo background-color: fade-out($color, $mc-datepicker-selected-fade-amount);
        background-color: $color;
    }
}

@mixin mc-datepicker-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    .mc-calendar__table-header {
        color: mc-color($second, 400);
    }

    .mc-datepicker-toggle__button.mc-icon-button {
        border-color: transparent;
        border-radius: 0;
        background: transparent;
        opacity: 1;

        .mc-icon {
            color: mc-color($foreground, icon);
        }
    }

    .mc-calendar__table-header-divider::after {
        background: map-get($foreground, border);
    }

    .mc-calendar__body-label {
        color: mc-color($foreground, icon);
    }

    .mc-calendar__body-cell-content {
        color: map-get($foreground, text);
        border-color: transparent;
    }

    .mc-calendar__body_disabled > .mc-calendar__body-cell-content:not(.mc-selected) {
        color: map-get($foreground, text-disabled);
    }

    .cdk-keyboard-focused .mc-calendar__body_active,
    .cdk-program-focused .mc-calendar__body_active {
        & > .mc-calendar__body-cell-content {
            border-color: map-get(map-get($theme, states), focused-color);
            box-shadow: 0 0 0 1px map-get(map-get($theme, states), focused-color);
        }
    }

    .mc-calendar__body-cell:not(.mc-calendar__body_disabled):hover {
        & > .mc-calendar__body-cell-content:not(.mc-selected) {
            background-color: mc-color($second, A60);
        }
    }

    .mc-calendar__controls {
        .mc-button,
        .mc-icon-button {
            border-radius: 0;
            border-color: transparent;
            background-color: transparent;

            .mc-button-overlay {
                z-index: -1;
            }

            &:hover {
                background: mc-color($second, A60);
            }
        }
    }

    .mc-calendar__body-today {
        color: mc-color($primary);
    }

    .mc-calendar__body_disabled > .mc-calendar__body-today:not(.mc-selected) {
        // todo border-color: fade-out(map-get($foreground, text), $mc-datepicker-today-fade-amount);
        border-color: map-get($background, background-disabled);
    }

    @include _mc-datepicker-color(map-get(map-get($theme, states), selected-color));

    .mc-datepicker__content {
        @include popup-params($theme);

        color: map-get($foreground, text);
    }

    .mc-active {
        color: mc-color($primary);
    }
}

@mixin mc-datepicker-typography($config) {
    .mc-calendar {
        @include mc-typography-level-to-styles($config, $datepicker-calendar-font-default);
    }

    .mc-calendar__table-header th {
        @include mc-typography-level-to-styles($config, $datepicker-calendar-font-header);
    }

    .mc-calendar__body-label {
        @include mc-typography-level-to-styles($config, $datepicker-body-font-label);
        line-height: mc-font-size($config, caption);
    }

    .mc-calendar__body-today {
        @include mc-typography-level-to-styles($config, $datepicker-body-font-today);
    }
}






@mixin mc-dropdown-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-dropdown__panel {
        @include popup-params($theme);
    }

    .mc-dropdown__item {
        @include user-select(text);

        color: map-get($foreground, text);

        background: transparent;

        &:hover {
            background: map-get($background, overlay-hover);
        }

        &.cdk-keyboard-focused {
            outline: map-get(map-get($theme, states), focused-color) solid 2px;
            outline-offset: -2px;

            &.mc-link {
                outline-offset: -2px;
            }
        }

        &.mc-selected {
            background: map-get(map-get($theme, states), selected-color);
        }

        &[disabled],
        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            background: transparent;
        }

        .mc-dropdown__item-caption {
            color: map-get($foreground, text-less-contrast);
        }
    }

    .mc-dropdown__item_highlighted:not([disabled]):not(.mc-disabled) {
        background: map-get($background, overlay-hover);
    }
}

@mixin mc-dropdown-typography($config) {
    .mc-dropdown__item,
    .mc-dropdown__content {
        @include mc-typography-level-to-styles($config, $dropdown-item-font-default);
    }

    .mc-dropdown__item-caption {
        @include mc-typography-level-to-styles($config, $dropdown-item-font-caption);
    }
}






@mixin mc-form-field-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $form-field: map-get(map-get($theme, components), form-field);

    .mc-form-field {
        background-color: map-get($form-field, background);

        & .mc-form-field__hint {
            color: map-get($foreground, text-less-contrast);
        }

        &:not(.mc-form-field_without-borders) {
            .mc-form-field__container {
                border-color: map-get($form-field, border);
            }

            &:hover .mc-form-field__container {
                border-color: map-get($form-field, state-hover-border);
            }

            &.ng-invalid {
                & .mc-form-field__container {
                    border-color: map-get($form-field, state-invalid-border);
                    background-color: map-get($form-field, state-invalid-background);

                    .mc-input,
                    .mc-textarea {
                        color: mc-color($error);
                    }
                }

                & .mc-form-field__hint {
                    color: mc-color($error);
                }
            }

            &.mc-focused {
                &:not(.ng-invalid) .mc-form-field__container {
                    border-color: map-get(map-get($theme, states), focused-color);
                    box-shadow: 0 0 0 1px map-get(map-get($theme, states), focused-color);
                }

                &.ng-invalid .mc-form-field__container {
                    box-shadow: 0 0 0 1px mc-color($error);
                }
            }

            /* stylelint-disable no-descending-specificity */
            &.mc-disabled .mc-form-field__container {
                // todo border-color: mix(map-get($foreground, border), mc-color($background, overlay-disabled));
                border-color: map-get($foreground, text-disabled);

                // todo background-color: mix(
                //    map-get($background, background-disabled), mc-color($background, overlay-disabled)
                //);
                background-color: map-get($background, background-disabled);

                .mc-icon,
                .mc-input,
                .mc-textarea {
                    color: map-get($foreground, text-disabled);
                }
            }
            /* stylelint-enable no-descending-specificity */
        }
    }
}

@mixin mc-form-field-typography($config) {
    .mc-form-field {
        @include mc-typography-level-to-styles($config, $form-field-font-default);
    }

    .mc-form-field__hint {
        @include mc-typography-level-to-styles($config, $form-field-hint-font-default);
    }
}





@mixin mc-input-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-input {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-input-typography($config) {
    .mc-input {
        @include mc-typography-level-to-styles($config, $input-font-default);
    }

    .mc-input.mc-input_monospace {
        @include mc-typography-level-to-styles($config, $input-font-monospace);
    }
}





@mixin mc-link-theme($theme) {
    $foreground: map-get($theme, foreground);

    $link: map-get(map-get($theme, components), link);

    .mc-link {
        color: map-get($link, text);

        text-decoration: none;

        cursor: pointer;

        &:focus {
            outline: none;
        }

        &:visited {
            color: map-get($link, text);
        }

        &:hover {
            color: map-get($link, state-hover-text);
        }

        &.cdk-keyboard-focused {
            outline: map-get($link, state-focused-outline) solid 2px;
            outline-offset: 2px;
        }

        & .mc-link__icon {
            color: inherit;
        }

        & .mc-link__text:not(:first-child) {
            margin-left: $link-size-icon-margin;
        }

        & .mc-link__text:not(:last-child) {
            margin-right: $link-size-icon-margin;
        }

        &.mc-link_dashed .mc-link__text {
            $dashed-link: map-get($link, dashed);

            border-bottom-style: dashed;
            border-bottom-width: 1px;
            border-bottom-color: map-get($link, border-bottom);

            &:visited {
                border-bottom-color: map-get($link, border-bottom);
            }

            &:hover {
                border-bottom-color: map-get($link, state-hover-border-bottom);
            }
        }

        /* stylelint-disable no-descending-specificity */
        &.mc-link_underlined .mc-link__text {
            $underlined-link: map-get($link, underlined);

            border-bottom-style: solid;
            border-bottom-width: 1px;
            border-bottom-color: map-get($link, border-bottom);

            &:visited {
                border-bottom-color: map-get($link, border-bottom);
            }

            &:hover {
                border-bottom-color: map-get($link, state-hover-border-bottom);
            }
        }
        /* stylelint-enable no-descending-specificity */

        &[disabled] {
            color: map-get($foreground, text-disabled);

            cursor: default;
            pointer-events: none;

            &.mc-link_underlined .mc-link__text {
                border-bottom-color: rgba(map-get($foreground, text-disabled), 0.64);
            }

            &.mc-link_dashed .mc-link__text {
                border-bottom-color: map-get($foreground, text-disabled);
            }
        }
    }
}

@mixin mc-link-typography($config) {
    .mc-link {
        @include mc-typography-level-to-styles($config, $link-font-default);
    }
}




@mixin mc-list-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-list-item,
    .mc-list-option {
        color: map-get($foreground, text);
    }

    .mc-list-option {
        outline: none;

        &:hover {
            background: map-get($background, overlay-hover);
        }

        &.mc-focused {
            border-color: map-get(map-get($theme, states), focused-color);
        }

        &.mc-selected {
            background: map-get(map-get($theme, states), selected-color);
        }

        &.mc-disabled,
        &[disabled] {
            background: transparent;

            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-list-typography($config) {
    .mc-list-item {
        @include mc-typography-level-to-styles($config, $list-font-item);
    }
}





@mixin mc-modal-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $modal: map-get(map-get($theme, components), modal);
    $popup: map-get(map-get($theme, components), popup);

    $border-color: if(map-get($theme, is-dark), map-get($popup, divider), transparent);

    .mc-modal {
        .mc-modal-content {
            // У модалки должен быть фон background. Чтобы поповеры и дропдауны было видно поверх модалки
            background-color: map-get($background, background);

            box-shadow: map-get($modal, shadow);
        }

        .mc-modal-title {
            color: map-get($foreground, text);
        }

        .mc-modal-header {
            border-bottom-width: var(--mc-modal-size-border-width, $modal-size-border-width);
            border-bottom-style: solid;
            border-bottom-color: map-get($popup, divider);
        }

        .mc-modal-footer {
            border-top: var(--mc-modal-size-border-width, $modal-size-border-width) solid $border-color;

            background-color: map-get($popup, footer-background);
        }

        .mc-modal-close {
            border: var(--mc-modal-size-border-width, $modal-size-border-width) solid transparent;

            &:hover {
                .mc-button-overlay {
                    background: map-get($background, overlay-hover);
                }

                .mc-icon {
                    color: inherit;
                }
            }
        }
    }

    .mc-modal-mask {
        background-color: map-get($modal, background-mask);
    }

    .mc-confirm {
        .mc-confirm-btns {
            border-top: var(--mc-modal-size-border-width, $modal-size-border-width) solid $border-color;

            background-color: map-get($popup, footer-background);
        }
    }
}

@mixin mc-modal-typography($config) {
    .mc-modal-title {
        @include mc-typography-level-to-styles($config, $modal-header-font-default);
    }

    .mc-modal-body {
        @include mc-typography-level-to-styles($config, $modal-body-font-default);
    }
}





@mixin mc-navbar-theme($theme) {
    $navbar: map-get(map-get($theme, components), navbar);

    .mc-navbar {
        background-color: map-get($navbar, background);

        .mc-navbar-title,
        .mc-icon {
            color: map-get($navbar, color);
        }
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            opacity: map-get($navbar, opacity);
        }
    }

    .mc-navbar-item {
        $navbar-item: map-get(map-get($theme, components), navbar-item);

        outline: 0;

        color: map-get($navbar-item, color);

        &:not([disabled]) {
            outline: 0;

            &.cdk-keyboard-focused {
                box-shadow: inset 0 0 0 2px map-get(map-get($theme, states), focused-color);
            }
        }

        &.mc-navbar-item-active {
            background-color: map-get($navbar-item, states-active);
        }

        &:hover:not([disabled]):not(.mc-progress) {
            background-color: map-get($navbar-item, states-hover);
        }

        &.mc-progress:hover:not([disabled]) {
            background-color: map-get($navbar-item, states-progress);
        }

        &[disabled] {
            .mc-navbar-title,
            .mc-icon {
                opacity: map-get($navbar-item, states-disabled-opacity);
            }
        }
    }
}

@mixin mc-navbar-typography($config) {
    .mc-navbar-title {
        @include mc-typography-level-to-styles($config, $navbar-font-title);
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            @include mc-typography-level-to-styles($config, $navbar-brand-font-title);
        }
    }
}





@mixin mc-popover-theme($theme) {
    $foreground: map-get($theme, foreground);

    $popup: map-get(map-get($theme, components), popup);
    $popover: map-get(map-get($theme, components), popover);

    $is-dark: map-get($theme, is-dark);

    $footer-background-color: if($is-dark, map-get($popup, background), map-get($popup, footer-background));

    .mc-popover {
        border-color: map-get($popover, border);
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    }

    .mc-popover__container {
        color: map-get($foreground, text);
        background-color: map-get($popup, background);
    }

    .mc-popover__header {
        border-bottom-color: map-get($popup, divider);
    }

    .mc-popover__header,
    .mc-popover__content {
        background-color: map-get($popup, background);
    }

    .mc-popover__footer {
        background-color: $footer-background-color;
        border-top-color: if($is-dark, map-get($popup, divider), transparent);
    }

    .mc-popover .mc-popover__arrow {
        border-color: map-get($popover, border);
    }

    .mc-popover_placement-top .mc-popover__arrow,
    .mc-popover_placement-top-left .mc-popover__arrow,
    .mc-popover_placement-top-right .mc-popover__arrow {
        background-color: map-get($popup, background);
        border-top-color: map-get($popup, background);
        border-left-color: map-get($popup, background);
    }

    .mc-popover_placement-top .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-top-left .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-top-right .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $footer-background-color;
        border-top-color: $footer-background-color;
        border-left-color: $footer-background-color;
    }

    .mc-popover_placement-right .mc-popover__arrow,
    .mc-popover_placement-right-top .mc-popover__arrow,
    .mc-popover_placement-right-bottom .mc-popover__arrow {
        background-color: map-get($popup, background);
        border-top-color: map-get($popup, background);
        border-right-color: map-get($popup, background);
    }

    .mc-popover_placement-right-bottom .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $footer-background-color;
        border-top-color: $footer-background-color;
        border-right-color: $footer-background-color;
    }

    .mc-popover_placement-left .mc-popover__arrow,
    .mc-popover_placement-left-top .mc-popover__arrow,
    .mc-popover_placement-left-bottom .mc-popover__arrow {
        background-color: map-get($popup, background);
        border-bottom-color: map-get($popup, background);
        border-left-color: map-get($popup, background);
    }

    .mc-popover_placement-left-bottom .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $footer-background-color;
        border-bottom-color: $footer-background-color;
        border-left-color: $footer-background-color;
    }

    .mc-popover_placement-bottom .mc-popover__arrow,
    .mc-popover_placement-bottom-left .mc-popover__arrow,
    .mc-popover_placement-bottom-right .mc-popover__arrow,
    .mc-popover_placement-bottom .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-bottom-left .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-bottom-right .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: map-get($popup, background);
        border-right-color: map-get($popup, background);
        border-bottom-color: map-get($popup, background);
    }
}

@mixin mc-popover-typography($config) {
    .mc-popover__header {
        @include mc-typography-level-to-styles($config, $popover-header-font-default);
    }

    .mc-popover__content {
        @include mc-typography-level-to-styles($config, $popover-font-default);
    }

    .mc-popover__footer {
        @include mc-typography-level-to-styles($config, $popover-footer-font-default);
    }
}






@mixin mc-radio-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $radio: map-get(map-get($theme, components), radio);

    .mc-radio-group {
        color: map-get($foreground, text);
    }

    .mc-radio-button {
        & .mc-radio-button__outer-circle {
            border-color: map-get($radio, outer-circle_border);
            background: map-get($background, background);
        }

        & .mc-radio-button__inner-circle {
            border-color: map-get($radio, inner-circle_border);
        }

        &:hover {
            & .mc-radio-button__outer-circle {
                background: map-get($background, overlay-hover);
            }
        }

        &.mc-selected {
            & .mc-radio-button__outer-circle {
                border-color: map-get($radio, outer-circle_checked-state_border);
                background: white;
            }

            & .mc-radio-button__inner-circle {
                display: block;
                border-color: map-get($radio, inner-circle_checked-state_border)
            }
        }

        &.cdk-keyboard-focused {
            & .mc-radio-button__outer-circle {
                border-color: map-get($radio, outer-circle_focused-state_border);
                box-shadow: map-get($radio, outer-circle_focused-state_shadow);
            }

            & .mc-radio-button__inner-circle {
                box-shadow: map-get($radio, inner-circle_focused-state_shadow);
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            & .mc-radio-label {
                cursor: default;
            }

            & .mc-radio-button__outer-circle {
                border-color: map-get($foreground, border);
                background: map-get($background, background-disabled);
            }

            & .mc-radio-button__inner-circle {
                border-color: map-get($background, background-disabled);
                background: map-get($foreground, text-disabled);
            }
        }
    }
}

@mixin mc-radio-typography($config) {
    .mc-radio-group {
        @include mc-typography-level-to-styles($config, $radio-font-default);
    }
}






@mixin mc-select-theme($theme) {
    $foreground: map-get($theme, foreground);

    $error: map-get($theme, error);

    $popup: map-get(map-get($theme, components), popup);

    .mc-select {
        color: map-get($foreground, text);

        &.ng-invalid {
            color: mc-color($error);
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);
        }
    }

    .mc-select__placeholder {
        color: map-get($foreground, text-disabled);
    }

    .mc-select__panel {
        @include popup-params($theme);
    }

    .mc-select__search-container {
        border-bottom-color: map-get($popup, border);
    }

    .mc-select__no-options-message {
        color: map-get($foreground, text-less-contrast);
    }
}

@mixin mc-select-typography($config) {
    .mc-select {
        @include mc-typography-level-to-styles($config, $select-font-default);
    }

    .mc-select__panel {
        @include mc-typography-level-to-styles($config, $select-panel-font-default);
    }
}





@mixin mc-sidepanel-theme($theme) {
    $background: map-get($theme, background);

    $sidepanel: map-get(map-get($theme, components), sidepanel);
    $popup: map-get(map-get($theme, components), popup);

    $is-dark: map-get($theme, is-dark);

    .mc-sidepanel-content {
        background-color: map-get($background, background);
    }

    .mc-sidepanel-container_shadowed {
        &.mc-sidepanel-container_right {
            .mc-sidepanel-content {
                box-shadow: 0 0 0 1px map-get($sidepanel, border), -6px 0 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_left {
            .mc-sidepanel-content {
                box-shadow: 0 0 0 1px map-get($sidepanel, border), 6px 0 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_bottom {
            .mc-sidepanel-content {
                box-shadow: 0 0 0 1px map-get($sidepanel, border), 0 -6px 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_top {
            .mc-sidepanel-content {
                box-shadow: 0 0 0 1px map-get($sidepanel, border), 0 6px 12px 0 rgba(0, 0, 0, 0.24);
            }
        }
    }

    .mc-sidepanel-header {
        border-bottom: 1px solid map-get($popup, divider);
    }

    .mc-sidepanel-footer {
        border-top: 1px solid  if($is-dark, map-get($popup, divider), transparent);
        background-color: map-get($popup, footer-background);
    }
}

@mixin mc-sidepanel-typography($config) {
    .mc-sidepanel-title {
        @include mc-typography-level-to-styles($config, $sidepanel-header-font-default);
    }

    .mc-sidepanel-container {
        @include mc-typography-level-to-styles($config, $sidepanel-font-default);
    }

    .mc-sidepanel-footer {
        @include mc-typography-level-to-styles($config, $sidepanel-footer-font-default);
    }
}





@mixin mc-tabs-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $tabs: map-get(map-get($theme, components), tabs);

    .mc-tab-label,
    .mc-tab-light-label,
    .mc-tab-link {
        color: map-get($foreground, text);

        border-bottom-color: map-get($tabs, border);

        & .mc-tab-overlay {
            background: transparent;
        }

        &:hover .mc-tab-overlay {
            background: map-get($background, overlay-hover);
        }

        &.cdk-keyboard-focused:after {
            border-color: map-get(map-get($theme, states), focused-color);
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            cursor: default;

            background: map-get($background, background-disabled);

            & .mc-tab-overlay {
                background: map-get($background, overlay-disabled);
            }
        }
    }

    .mc-tab-label {
        border: {
            top-color: transparent;
            bottom-color: map-get($tabs, border);
        }

        &.mc-active {
            border: {
                color: map-get($tabs, border);
                bottom-color: transparent;
            }

            & .mc-tab-overlay {
                background: transparent;
            }
        }
    }

    .mc-tab-light-label,
    .mc-tab-link {
        &:hover {
            border-bottom-color: transparent;

            &:before {
                background-color: map-get($tabs, border);
            }
        }

        &.mc-active {
            &:before {
                background-color: map-get($tabs, state-active);
            }

            & .mc-tab-overlay {
                background: transparent;
            }
        }

        &.mc-disabled {
            &:before {
                background-color: map-get($tabs, border);
            }
        }
    }
}

@mixin mc-tabs-typography($config) {
    .mc-tab-label,
    .mc-tab-light-label,
    .mc-tab-link {
        @include mc-typography-level-to-styles($config, $tabs-font-default);
    }
}





@mixin mc-tag-color($params) {
    background: map-get($params, background);
    border-color: map-get($params, border);

    &.mc-active,
    &.mc-focused {
        border-color: map-get($params, focused);
        box-shadow: 0 0 0 1px map-get($params, focused);
    }

    & .mc-icon {
        color: map-get($params, icon);

        &:hover {
            cursor: pointer;
            color: map-get($params, icon_hovered);
        }
    }

    &.mc-disabled {
        border-color: map-get($params, background_disabled);
        background: map-get($params, background_disabled);

        color: map-get($params, disabled);

        & .mc-tag-overlay {
            background: transparent;
        }

        & .mc-icon {
            color: inherit;
        }
    }
}


@mixin mc-tag-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $tags: map-get(map-get($theme, components), tags);

    .mc-tag {
        color: map-get($foreground, text);

        &.mc-primary {
            @include mc-tag-color(map-get($tags, primary));
        }

        &.mc-second {
            @include mc-tag-color(map-get($tags, second));
        }

        &.mc-error {
            @include mc-tag-color(map-get($tags, error));
        }

        &:hover,
        &.mc-hovered {
            & .mc-tag-overlay {
                background: map-get($background, overlay-hover);
            }
        }

        .mc-icon {
            color: mc-color($foreground, icon);

            &:hover {
                cursor: pointer;
                color: inherit;
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            border-color: transparent;

            background-color: map-get($background, background-disabled);

            & .mc-tag-overlay {
                background: mc-color($background, overlay-disabled);
            }

            & .mc-icon {
                color: mc-color($foreground, icon);
                cursor: default;
            }
        }
    }

    .mc-tag-input {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-tag-typography($config) {
    .mc-tag:not(.mc-tag_mono):not(.mc-tag_caps) {
        @include mc-typography-level-to-styles($config, $tags-font-default);
    }

    .mc-tag_mono {
        @include mc-typography-level-to-styles($config, $tags-font-mono);
    }

    .mc-tag_caps {
        @include mc-typography-level-to-styles($config, $tags-font-caps);
    }

    .mc-tag-input {
        @include mc-typography-level-to-styles($config, $tag-input-font-default);
    }
}






@mixin mc-textarea-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-textarea {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, text-disabled);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-textarea-typography($config) {
    textarea.mc-textarea {
        @include mc-typography-level-to-styles($config, $textarea-font-default);
    }

    .mc-textarea.mc-textarea_monospace {
        @include mc-typography-level-to-styles($config, $textarea-font-mono);
    }
}





@mixin mc-toggle-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);
    $error: map-get($theme, error);

    $toggle: map-get(map-get($theme, components), toggle);

    .mc-toggle {
        color: map-get($foreground, text);

        .mc-toggle-bar {
            border-color: map-get($toggle, border);

            background: map-get($toggle, background);
        }

        .mc-toggle__circle {
            border-color: map-get($toggle, circle_border);

            background: map-get($toggle, circle_background);
        }

        &:hover {
            & .mc-toggle__overlay {
                background: map-get($background, overlay-hover);
            }
        }

        &.cdk-keyboard-focused {
            & .mc-toggle__overlay {
                box-shadow: map-get($toggle, focused);
            }
        }

        &.mc-active {
            &.mc-primary {
                .mc-toggle-bar {
                    border-color: mc-color($primary);
                    background: mc-color($primary);
                }
            }

            &.mc-error {
                .mc-toggle-bar {
                    border-color: mc-color($error);
                    background: mc-color($error);
                }
            }
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);

            & .mc-toggle__overlay {
                background: mc-color($background, overlay-disabled);
            }
        }
    }
}


@mixin mc-toggle-typography($config) {
    .mc-toggle:not(.mc-toggle_small) {
        @include mc-typography-level-to-styles($config, $toggle-font-default);
    }

    .mc-toggle.mc-toggle_small {
        @include mc-typography-level-to-styles($config, $toggle-small-font-default);
    }
}





@mixin mc-tooltip-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $warning: map-get($theme, warning);

    $tooltip: map-get(map-get($theme, components), tooltip);

    .mc-tooltip-inner {
        color: map-get($tooltip, color);

        box-shadow: map-get($tooltip, shadow);
        background-color: map-get($tooltip, background);
    }

    .mc-tooltip .mc-tooltip-arrow {
        background-color: map-get($tooltip, background);
    }

    .mc-tooltip.mc-tooltip_warning {
        $color: $palette-grey-700;
        $tooltip-color-background: mc-color($warning, 60);
        $border-color: mc-color($warning, 200);

        .mc-tooltip-arrow {
            border: 1px solid transparent;

            background-color: $tooltip-color-background;
        }

        .mc-tooltip-inner {
            box-shadow: map-get($tooltip, shadow);
            border: 1px solid $border-color;

            color: $color;

            background-color: $tooltip-color-background;
        }

        &.mc-tooltip_placement-top .mc-tooltip-arrow {
            border-bottom-color: $border-color;
            border-right-color: $border-color;
        }

        &.mc-tooltip_placement-right .mc-tooltip-arrow {
            border-left-color: $border-color;
            border-bottom-color: $border-color;
        }

        &.mc-tooltip_placement-left .mc-tooltip-arrow {
            border-right-color: $border-color;
            border-top-color: $border-color;
        }

        &.mc-tooltip_placement-bottom .mc-tooltip-arrow {
            border-top-color: $border-color;
            border-left-color: $border-color;
        }
    }
}

@mixin mc-tooltip-typography($config) {
    .mc-tooltip {
        @include mc-typography-level-to-styles($config, $tooltip-font-default);
    }
}






@mixin mc-tree-select-theme($theme) {
    $foreground: map-get($theme, foreground);

    $error: map-get($theme, error);

    .mc-tree-select {
        color: map-get($foreground, text);

        &.ng-invalid {
            color: mc-color($error);
        }

        &.mc-disabled {
            color: map-get($foreground, text-disabled);
        }
    }

    .mc-tree-select__placeholder {
        color: map-get($foreground, text-disabled);
    }

    .mc-tree-select__panel {
        @include popup-params($theme);
    }
}

@mixin mc-tree-select-typography($config) {
    .mc-tree-select,
    .mc-tree-select__panel {
        @include mc-typography-level-to-styles($config, $select-panel-font-default);
    }
}




@mixin mc-tree-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-tree-selection:focus {
        outline: none;
    }

    .mc-tree-option {
        color: map-get($foreground, text);

        &:hover {
            background-color: map-get($background, overlay-hover);
        }

        &.mc-focused {
            border-color: map-get(map-get($theme, states), focused-color);
        }

        &.mc-selected {
            background: map-get(map-get($theme, states), selected-color);
        }

        &[disabled] {
            background-color: transparent;

            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-tree-typography($config) {
    .mc-tree-node,
    .mc-tree-option {
        @include mc-typography-level-to-styles($config, $tree-font-node);
    }
}




@mixin mc-vertical-navbar-theme($theme) {
    $vertical-navbar: map-get(map-get($theme, components), vertical-navbar);

    .mc-vertical-navbar {
        background-color: map-get($vertical-navbar, background);

        :focus {
            outline: 0;
        }

        .cdk-keyboard-focused {
            outline: 2px solid map-get(map-get($theme, states), focused-color);
            outline-offset: -2px;
        }

        .mc-vertical-navbar__toggle-button {
            color: map-get($vertical-navbar, toggle-button);
        }

        .mc-vertical-navbar__header,
        .mc-vertical-navbar__toggle-button {
            &:hover {
                background-color: map-get($vertical-navbar, background_hovered);
            }
        }

        .mc-vertical-navbar__title {
            color: map-get($vertical-navbar, color);
        }

        .mc-vertical-navbar-item {
            color: map-get($vertical-navbar, color);

            &.mc-vertical-navbar__item_active {
                background-color: map-get($vertical-navbar, background_active);
            }

            &:hover:not([disabled]):not(.mc-progress) {
                background-color: map-get($vertical-navbar, background_hovered);
            }

            &.mc-progress:hover:not([disabled]) {
                background-color: map-get($vertical-navbar, background_progress);
            }

            &[disabled] {
                .mc-vertical-navbar__title,
                .mc-icon {
                    opacity: map-get(map-get($theme, states), disabled-opacity);
                }
            }
        }
    }
}

@mixin mc-vertical-navbar-typography($config) {
    .mc-vertical-navbar__header {
        @include mc-typography-level-to-styles($config, $vertical-navbar-font-header);
    }

    .mc-vertical-navbar__item {
        @include mc-typography-level-to-styles($config, $vertical-navbar-item-font-default);
    }
}




@mixin mc-table-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-table {
        & > thead {
            color: map-get($foreground, text-less-contrast);

            & > tr > th {
                border-color: map-get($foreground, divider);
            }
        }

        & > tbody {
            & > tr {
                &:hover {
                    background-color: map-get($background, overlay-hover);
                }

                & > th,
                & > td {
                    color: map-get($foreground, text);
                }
            }
        }

        &.mc-table_bordered {
            & > tbody > tr {
                & th,
                & td {
                    border-color: map-get($foreground, divider);
                }
            }
        }
    }
}

@mixin mc-table-typography($config) {
    .mc-table {
        & > thead {
            & > tr > th {
                font-weight: normal;
            }

            @include mc-typography-level-to-styles($config, $table-font-header);
        }

        & > tbody {
            & > tr > th {
                font-weight: normal;
            }

            @include mc-typography-level-to-styles($config, $table-font-body);
        }
    }
}






@mixin mc-option-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);

    .mc-option {
        color: map-get($foreground, text);

        &:hover:not(.mc-disabled) {
            .mc-option-overlay {
                background: map-get($background, overlay-hover);
            }
        }

        &.mc-active {
            border-color: mc-color($primary);
        }

        &.mc-selected {
            background: map-get(map-get($theme, states), selected-color);
        }

        &.mc-disabled {
            background: transparent;

            color: map-get($foreground, text-disabled);
        }
    }
}

@mixin mc-option-typography($config) {
    .mc-option {
        @include mc-typography-level-to-styles($config, $option-font-default);
    }
}





@mixin mc-optgroup-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-optgroup-label {
        color: map-get($foreground, text);
    }

    .mc-disabled .mc-optgroup-label {
        color: map-get($foreground, text-disabled);
    }
}

@mixin mc-optgroup-typography($config) {
    .mc-optgroup-label {
        @include mc-typography-level-to-styles($config, $optgroup-font-default);
    }
}



@mixin mosaic-typography($config: null) {
    @if $config == null {
        $config: mc-typography-config();
    }

    @include mc-base-typography($config);

    @include mc-alert-typography($config);
    @include mc-badge-typography($config);
    @include mc-button-typography($config);
    @include mc-checkbox-typography($config);
    @include mc-datepicker-typography($config);
    @include mc-dropdown-typography($config);
    @include mc-form-field-typography($config);
    @include mc-input-typography($config);
    @include mc-link-typography($config);
    @include mc-list-typography($config);
    @include mc-modal-typography($config);
    @include mc-navbar-typography($config);
    @include mc-option-typography($config);
    @include mc-optgroup-typography($config);
    @include mc-popover-typography($config);
    @include mc-radio-typography($config);
    @include mc-select-typography($config);
    @include mc-sidepanel-typography($config);
    @include mc-tabs-typography($config);
    @include mc-tag-typography($config);
    @include mc-textarea-typography($config);
    @include mc-toggle-typography($config);
    @include mc-tooltip-typography($config);
    @include mc-tree-select-typography($config);
    @include mc-tree-typography($config);
    @include mc-vertical-navbar-typography($config);
    @include mc-table-typography($config);
}



// Mixin that renders all of the core styles that are not theme-dependent.
@mixin mc-core($typography-config: null) {
    @include mosaic-typography($typography-config);
    @include cdk-a11y();
    @include cdk-overlay();
}

// Mixin that renders all of the core styles that depend on the theme.
@mixin mc-core-theme($theme) {
    @include mc-pseudo-checkbox-theme($theme);

    .mc-app-background {
        $background: map-get($theme, background);
        $foreground: map-get($theme, foreground);

        background-color: mc-color($background, background);
        color: mc-color($foreground, text);
    }

    .mc-theme-loaded-marker {
        display: none;
    }
}









@mixin card-type($card) {
    box-shadow:
        inset -1px 0 0 0 map-get($card, shadow),
        inset 0 1px 0 0 map-get($card, shadow),
        inset 0 -1px 0 0 map-get($card, shadow);

    background-color: map-get($card, background);

    border-left-color: map-get($card, vertical-line);
}

@mixin mc-card-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $card: map-get(map-get($theme, components), card);
    $popup: map-get(map-get($theme, components), popup);

    $is-dark: map-get($theme, is-dark);

    .mc-card {
        color: map-get($foreground, text);

        &.mc-card_error {
            @include card-type(map-get($card, error));
        }

        &.mc-card_warning {
            @include card-type(map-get($card, warning));
        }

        &.mc-card_success {
            @include card-type(map-get($card, success));
        }

        &.mc-card_info {
            @include card-type(map-get($card, info));
        }

        &.mc-card_white {
            background-color: map-get($popup, background);
        }

        &.mc-selected {
            background-color: map-get(map-get($theme, states), selected-color);
        }

        &:not(.mc-card_readonly):hover {
            .mc-card__overlay {
                background: map-get($background, overlay-hover);
            }
        }

        &.cdk-keyboard-focused {
            box-shadow: 0 0 0 2px map-get(map-get($theme, states), focused-color);
        }
    }
}









@mixin mc-icon-theme($theme) {
    $foreground: map-get($theme, foreground);

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $primary-color: mc-color($primary, 400);

    // Дефолтные серые иконки default-icon: лупа в поле, иконки дропдаунов v, все иконки вне полей.
    .mc-icon:not(.mc-icon_light) {
        color: mc-color($foreground, icon);

        &.mc-primary {
            // todo color: mix(mc-color($foreground, icon), $primary-color, 30%);
            color: mc-color($foreground, icon);

            &[disabled],
            &.mc-disabled {
                color: $primary-color;
            }
        }

        &.mc-second {
            color: map-get($foreground, text-less-contrast);

            &[disabled],
            &.mc-disabled {
                color: mc-color($second);
            }
        }

        &.mc-error {
            // todo color: mix(mc-color($foreground, icon), mc-color($error), 30%);
            color: mc-color($foreground, icon);

            &[disabled],
            &.mc-disabled {
                color: mc-color($error);
            }
        }

        &:not(.mc-primary):not(.mc-second):not(.mc-error) {
            &[disabled],
            &.mc-disabled {
                color: mc-color($second);

                cursor: default;
            }
        }
    }

    // Облегченные серые иконки less-contrast-icon нужны тогда, когда действие, которое они делают не дефолтное и
    // не самое важное. Не используются вне инпутов или селектов.
    .mc-icon.mc-icon_light {
        &.mc-primary {
            color: $primary-color;

            &:hover {
                // todo color: mix(map-get($foreground, text), $primary-color);
                color: map-get($foreground, text);
            }
        }

        &.mc-second {
            color: mc-color($second);

            &:hover {
                //todo color: mix(map-get($foreground, text), mc-color($second), 90%);
                color: map-get($foreground, text);
            }
        }

        &.mc-error {
            color: mc-color($error);

            &:hover {
                // todo color: mix(map-get($foreground, text), mc-color($error));
                color: map-get($foreground, text);
            }
        }
    }
}











@mixin mc-progress-bar-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $progress-bar: map-get(map-get($theme, components), progress-bar);

    .mc-progress-bar {
        background-color: map-get($progress-bar, background);

        &.mc-primary .mc-progress-bar__line {
            background-color: mc-color($primary);
        }

        &.mc-second .mc-progress-bar__line {
            background-color: mc-color($second);
        }

        &.mc-error .mc-progress-bar__line {
            background-color: mc-color($error);
        }
    }
}




@mixin mc-progress-spinner-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    .mc-progress-spinner {
        &.mc-primary .mc-progress-spinner__circle {
            stroke: mc-color($primary);
        }

        &.mc-second .mc-progress-spinner__circle {
            stroke: mc-color($second);
        }

        &.mc-error .mc-progress-spinner__circle {
            stroke: mc-color($error);
        }
    }
}





@mixin mc-splitter-theme($theme) {
    $background: map-get($theme, background);

    .mc-gutter {
        cursor: col-resize;

        &:hover,
        &.mc-gutter_dragged {
            // todo
            // background-color: mix(map-get($background, background-disabled), map-get($background, overlay-hover));
            background-color: map-get($background, background-disabled);
        }

        &.mc-gutter_vertical {
            cursor: row-resize;
        }

        &[disabled] {
            // todo background-color: mix(mc-color($background, overlay-disabled), map-get($background, overlay-hover));
            background-color: mc-color($background, overlay-disabled);

            cursor: default;
        }
    }
}




.mc-table {
    border-spacing: 0;

    & > thead,
    & > tbody,
    & > tfoot {
        & > tr {
            & > th,
            & > td {
                padding: {
                    top: var(--mc-table-size-row-padding-vertical, $table-size-row-padding-vertical);
                    right: (var(--mc-table-size-row-padding-horizontal, $table-size-row-padding-horizontal) / 2);
                    bottom: (
                        var(--mc-table-size-row-padding-vertical, $table-size-row-padding-vertical) -
                        var(--mc-table-size-border-width, $table-size-border-width)
                    );
                    left: (var(--mc-table-size-row-padding-horizontal, $table-size-row-padding-horizontal) / 2)
                };

                vertical-align: baseline;
                text-align: left;
            }

            & > th:first-child,
            & > td:first-child {
                padding-left: var(--mc-table-size-row-padding-horizontal, $table-size-row-padding-horizontal);
            }

            & > th:last-child,
            & > td:last-child {
                padding-right: var(--mc-table-size-row-padding-horizontal, $table-size-row-padding-horizontal);
            }
        }
    }

    /* stylelint-disable no-descending-specificity */
    & > thead {
        & > tr > th {
            padding: {
                top: var(--mc-table-size-row-padding-vertical, $table-size-row-padding-vertical);
                bottom: (
                    var(--mc-table-size-row-padding-vertical, $table-size-row-padding-vertical) -
                    var(--mc-table-size-border-width, $table-size-border-width)
                );
            }

            border-bottom: var(--mc-table-size-border-width, $table-size-border-width) solid transparent;
        }
    }

    & > tbody > tr {
        & th,
        & td {
            border-bottom: var(--mc-table-size-border-width, $table-size-border-width) solid transparent;
        }
    }
    /* stylelint-enable no-descending-specificity */
}














@mixin mc-highlight-theme($theme) {
    .mc-highlight {
        color: inherit;

        font-weight: bold;
        background-color: transparent;
    }
}




@mixin mc-panel-theme($theme) {
    $background: map-get($theme, background);

    $second: map-get($theme, second);

    $is-dark: map-get($theme, is-dark);

    .mc-panel {
        background-color: map-get($background, background);
        border: 1px solid mc-color($second, if($is-dark, 700, 60));
    }
}



@mixin mosaic-theme($theme) {
    @include mc-core-theme($theme);

    @include mc-alert-theme($theme);
    @include mc-autocomplete-theme($theme);
    @include mc-badge-theme($theme);
    @include mc-button-theme($theme);
    @include mc-card-theme($theme);
    @include mc-checkbox-theme($theme);
    @include mc-datepicker-theme($theme);
    @include mc-dropdown-theme($theme);
    @include mc-form-field-theme($theme);
    @include mc-icon-theme($theme);
    @include mc-input-theme($theme);
    @include mc-link-theme($theme);
    @include mc-list-theme($theme);
    @include mc-modal-theme($theme);
    @include mc-navbar-theme($theme);
    @include mc-option-theme($theme);
    @include mc-optgroup-theme($theme);
    @include mc-panel-theme($theme);
    @include mc-popover-theme($theme);
    @include mc-progress-bar-theme($theme);
    @include mc-progress-spinner-theme($theme);
    @include mc-radio-theme($theme);
    @include mc-select-theme($theme);
    @include mc-sidepanel-theme($theme);
    @include mc-splitter-theme($theme);
    @include mc-tabs-theme($theme);
    @include mc-tag-theme($theme);
    @include mc-textarea-theme($theme);
    @include mc-toggle-theme($theme);
    @include mc-tooltip-theme($theme);
    @include mc-tree-select-theme($theme);
    @include mc-tree-theme($theme);
    @include mc-vertical-navbar-theme($theme);
    @include mc-highlight-theme($theme);
    @include mc-table-theme($theme);
}
