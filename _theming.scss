// Import all the theming
@keyframes mc-progress {
    from {
        background-position: 0 0;
    }

    to {
        background-position: 29px 0;
    }
}

.mc-progress {
    position: relative;

    &:after {
        content: '';
        position: absolute;

        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        $lighter: transparent;
        $darker: rgba(0, 0, 0, .05);
        background: linear-gradient(
                135deg,
                $darker 10px, $lighter 10px,
                $lighter 20px, $darker 20px,
                $darker 30px, $lighter 30px
        ) repeat;
        background-size: 29px 29px;
        animation: mc-progress 1s linear infinite;
    }
}


@mixin cdk-a11y {

    .cdk-visually-hidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;

        // Avoid browsers rendering the focus ring in some cases.
        outline: 0;

        // Avoid some cases where the browser will still render the native controls (see #9049).
        -webkit-appearance: none;
        -moz-appearance: none;
    }
}

@mixin cdk-high-contrast($target: active) {
    @media screen and (-ms-high-contrast: $target) {
        @content;
    }
}

// We want overlays to always appear over user content, so set a baseline
// very high z-index for the overlay container, which is where we create the new
// stacking context for all overlays.
$cdk-z-index-overlay-container: 1000;
$cdk-z-index-overlay: 1000;
$cdk-z-index-overlay-backdrop: 1000;

// Background color for all of the backdrops
$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.288);

// Default backdrop animation is based on the Material Design swift-ease-out.
$backdrop-animation-duration: 400ms !default;
$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;

@mixin cdk-overlay() {
    .cdk-overlay-container, .cdk-global-overlay-wrapper {
        // Disable events from being captured on the overlay container.
        pointer-events: none;

        // The container should be the size of the viewport.
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
    }

    // The overlay-container is an invisible element which contains all individual overlays.
    .cdk-overlay-container {
        position: fixed;
        z-index: $cdk-z-index-overlay-container;

        &:empty {
            // Hide the element when it doesn't have any child nodes. This doesn't
            // include overlays that have been detached, rather than disposed.
            display: none;
        }
    }

    // We use an extra wrapper element in order to use make the overlay itself a flex item.
    // This makes centering the overlay easy without running into the subpixel rendering
    // problems tied to using `transform` and without interfering with the other position
    // strategies.
    .cdk-global-overlay-wrapper {
        display: flex;
        position: absolute;
        z-index: $cdk-z-index-overlay;
    }

    // A single overlay pane.
    .cdk-overlay-pane {
        // Note: it's important for this one to start off `absolute`,
        // in order for us to be able to measure it correctly.
        position: absolute;
        pointer-events: auto;
        box-sizing: border-box;
        z-index: $cdk-z-index-overlay;

        // For connected-position overlays, we set `display: flex` in
        // order to force `max-width` and `max-height` to take effect.
        display: flex;
        max-width: 100%;
        max-height: 100%;
    }

    .cdk-overlay-backdrop {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;

        z-index: $cdk-z-index-overlay-backdrop;
        pointer-events: auto;
        -webkit-tap-highlight-color: transparent;
        transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;
        opacity: 0;

        &.cdk-overlay-backdrop-showing {
            opacity: 1;

            // In high contrast mode the rgba background will become solid so we need to fall back
            // to making it opaque using `opacity`. Note that we can't use the `cdk-high-contrast`
            // mixin, because we can't normalize the import path to the _a11y.scss both for the
            // source and when this file is distributed. See #10908.
            @media screen and (-ms-high-contrast: active) {
                opacity: 0.6;
            }
        }
    }

    .cdk-overlay-dark-backdrop {
        background: $cdk-overlay-dark-backdrop-background;
    }

    .cdk-overlay-transparent-backdrop {
        // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from
        // capturing the user's mouse scroll events. Since we also can't use something like
        // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at
        // all and using `opacity` to make the element transparent.
        &, &.cdk-overlay-backdrop-showing {
            opacity: 0;
        }
    }

    // Overlay parent element used with the connected position strategy. Used to constrain the
    // overlay element's size to fit within the viewport.
    .cdk-overlay-connected-position-bounding-box {
        position: absolute;
        z-index: $cdk-z-index-overlay;

        // We use `display: flex` on this element exclusively for centering connected overlays.
        // When *not* centering, a top/left/bottom/right will be set which overrides the normal
        // flex layout.
        display: flex;

        // We use the `column` direction here to avoid some flexbox issues in Edge
        // when using the "grow after open" options.
        flex-direction: column;

        // Add some dimensions so the element has an `innerText` which some people depend on in tests.
        min-width: 1px;
        min-height: 1px;
    }

    // Used when disabling global scrolling.
    .cdk-global-scrollblock {
        position: fixed;

        // Necessary for the content not to lose its width. Note that we're using 100%, instead of
        // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width
        // that the element had before we made it `fixed`.
        width: 100%;

        // Note: this will always add a scrollbar to whatever element it is on, which can
        // potentially result in double scrollbars. It shouldn't be an issue, because we won't
        // block scrolling on a page that doesn't have a scrollbar in the first place.
        overflow-y: scroll;
    }
}


$black-87-opacity: rgba(black, 0.87);
$black-12-opacity: rgba(black, 0.12);
$black-6-opacity:  rgba(black, 0.06);

$white-87-opacity: rgba(white, 0.87);
$white-12-opacity: rgba(white, 0.12);
$white-6-opacity:  rgba(white, 0.06);

$dark-disabled-text: rgba(black, 0.5);

$mc-blue: (
    40: #f6fbfd,
    60: #eaf4fb,
    100: #d9ebf7,
    200: #acd2ec,
    300: #7fbae1,
    400: #56a3d7,
    500: #338fcc,
    560: #277cb4,
    600: #206ea2,
    700: #114f78,
    800: #07304b,
    A100: rgba(0, 153, 255, 0.15),
    A200: rgba(0, 153, 255, 0.3),
    contrast: (
        40: $black-87-opacity,
        60: $black-87-opacity,
        100: $black-87-opacity,
        200: $black-87-opacity,
        300: $black-87-opacity,
        400: $black-87-opacity,
        500: white,
        560: white,
        600: white,
        700: white,
        800: $white-87-opacity,
        A100: $black-87-opacity,
        A200: white
    )
);

$mc-green: (
    40: #f6fbf4,
    60: #ecf8e8,
    100: #dcf1d5,
    200: #b4dfa5,
    300: #90cd7a,
    400: #6fbb54,
    500: #52a932,
    560: #439127,
    600: #3a8320,
    700: #276412,
    800: #164007,
    A100: rgba(68, 255, 0, 0.15),
    contrast: (
        40: $black-87-opacity,
        60: $black-87-opacity,
        100: $black-87-opacity,
        200: $black-87-opacity,
        300: $black-87-opacity,
        400: $black-87-opacity,
        500: $black-87-opacity,
        560: white,
        600: white,
        700: white,
        800: $white-87-opacity,
        A100: $black-87-opacity
    )
);

$mc-red: (
    40: #fef7f6,
    60: #fcefed,
    100: #fadfdb,
    200: #f4b8ae,
    300: #ec9183,
    400: #e66d5b,
    500: #e04f38,
    560: #e04f38,
    600: #b43622,
    700: #822112,
    800: #541208,
    A100: rgba(224, 79, 56, 0.15),
    contrast: (
        40: $black-87-opacity,
        60: $black-87-opacity,
        100: $black-87-opacity,
        200: $black-87-opacity,
        300: $black-87-opacity,
        400: $black-87-opacity,
        500: white,
        600: white,
        700: white,
        800: $white-87-opacity,
        A100: $black-87-opacity
    )
);

$mc-grey: (
    40: #f5f5f5,
    60: #f0f0f0,
    100: #e6e6e6,
    200: #cccccc,
    300: #b3b3b3,
    400: #999999,
    500: #808080,
    560: #808080,
    600: #666666,
    700: #4d4d4d,
    800: #333333,
    contrast: (
        40: $black-87-opacity,
        60: $black-87-opacity,
        100: $black-87-opacity,
        200: $black-87-opacity,
        300: $black-87-opacity,
        400: $black-87-opacity,
        500: $black-87-opacity,
        600: $white-87-opacity,
        700: $white-87-opacity,
        800: $white-87-opacity
    )
);

$mc-yellow: (
    40: #fdf9f2,
    60: #fcf6e8,
    100: #f8ecd3,
    200: #f0d399,
    300: #e8bd69,
    400: #dfa83a,
    500: #d9950d,
    560: #bb800a,
    600: #aa7408,
    700: #7c5404,
    800: #503602,
    A100: rgba(255, 170, 0, 0.15),
    contrast: (
        40: $black-87-opacity,
        60: $black-87-opacity,
        100: $black-87-opacity,
        200: $black-87-opacity,
        300: $black-87-opacity,
        400: $black-87-opacity,
        500: $black-87-opacity,
        560: $black-87-opacity,
        600: $black-87-opacity,
        700: $black-87-opacity,
        800: $black-87-opacity,
        A100: $black-87-opacity
    )

);

// Foreground palette for light themes.
$mc-light-theme-foreground: (
    base:              black,
    disabled:          $dark-disabled-text,
    disabled-button:   rgba(black, 0.26),
    disabled-text:     rgba(black, 0.3),
    hint-text:         rgba(black, 0.38),
    icon:              rgba(black, 0.54),
    text:              rgba(black, 0.87),
    secondary-text:    rgba(black, 0.54),
);

// Background palette for light themes.
$mc-light-theme-background: (
    hover: rgba(black, 0.05),
    background: white,
    disabled-button: $black-12-opacity,
    focused-button: $black-6-opacity,
    disabled-list-option: #CCC
);

// Foreground palette for dark themes.
$mc-dark-theme-foreground: (
    base:              white,
    disabled:          rgba(white, 0.3),
    disabled-button:   rgba(white, 0.3),
    disabled-text:     rgba(white, 0.3),
    hint-text:         rgba(white, 0.3),
    secondary-text:    rgba(white, 0.7),
    icon:              white,
    icons:             white,
    text:              white
);

// Background palette for dark themes.
$mc-dark-theme-background: (
    background: #303030,
    disabled-button: $white-12-opacity,
    selected-button: grey,
    selected-disabled-button: grey
);



@function mc-contrast($palette, $hue) {
    @return map-get(map-get($palette, contrast), $hue);
}

@function mc-palette($base-palette, $lighter: 100, $default: 500, $darker: 700) {
    $result: map_merge($base-palette, (
        default: map-get($base-palette, $default),
        lighter: map-get($base-palette, $lighter),
        darker:  map-get($base-palette, $darker),

        default-contrast: mc-contrast($base-palette, $default),
        lighter-contrast: mc-contrast($base-palette, $lighter),
        darker-contrast:  mc-contrast($base-palette, $darker)
    ));

    // For each hue in the palette, add a "-contrast" color to the map.
    @each $hue, $color in $base-palette {
        $result: map_merge($result, (
            '#{$hue}-contrast': mc-contrast($base-palette, $hue)
        ));
    }

    @return $result;
}

@function mc-color($palette, $hue: default, $opacity: null) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return mc-color($palette, default, $hue);
    }

    $color: map-get($palette, $hue);
    $opacity: if($opacity == null, opacity($color), $opacity);

    @return rgba($color, $opacity);
}

@function mc-light-theme($primary, $second, $warn: mc-palette($mc-red)) {
    @return (
        primary: $primary,
        second: $second,
        warn: $warn,
        is-dark: false,
        foreground: $mc-light-theme-foreground,
        background: $mc-light-theme-background
    );
}

@function mc-dark-theme($primary, $second, $warn: mc-palette($mc-red)) {
    @return (
        primary: $primary,
        second: $second,
        warn: $warn,
        is-dark: true,
        foreground: $mc-dark-theme-foreground,
        background: $mc-dark-theme-background
    );
}



@mixin mc-pseudo-checkbox-theme($theme) {
    $hover-lighten: 5%;

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $background-checked: map-get($primary, 500);
    $background-unchecked: map-get($background, background);
    $background-disabled: map-get($second, 40);

    $border-color-checked: map-get($primary, 600);
    $border-color-unchecked: map-get($second, 300);
    $border-color-disabled: map-get($second, 100);

    $icon-color-checked: map-get($background, background);
    $icon-color-disabled: map-get($second, 200);

    .mc-pseudo-checkbox {
        border-color: $border-color-unchecked;
        background-color: $background-unchecked;
    }

    .mc-checkbox-checkmark,
    .mc-checkbox-mixedmark {
        color: $icon-color-checked;
    }

    .mc-pseudo-checkbox.mc-pseudo-checkbox_checked {
        background: $background-checked;
        border-color: $border-color-checked;
    }

    .mc-pseudo-checkbox.mc-disabled {
        border-color: $border-color-disabled;
        background-color: $background-disabled;

        .mc-checkbox-checkmark,
        .mc-checkbox-mixedmark {
            color: $icon-color-disabled;
        }
    }
}



$typography-font-weight-values: (
    thin: 100,
    light: 300,
    regular: 400,
    medium: 500,
    bold: 700,
    black: 900
) !default;


// TODO add caption-height
$fonts: (
    base: (
        font-family: #{Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif}
    ),
    monospace: (
        font-family: #{'Roboto Mono', 'Consolas', 'Menlo', 'Monaco', monospace}
    )
);

$base-font-size: 15px !default;




@function mc-typography-level(
    $font-size,
    $line-height: $font-size,
    $letter-spacing: normal,
    $font-weight: normal,
    $font-family: null,
    $text-transform: null
) {
    @return (
        font-size: $font-size,
        line-height: $line-height,
        font-weight: $font-weight,
        font-family: $font-family,
        letter-spacing: $letter-spacing,
        text-transform: $text-transform
    );
}

@function _mc-get-type-value($config, $level, $name) {
    @return map-get(map-get($config, $level), $name);
}

@function mc-font-size($config, $level) {
    @return _mc-get-type-value($config, $level, font-size);
}

@function mc-line-height($config, $level) {
    @return _mc-get-type-value($config, $level, line-height);
}

@function mc-font-weight($config, $level) {
    @return _mc-get-type-value($config, $level, font-weight);
}

@function mc-letter-spacing($config, $level) {
    @return _mc-get-type-value($config, $level, letter-spacing);
}

@function mc-text-transform($config, $level) {
    @return _mc-get-type-value($config, $level, text-transform);
}

// Gets the font-family from a typography config and removes the quotes around it.
@function mc-font-family($config, $level: null) {
    $font-family: map-get($config, font-family);

    @if $level != null {
        $font-family: _mc-get-type-value($config, $level, font-family);
    }

    @return unquote($font-family);
}

@mixin mc-typography-level-to-styles($config, $level) {
    $font-size: mc-font-size($config, $level);
    $font-weight: mc-font-weight($config, $level);
    $line-height: mc-line-height($config, $level);
    $font-family: mc-font-family($config, $level);
    $text-transform: mc-font-family($config, $level);

    font: $font-weight #{$font-size}/#{$line-height} $font-family;
    letter-spacing: mc-letter-spacing($config, $level);
    text-transform: mc-text-transform($config, $level);
}

@mixin mc-base-typography($config) {
    .mc-display-1 {
        @include mc-typography-level-to-styles($config, display-1);
    }

    .mc-display-2 {
        @include mc-typography-level-to-styles($config, display-2);
    }

    .mc-display-3 {
        @include mc-typography-level-to-styles($config, display-3);
    }

    .mc-headline {
        @include mc-typography-level-to-styles($config, headline);
    }

    .mc-subheading {
        @include mc-typography-level-to-styles($config, subheading);
    }

    .mc-title {
        @include mc-typography-level-to-styles($config, title);
    }

    .mc-body {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-body_strong {
        @include mc-typography-level-to-styles($config, body-strong);
    }

    .mc-body_caps {
        @include mc-typography-level-to-styles($config, body-caps);
    }

    .mc-body_mono {
        @include mc-typography-level-to-styles($config, body-mono);
    }

    .mc-caption {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-caption_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }

    .mc-caption_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-small-text {
        @include mc-typography-level-to-styles($config, small-text);
    }

    .mc-extra-small-text {
        @include mc-typography-level-to-styles($config, extra-small-text);
    }
}



@function mc-typography-config(
    $font-family:   map-get(map-get($fonts, base), font-family),
    $font-family-mono:   map-get(map-get($fonts, monospace), font-family),

    $display-1:     mc-typography-level(34px, 44px, 0.25px),
    $display-2:     mc-typography-level(45px, 56px),
    $display-3:     mc-typography-level(56px, 76px, -0.4px),

    $headline:      mc-typography-level(24px, 32px),
    $title:         mc-typography-level(20px, 28px, 0.15px, 500),
    $subheading:    mc-typography-level(15px, 20px, 0.15px, 500),

    $body:          mc-typography-level(15px, 20px, 0.15px),
    $body-strong:   mc-typography-level(15px, 20px, 0.15px, 500),
    $body-caps:     mc-typography-level(15px, 20px, 1.7px, normal, $font-family, uppercase),
    $body-mono:     mc-typography-level(15px, 20px, normal, normal, $font-family-mono),

    $caption:       mc-typography-level(13px, 16px, 0.25px),
    $caption-caps:  mc-typography-level(13px, 16px, 1.5px, normal, $font-family, uppercase),
    $caption-mono:  mc-typography-level(13px, 16px, normal, normal, $font-family-mono),

    $small-text:    mc-typography-level(13px, 16px, 0.25px),
    $extra-small-text:    mc-typography-level(11px, 16px, 0.22px)
) {

    $config: (
        display-1:      $display-1,
        display-2:      $display-2,
        display-3:      $display-3,

        headline:       $headline,
        subheading:     $subheading,
        title:          $title,

        body:           $body,
        body-strong:    $body-strong,
        body-caps:      $body-caps,
        body-mono:      $body-mono,

        caption:        $caption,
        caption-caps:   $caption-caps,
        caption-mono:   $caption-mono,

        small-text:     $small-text,
        extra-small-text: $extra-small-text
    );

    @each $key, $level in $config {
        @if map-get($level, font-family) == null {
            $new-level: map-merge($level, (font-family: $font-family));
            $config: map-merge($config, ($key: $new-level));
        }
    }

    // Add the base font family to the config.
    @return map-merge($config, (font-family: $font-family));
}






.mc-badge {
    display: inline-block;
    min-width: 10px;
    padding: 4px 8px;
    vertical-align: middle;
    white-space: nowrap;
    text-align: center;
    border-radius: 4px;
}

@mixin mc-badge-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);

    .mc-badge {
        color: white;
        background-color: mc-color($second, 500);

        &__badge {
            // Empty badges collapse automatically (not available in IE8)
            &:empty {
                display: none;
            }
        }

        &__info,
        &__primary {
            background-color: mc-color($primary, 500);
        }

        &__error {
            background-color: mc-color($mc-yellow, 500);
        }

        &__warning {
            background-color: mc-color($warn, 500);
        }

        &__success {
            background-color: mc-color($mc-green, 500);
        }

        &__transparent {
            color: mc-color($second, 800);
            background-color: transparent;
            box-shadow: inset 0 0.0.1-8ad947fpx mc-color($second, 300);
        }

        &__light {
            color: mc-color($second, 800);
            background-color: mc-color($second, 100);
        }
    }
}

@mixin mc-badge-typography($config) {

    .mc-badge {
        @include mc-typography-level-to-styles($config, caption);

        &__caps {
            @include mc-typography-level-to-styles($config, caption-caps);
        }
    }
}

@mixin _mc-button-primary-color($palette) {
    $hover-lighten: 5%;

    color: mc-contrast($palette, 500);

    border-color: mc-color($palette, 600);
    background:
        mc-color($palette, 500)
        linear-gradient(to bottom, mc-color($palette, 500), mc-color($palette, 560));

    &:hover,
    &.mc-hover {
        background-image: linear-gradient(
            to bottom,
            lighten(mc-color($palette, 500), $hover-lighten),
            lighten(mc-color($palette, 560), $hover-lighten)
        );
    }

    &:active,
    &.mc-active {
        background-image: linear-gradient(to bottom, mc-color($palette, 600), mc-color($palette, 560));

        &:hover,
        &.mc-hover {
            background-image: linear-gradient(
                to bottom,
                lighten(mc-color($palette, 600), $hover-lighten),
                lighten(mc-color($palette, 560), $hover-lighten)
            );
        }
    }

    &[disabled] {
        color: mc-color($palette, 200);

        border-color: mc-color($palette, 400);
        background-image: linear-gradient(to bottom, mc-color($palette, 300), mc-color($palette, 400));
    }
}

@mixin _mc-button-second-color($palette) {
    $hover-darken: 5%;

    color: mc-contrast($palette, 500);

    border-color: mc-color($palette, 300);
    background-image: linear-gradient(to bottom, mc-color($palette, 40, 1), mc-color($palette, 100));

    &:hover,
    &.mc-hover {
        background-image: linear-gradient(
            to bottom, darken(mc-color($palette, 40), $hover-darken), darken(mc-color($palette, 100), $hover-darken)
        );
    }

    &:active,
    &.mc-active {
        background-image: linear-gradient(to bottom, mc-color($palette, 200), mc-color($palette, 100));

        &:hover,
        &.mc-hover {
            background-image: linear-gradient(
                to bottom,
                darken(mc-color($palette, 200), $hover-darken),
                darken(mc-color($palette, 100), $hover-darken)
            );
        }
    }

    &[disabled] {
        color: mc-color($palette, 200);

        border-color: mc-color($palette, 200);
        background-image: linear-gradient(to bottom, mc-color($palette, 40, 1), mc-color($palette, 60));
    }
}

@mixin _mc-button-warn-color($secondPalette, $warnPalette) {
    $hover-darken: 5%;

    color: mc-color($warnPalette, 500);

    border-color: mc-color($secondPalette, 300);
    background-image: linear-gradient(to bottom, mc-color($secondPalette, 40, 1), mc-color($secondPalette, 100));

    &:hover,
    &.mc-hover {
        background-image: linear-gradient(
            to bottom,
            darken(mc-color($secondPalette, 40), $hover-darken),
            darken(mc-color($secondPalette, 100), $hover-darken)
        );
    }

    &:active,
    &.mc-active {
        background-image: linear-gradient(to bottom, mc-color($secondPalette, 200), mc-color($secondPalette, 100));

        &:hover,
        &.mc-hover {
            background-image: linear-gradient(
                to bottom,
                darken(mc-color($secondPalette, 200), $hover-darken),
                darken(mc-color($secondPalette, 100), $hover-darken)
            );
        }
    }

    &[disabled] {
        color: mc-color($secondPalette, 200);

        border-color: mc-color($secondPalette, 200);
        background-image: linear-gradient(to bottom, mc-color($secondPalette, 40, 1), mc-color($secondPalette, 60));
    }
}

@mixin _mc-button-theme-color($theme, $color: 'default') {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    &.mc-primary {
        @include _mc-button-primary-color($primary);
    }

    &.mc-second {
        @include _mc-button-second-color($second);
    }

    &.mc-warn {
        @include _mc-button-warn-color($second, $warn);
    }

    &.mc-primary,
    &.mc-second,
    &.mc-warn {
        &.cdk-focused {
            border-color: mc-color($primary, 500);
            box-shadow: 0 0.0.1-8ad947fpx mc-color($primary, 500);
        }
    }
}

@mixin mc-button-theme($theme) {
    .mc-button,
    .mc-xs-button,
    .mc-sm-button,
    .mc-lg-button,
    .mc-xl-button,
    .mc-icon-button {
        @include _mc-button-theme-color($theme);
    }
}

@mixin mc-button-typography($config) {
    .mc-button,
    .mc-xs-button,
    .mc-sm-button,
    .mc-lg-button,
    .mc-xl-button,
    .mc-icon-button {
        @include mc-typography-level-to-styles($config, body);

        &.mc-primary {
            @include mc-typography-level-to-styles($config, body-strong);
        }
    }

    .mc-icon-button.mc-button-wrapper {
        .mc-icon {
            line-height: mc-line-height($config, body);
        }
    }
}







@mixin _mc-link-dashes_mixin($color, $percentage: 66%, $opacity: 0.5) {
    background: linear-gradient(90deg, rgba($color, $opacity) $percentage, transparent 0) repeat-x;
    background-size: 5px 1px;
    // 1.29em это меньше line-height что бы было видно подчеркивание
    background-position: 0 1.29em;
}

@mixin mc-link-typography($config) {
    .mc-link {
        @include mc-typography-level-to-styles($config, body);
    }
}

@mixin mc-link-theme($theme) {
    $link: map-get($theme, primary);
    $foreground: map-get($theme, foreground);
    $link-disabled: mc-color($foreground, disabled-text);

    .mc-link {
        color: mc-color($link, 500);

        &.mc-visited,
        &:visited {
            color: mc-color($link, 500);
        }

        &.mc-active,
        &.mc-hovered,
        &:active,
        &:hover {
            color: mc-color($link, 700);
        }

        &:hover.cdk-keyboard-focused,
        &.mc-hovered.cdk-keyboard-focused,
        &:hover.mc-focused {
            outline: none;
            box-shadow: 0 0 0 2px mc-color($link, 500);
            color: mc-color($link, 700);
        }

        &.mc-focused,
        &.cdk-keyboard-focused {
            color: mc-color($link, 500);
            border-color: mc-color($link, 500);
            box-shadow: 0 0 0 2px mc-color($link, 500);
        }

        &[disabled] {
            color: $link-disabled !important;
            box-shadow: none;

            &.mc-focused,
            &:focus {
                border-color: $link-disabled;
                box-shadow: none;
            }
        }

        &.mc-link_underlined {

            & > .mc-link__text {
                @include _mc-link-dashes_mixin(mc-color($link, 500), 100%, 0.32);
            }

            &.mc-visited,
            &:visited {
                & > .mc-link__text {
                    @include _mc-link-dashes_mixin(mc-color($link, 500), 100%, 0.32);
                }
            }

            &.mc-active,
            &.mc-hovered,
            &.mc-focused,
            &:active,
            &:hover,
            &:focus {
                & > .mc-link__text {
                    @include _mc-link-dashes_mixin(mc-color($link, 700), 100%, 0.32);
                }
            }

            &[disabled] {
                & > .mc-link__text {
                    @include _mc-link-dashes_mixin($link-disabled, 100%, 0.32*0.3);
                }
            }
        }

        &.mc-link_dashed {

            & > .mc-link__text {
                @include _mc-link-dashes_mixin(mc-color($link, 500));
            }

            &.mc-visited,
            &:visited {
                & > .mc-link__text {
                    @include _mc-link-dashes_mixin(mc-color($link, 500));
                }
            }

            &.mc-active,
            &.mc-hovered,
            &.mc-focused,
            &:active,
            &:hover,
            &:focus {
                & > .mc-link__text {
                    @include _mc-link-dashes_mixin(mc-color($link, 700));
                }
            }

            &[disabled] {
                & > .mc-link__text {
                    @include _mc-link-dashes_mixin($link-disabled, 66%, 0.32*0.3);
                }
            }
        }
    }
}






// TODO: Its only for testing colors


// This mixin will ensure that lines that overflow the container will hide the overflow and
// truncate neatly with an ellipsis.
@mixin mc-truncate-line() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Mixin to provide all mc-line styles, changing secondary font size based on whether the list is in dense mode.
@mixin mc-line-base($secondary-font-size) {
    .mc-line {
        @include mc-truncate-line();

        display: block;
        box-sizing: border-box;

        // all lines but the top line should have smaller text
        &:nth-child(n + 2) {
            font-size: $secondary-font-size;
        }
    }
}

// This mixin normalizes default element styles, e.g. font weight for heading text.
@mixin mc-normalize-text() {
    & > * {
        margin: 0;
        padding: 0;
        font-weight: normal;
        font-size: inherit;
    }
}

// This mixin provides base styles for the wrapper around mc-line elements in a list.
@mixin mc-line-wrapper-base() {
    @include mc-normalize-text();

    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;

    // Must remove wrapper when lines are empty or it takes up horizontal
    // space and pushes other elements to the right.
    &:empty {
        display: none;
    }
}

.mc-no-select {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
}



@mixin mc-list-theme($theme) {
    $primary: map-get($theme, primary);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-list,
    .mc-list-selection {
        .mc-list-item {
            color: mc-color($foreground, text);
        }

        .mc-list-option {
            outline: none;
            border: 2px solid transparent;

            color: mc-color($foreground, text);

            &:hover,
            &.mc-hovered {
                background: mc-color($background, 'hover');
            }

            &.mc-focused {
                border-color: mc-color($primary, 500);
            }

            &.mc-selected {
                background-color: mc-color($primary, 100);
            }

            &[disabled] {
                background-color: transparent;

                color: mc-color($foreground, disabled-text);
            }
        }

        .mc-subheader {
            color: mc-color($foreground, secondary-text);
        }
    }
}

@mixin mc-list-typography($config) {
    $font-family: mc-font-family($config);

    .mc-list-item,
    .mc-list-option {
        font-family: $font-family;
    }

    .mc-list,
    .mc-list-selection {
        .mc-list-item,
        .mc-list-option {
            font-size: mc-font-size($config, subheading);

            @include mc-line-base(mc-font-size($config, body));
        }

        // todo now we are not use it
        .mc-subheader {
            font-family: mc-font-family($config, subheading);
            font-size: mc-font-size($config, subheading);
            font-weight: mc-font-weight($config, subheading);
        }
    }
}






@mixin mc-tree-theme($theme) {
    $primary: map-get($theme, primary);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    .mc-tree-node {
        color: mc-color($foreground, text);

        &.mc-focused {
            border-color: mc-color($primary, 500);
        }

        &:hover,
        &.mc-hovered {
            background-color: mc-color($background, 'hover');
        }

        &.mc-selected {
            background-color: mc-color($primary, 100);
        }

        &[disabled] {
            background-color: transparent;

            color: mc-color($foreground, disabled-text);
        }
    }
}

@mixin mc-tree-typography($config) {
    .mc-tree-selection {
        font-family: mc-font-family($config);
    }

    .mc-tree-node {
        font-weight: mc-font-weight($config, body);
        font-size: mc-font-size($config, body);
    }
}





@mixin _mc-radio-color($palette) {

    .mc-radio-outer-circle {
        border-color: mc-color($palette, 300);
    }
}

@mixin mc-radio-theme($theme) {

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);
    $foreground: map-get($theme, foreground);

    .mc-radio-input {
        + .mc-radio-label-content {
            &:before {
                border-color: mc-color($second, 300);
            }
        }

        &:hover {
            + .mc-radio-label-content {

                &:before {
                    background-color: darken(white, 5%);
                }
            }
        }

        &:checked {
            + .mc-radio-label-content {

                &:after {
                    opacity: 1;
                    background: white;
                }

                &:before {
                    background: mc-color($primary, 500);
                    border-color: mc-color($primary, 600);
                }
            }
        }

        &:checked:hover {
            + .mc-radio-label-content {

                &:before {
                    background: lighten(mc-color($primary, 500), 5%);
                    border-color: lighten(mc-color($primary, 600), 5%);
                }
            }
        }

        &:focus {
            + .mc-radio-label-content:before {
                border-color: mc-color($primary, 500);
            }
        }

        &[disabled] {

            + .mc-radio-label-content {

                opacity: 0.5;
                color: mc-color($second, 700);

                &:before {
                    background: mc-color($second, 40); // GRAY-40
                    border: {
                        color: mc-color($second, 100); //GRAY-100
                    }
                }

                &:after {
                    background: mc-color($second, 200); // GRAY-200
                }
            }
        }
    }
}

@mixin mc-radio-typography($config) {

    .mc-radio-button {
        @include mc-typography-level-to-styles($config, body);
        line-height: 16px;
    }
}



// Width and height of input toggles
$mc-toggle-size: 16px !default;

$zindex-modal-mask      : 1000;
$zindex-modal           : 1000;
$zindex-notification    : 1010;
$zindex-message         : 1010;
$zindex-popover         : 1030;
$zindex-picker          : 1050;
$zindex-dropdown        : 1050;
$zindex-tooltip         : 1060;


@mixin mc-checkbox-theme($theme) {
    $hover-lighten: 5%;
    // main
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    // focus inset shadow color
    $focus-border-box-shadow: inset 0 0.0.1-8ad947fpx map-get($background, background);

    // background
    $toggle-background-unchecked: $background;
    $toggle-background-checked: map-get($primary, 500);
    $toggle-background-checked-hover: lighten($toggle-background-checked, $hover-lighten);
    $toggle-background-disabled: map-get($second, 40);
    $toggle-background-hover: map-get($background, hover);

    // border
    $toggle-border-color-checked: map-get($primary, 600);
    $toggle-border-color-checked-hover: lighten($toggle-border-color-checked, $hover-lighten);
    $toggle-border-color-unchecked: map-get($second, 300);
    $toggle-border-color-focus: map-get($primary, 500);
    $toggle-border-color-disabled: map-get($second, 100);

    // icon
    $icon-color-checked: map-get($background, background);
    $icon-color-disabled: map-get($second, 200);

    // label
    $label-color-disabled: map-get($foreground, disabled-text);
    $label-color: map-get($foreground, text);

    .mc-checkbox-label {
        color: $label-color;
    }

    .mc-checkbox-frame {
        border-color: $toggle-border-color-unchecked;
    }

    .mc-checkbox-checkmark,
    .mc-checkbox-mixedmark {
        color: $icon-color-checked;
    }

    .mc-checkbox:not(.mc-checkbox-disabled) {
        .mc-checkbox-input {
            &:hover {
                + .mc-checkbox-frame {
                    background-color: $toggle-background-hover;
                }
            }

            &:focus {
                + .mc-checkbox-frame {
                    border-color: $toggle-border-color-focus;
                }
            }
        }

        &.mc-checkbox-checked,
        &.mc-checkbox-indeterminate {
            .mc-checkbox-input {
                &:focus {
                    + .mc-checkbox-frame {
                        border-color: $toggle-border-color-focus;
                        box-shadow: $focus-border-box-shadow;
                    }
                }
            }
        }
    }

    .mc-checkbox-checked:not(.mc-checkbox-disabled),
    .mc-checkbox-indeterminate:not(.mc-checkbox-disabled) {
        .mc-checkbox-frame {
            background: $toggle-background-checked;
            border-color: $toggle-border-color-checked;
        }
        .mc-checkbox-input {
            &:hover {
                + .mc-checkbox-frame {
                    background: $toggle-background-checked-hover;
                    border-color: $toggle-border-color-checked-hover;
                }
            }
            &:focus:hover {
                + .mc-checkbox-frame {
                    border-color: $toggle-border-color-focus;
                    box-shadow: $focus-border-box-shadow;
                }
            }
        }
    }

    .mc-checkbox-disabled {
        .mc-checkbox-frame {
            border-color: $toggle-border-color-disabled;
            background-color: $toggle-background-disabled;
        }

        .mc-checkbox-label {
            color: $label-color-disabled;
        }

        .mc-checkbox-checkmark,
        .mc-checkbox-mixedmark {
            color: $icon-color-disabled;
        }
    }
}

@mixin mc-checkbox-typography($config) {
    .mc-checkbox,
    .mc-checkbox-layout .mc-checkbox-label {
        @include mc-typography-level-to-styles($config, body);
    }
}




@mixin _mc-navbar-theme-color($theme) {
    $palette: map-get($theme, primary);

    background-color: mc-color($palette, 700);

    mc-navbar-item.mc-navbar-item-active {
        $active-lighten: 5%;
        background-color: lighten(mc-color($palette, 700), $active-lighten)
    }

    mc-navbar-item[disabled] {
        > mc-navbar-title, .mc-navbar-title, [mc-icon] {
            opacity: 0.3;
        }
    }

    mc-navbar-item, .mc-navbar-item, .mc-navbar-title {
        color: mc-color($palette, 100);
    }

    mc-navbar-item, .mc-navbar-item {
        outline: 0;

        &.cdk-focused {
            > .mc-navbar-item {
                outline: 0;
            }
        }
    }

    mc-navbar-item:not([disabled]), .mc-navbar-item:not([disabled]) {

        outline: 0;

        &.cdk-focused {
            border-color: mc-color($palette, 500);
            box-shadow: 0 0.0.1-8ad947fpx mc-color($palette, 500);
            z-index: 1;

            > .mc-navbar-item {
                outline: 0;
            }
        }
    }

    mc-navbar-item:hover:not([disabled]):not(.mc-progress) {
        $hover-lighten: 5%;
        background-color: lighten(mc-color($palette, 700), $hover-lighten)
    }

    mc-navbar-item.mc-progress:hover:not([disabled]) {
        $bg-lighten: 15%;
        background-color: lighten(mc-color($palette, 800), $bg-lighten);
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            opacity: 0.5;
        }
    }

    .mc-navbar-dropdown {
        background-color: #fff;
        border-color: mc-color($mc-grey, 300);
        box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);

        &-link {
            color: mc-color($mc-grey, 700);
            outline: none;

            &:hover {
                background-color: $black-6-opacity;
            }

            &.cdk-focused {
                border-color: mc-color($palette, 500);
            }

            &:active,
            &.is-active {
                background-color: mc-color($palette, 100);

                &:hover::before {
                    background-color: $black-6-opacity;
                }
            }
        }
    }
}

@mixin mc-navbar-theme($theme) {
    .mc-navbar {
        @include _mc-navbar-theme-color($theme);
    }
}

@mixin mc-navbar-typography($config) {
    .mc-navbar-title,
    .mc-navbar-dropdown {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-navbar-item {
        .mc-navbar-title {
            @include mc-typography-level-to-styles($config, body);
        }
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            @include mc-typography-level-to-styles($config, title);
        }
    }
}




@mixin mc-input-theme($theme) {
    $second: map-get($theme, second);

    .mc-input {
        color: mc-color($second, 700);

        &::placeholder {
            color: mc-color($second, 300);
        }

        &::-ms-input-placeholder {
            color: mc-color($second, 300);
        }

        &::-webkit-input-placeholder {
            color: mc-color($second, 300);
        }
    }
}

@mixin mc-input-typography($config) {
    .mc-input {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-input.mc-input_monospace {
        @include mc-typography-level-to-styles($config, body-mono);
    }
}





@mixin mc-form-field-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $hover-darken: 5%;

    .mc-form-field {
        .mc-form-field__container {
            border: {
                color: mc-color($second, 300);
            }
        }

        &:not(.mc-form-field_without-borders) {

            &:hover .mc-form-field__container {
                border: {
                    color: darken(mc-color($second, 400), $hover-darken);
                }
            }

            &.mc-form-field_disabled .mc-form-field__container {
                border: {
                    color: mc-color($second, 100);
                }
                background: {
                    color: mc-color($second, 40);
                }
            }

            &.mc-focused .mc-form-field__container {
                border: {
                    color: mc-color($primary, 500);
                }
                box-shadow: 0 0.0.1-8ad947fpx mc-color($primary, 500);
            }

            &.ng-invalid {
                .mc-form-field__container {

                    background: {
                        color: mc-color($mc-red, 40);
                    }
                    border: {
                        color: mc-color($mc-red, 400);
                    }
                }

                .mc-input {
                    color: mc-color($mc-red, 400);
                }
            }

            &.mc-focused.ng-invalid .mc-form-field__container {
                border: {
                    color: mc-color($mc-red, 400);
                }
                box-shadow: 0 0.0.1-8ad947fpx mc-color($mc-red, 400);
            }
        }

        .mc-form-field__hint {
            color: mc-color($second, 400);
        }

        .mc-icon {
            color: mc-color($second, 400);
        }

        mc-cleaner {
            .mc-cleaner__icon {
                color: mc-color($second, 200);
            }

            &:hover .mc-cleaner__icon {
                color: darken(mc-color($second, 200), $hover-darken);
            }
        }

        mc-stepper {
            .mc-stepper-step-up, .mc-stepper-step-down {
                color: mc-color($second, 200);

                &:hover {
                    color: darken(mc-color($second, 200), $hover-darken);
                }
            }
        }
    }
}

@mixin mc-form-field-typography($config) {
    .mc-form-field {
        @include mc-typography-level-to-styles($config, body);

        .mc-form-field__hint {
            @include mc-typography-level-to-styles($config, caption);
        }
    }
}







@mixin mc-modal-theme($theme) {

    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);
    $hover-darken: 5%;

    .mc-modal {
        &-title {
            color: mc-color($second, 700);
        }

        &-header {
            border-bottom: 1px solid mc-color($second, 60);
        }

        &-content {
            box-shadow:
                0 0.0.1-8ad947fpx mc-color($second, 300),
                0 6px 12px 0 rgba(0, 0, 0, 0.5);
        }

        &-footer {
            background-color: mc-color($second, 60);
        }


        &-close-x {

            .mc-closer__icon {
                color: mc-color($second, 200);
            }

            &:hover .mc-closer__icon {
                color: darken(mc-color($second, 200), $hover-darken);
            }
        }
    }

    .mc-confirm {

        .mc-confirm-btns {
            background-color: mc-color($second, 60);
            border-top: 1px solid mc-color($second, 60);
        }
    }
}

@mixin mc-modal-typography($config) {

    .mc-modal {
        &-title {
            @include mc-typography-level-to-styles($config, title);
        }

        .mc-modal-body {
            @include mc-typography-level-to-styles($config, body);
        }
    }

    .mc-confirm {
        .mc-modal-body {
            @include mc-typography-level-to-styles($config, body);
        }
    }
}







@mixin _mc-tag-color($main-color, $focus-color) {
    $darken: 6%;
    $lighten: 5%;

    color: mc-color($main-color, 500);

    background-color: mc-color($main-color, 100);

    &:hover,
    &.mc-hovered {
        background-color: darken(mc-color($main-color, 100), $darken);
    }

    &.mc-active,
    &.mc-focused {
        border-color: mc-color($focus-color, 500);
        box-shadow: 0 0.0.1-8ad947fpx mc-color($focus-color, 500);
        background-color: mc-color($main-color, 100);
    }

    &[disabled] {
        background-color: lighten(mc-color($main-color, 100), $lighten);

        color: mc-color($main-color, 300);
    }

    & .mc-icon {
        color: mc-color($main-color, 400);

        // todo it should be in mc-icon
        &:hover {
            cursor: pointer;
            color: mc-color($main-color, 600);
        }
    }
}

@mixin mc-tag-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $hover-darken: 5%;

    .mc-tag {
        border-color: transparent;

        &.mc-primary {
            @include _mc-tag-color($primary, $primary);
        }

        &.mc-second {
            @include _mc-tag-color($second, $primary);
        }

        &.mc-warn {
            @include _mc-tag-color($warn, $warn);
        }
    }
}

@mixin mc-tag-typography($config) {
    .mc-tag:not(.mc-tag_mono):not(.mc-tag_caps) {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-tag_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-tag_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }
}






@mixin mc-option-theme($theme) {
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);

    .mc-option {
        color: mc-color($foreground, text);

        &:hover,
        &.mc-hovered {
            background: mc-color($background, 'hover');
        }

        &.mc-active {
            border-color: mc-color($primary, 500);
        }

        &.mc-selected {
            background-color: mc-color($primary, 100);
        }

        &.mc-disabled {
            background-color: transparent;

            color: mc-color($foreground, disabled-text);
        }
    }
}

@mixin mc-option-typography($config) {
    .mc-option {
        font: {
            family: mc-font-family($config, body);
            size: mc-font-size($config, body);
        }
    }
}






$shadow-color: rgba(0, 0, 0, 0.2);
$box-shadow-base: 0 2px 4px 0 $shadow-color;


@mixin mc-tooltip-theme($theme) {
    $second: map-get($theme, second);
    $tooltip-arrow-bg: mc-color($second, 700);

    .mc-tooltip-inner {
        background-color: mc-color($second, 700);
        color: white;
    }

    .mc-tooltip_placement-top .mc-tooltip-arrow {
        border-top-color: $tooltip-arrow-bg;
    }

    .mc-tooltip_placement-right .mc-tooltip-arrow {
        border-right-color: $tooltip-arrow-bg;
    }

    .mc-tooltip_placement-left .mc-tooltip-arrow {
        border-left-color: $tooltip-arrow-bg;
    }

    .mc-tooltip_placement-bottom .mc-tooltip-arrow {
        border-bottom-color: $tooltip-arrow-bg;
    }
}

@mixin mc-tooltip-typography($config) {

    .mc-tooltip,
    .mc-tooltip-inner {

        @include mc-typography-level-to-styles($config, caption);
    }
}



@mixin mosaic-typography($config: null) {
    @if $config == null {
        $config: mc-typography-config();
    }

    @include mc-base-typography($config);

    @include mc-link-typography($config);
    @include mc-badge-typography($config);
    @include mc-button-typography($config);
    @include mc-list-typography($config);
    @include mc-radio-typography($config);
    @include mc-checkbox-typography($config);
    @include mc-tree-typography($config);
    @include mc-navbar-typography($config);
    @include mc-input-typography($config);
    @include mc-form-field-typography($config);
    @include mc-tooltip-typography($config);
    @include mc-modal-typography($config);
    @include mc-option-typography($config);
    @include mc-tag-typography($config);
}



// Mixin that renders all of the core styles that are not theme-dependent.
@mixin mc-core($typography-config: null) {
    @include mosaic-typography($typography-config);
    @include cdk-a11y();
    @include cdk-overlay();
}

// Mixin that renders all of the core styles that depend on the theme.
@mixin mc-core-theme($theme) {
    @include mc-pseudo-checkbox-theme($theme);
}





@mixin mc-panel-theme($theme) {
    $backgroundColor: map-get(map-get($theme, background), background);
    $borderColor: map-get($mc-grey, 60);

    .mc-panel {
        background-color: $backgroundColor;
        border: 1px solid $borderColor;
    }
}







@mixin mc-progress-bar-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);

    .mc-progress-bar {
        background-color: mc-color($mc-grey, 60);

        &.mc-primary &__line {
            background-color: mc-color($primary, 500);
        }

        &.mc-second &__line {
            background-color: mc-color($second, 500);
        }

        &.mc-warn &__line {
            background-color: mc-color($warn, 500);
        }
    }
}




@mixin mc-progress-spinner-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $warn: map-get($theme, warn);

    .mc-progress-spinner {
        &.mc-primary &__circle {
            stroke: mc-color($primary, 500);
        }

        &.mc-second &__circle {
            stroke: mc-color($second, 500);
        }

        &.mc-warn &__circle {
            stroke: mc-color($warn, 500);
        }
    }
}













@mixin mc-select-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    .mc-select__matcher {
        color: mc-color($second, 700);
    }

    .mc-select__panel {
        border: {
            color: mc-color($second, 300);
        }

        // todo A-black-200 нет в палитре
        box-shadow: 0 3px 3px 0 rgba(0, 0, 0, 0.2);

        background-color: map-get($background, background);
    }

    .mc-select__content {
    }
}

@mixin mc-select-typography($config) {
    $font-family: mc-font-family($config);

    .mc-select__content,
    .mc-select {
        @include mc-typography-level-to-styles($config, body);
    }
}






@mixin mosaic-theme($theme) {

    @include mc-core-theme($theme);

    @include mc-link-theme($theme);
    @include mc-badge-theme($theme);
    @include mc-button-theme($theme);
    @include mc-list-theme($theme);
    @include mc-panel-theme($theme);
    @include mc-progress-bar-theme($theme);
    @include mc-progress-spinner-theme($theme);
    @include mc-radio-theme($theme);
    @include mc-checkbox-theme($theme);
    @include mc-tree-theme($theme);
    @include mc-navbar-theme($theme);
    @include mc-input-theme($theme);
    @include mc-form-field-theme($theme);
    @include mc-modal-theme($theme);
    @include mc-select-theme($theme);
    @include mc-option-theme($theme);
    @include mc-tag-theme($theme);
    @include mc-tooltip-theme($theme);
}
