// Import all the theming
@keyframes mc-progress {
    from {
        background-position: 0 0;
    }

    to {
        background-position: 29px 0;
    }
}

.mc-progress {
    position: relative;

    &:after {
        content: '';
        position: absolute;
        border-radius: inherit;

        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        $lighter: transparent;
        $darker: rgba(0, 0, 0, .05);
        background: linear-gradient(
                135deg,
                $darker 10px, $lighter 10px,
                $lighter 20px, $darker 20px,
                $darker 30px, $lighter 30px
        ) repeat;
        background-size: 29px 29px;
        animation: mc-progress 1s linear infinite;
    }
}

@mixin user-select($value) {
    -webkit-user-select: $value;
    -moz-user-select: $value;
    -ms-user-select: $value;
    user-select: $value;
}

@mixin input-placeholder {
    &::placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin cursor-grab {
    cursor: -webkit-grab;
    cursor: grab;
}

@mixin cursor-grabbing {
    cursor: -webkit-grabbing;
    cursor: grabbing;
}



$mc-button-border-size: 1px;
$mc-button-border-radius: 3px;


@mixin mc-button-reset {
    @include user-select(none);
    cursor: pointer;
    outline: none;
    border: none;
}




@mixin border-top-radius($radius) {
    border-top: {
        right-radius: $radius;
        left-radius: $radius;
    }
}

@mixin border-bottom-radius($radius) {
    border-bottom: {
        right-radius: $radius;
        left-radius: $radius;
    }
}

@mixin border-right-radius($radius) {
    border: {
        bottom-right-radius: $radius;
        top-right-radius: $radius;
    }
}

@mixin border-left-radius($radius) {
    border: {
        bottom-left-radius: $radius;
        top-left-radius: $radius;
    }
}

.mc-group {
    display: flex;
    flex-direction: row;

    & > .mc-group-item:first-child:not(:last-child) {
        @include border-right-radius(0);

        > .mc-form-field__container {
            @include border-right-radius(0);
        }
    }

    & > .mc-group-item:last-child:not(:first-child) {
        @include border-left-radius(0);

        > .mc-form-field__container {
            @include border-left-radius(0);
        }
    }

    & > .mc-group-item:not(:first-child):not(:last-child) {
        border-radius: 0;

        > .mc-form-field__container {
            border-radius: 0;
        }
    }

    .mc-group-item + .mc-group-item {
        margin-left: -$mc-button-border-size;
    }
}

.mc-group_justified {
    > .mc-group-item {
        width: 100%;
    }
}

.mc-vertical-group {
    display: flex;
    flex-direction: column;

    > .mc-group-item {
        &:first-child:not(:last-child) {
            @include border-bottom-radius(0);

            border-top-right-radius: $mc-button-border-radius;

            > .mc-form-field__container {
                @include border-bottom-radius(0);
            }
        }

        &:last-child:not(:first-child) {
            @include border-top-radius(0);

            border-bottom-left-radius: $mc-button-border-radius;

            > .mc-form-field__container {
                @include border-top-radius(0);
            }
        }

        &:not(:first-child):not(:last-child) {
            border-radius: 0;

            > .mc-form-field__container {
                border-radius: 0;
            }
        }
    }

    .mc-group-item + .mc-group-item {
        margin-top: -$mc-button-border-size;
    }
}



@mixin cdk-a11y {

    .cdk-visually-hidden {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;

        // Avoid browsers rendering the focus ring in some cases.
        outline: 0;

        // Avoid some cases where the browser will still render the native controls (see #9049).
        -webkit-appearance: none;
        -moz-appearance: none;
    }
}

@mixin cdk-high-contrast($target: active) {
    @media screen and (-ms-high-contrast: $target) {
        @content;
    }
}

// We want overlays to always appear over user content, so set a baseline
// very high z-index for the overlay container, which is where we create the new
// stacking context for all overlays.
$cdk-z-index-overlay-container: 1000 !default;
$cdk-z-index-overlay: 1000 !default;
$cdk-z-index-overlay-backdrop: 1000 !default;

// Background color for all of the backdrops
$cdk-overlay-dark-backdrop-background: rgba(0, 0, 0, 0.32) !default;

// Default backdrop animation is based on the Material Design swift-ease-out.
$backdrop-animation-duration: 400ms !default;
$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;


@mixin cdk-overlay() {
  .cdk-overlay-container, .cdk-global-overlay-wrapper {
    // Disable events from being captured on the overlay container.
    pointer-events: none;

    // The container should be the size of the viewport.
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  // The overlay-container is an invisible element which contains all individual overlays.
  .cdk-overlay-container {
    position: fixed;
    z-index: $cdk-z-index-overlay-container;

    &:empty {
      // Hide the element when it doesn't have any child nodes. This doesn't
      // include overlays that have been detached, rather than disposed.
      display: none;
    }
  }

  // We use an extra wrapper element in order to use make the overlay itself a flex item.
  // This makes centering the overlay easy without running into the subpixel rendering
  // problems tied to using `transform` and without interfering with the other position
  // strategies.
  .cdk-global-overlay-wrapper {
    display: flex;
    position: absolute;
    z-index: $cdk-z-index-overlay;
  }

  // A single overlay pane.
  .cdk-overlay-pane {
    // Note: it's important for this one to start off `absolute`,
    // in order for us to be able to measure it correctly.
    position: absolute;
    pointer-events: auto;
    box-sizing: border-box;
    z-index: $cdk-z-index-overlay;

    // For connected-position overlays, we set `display: flex` in
    // order to force `max-width` and `max-height` to take effect.
    display: flex;
    max-width: 100%;
    max-height: 100%;
  }

  .cdk-overlay-backdrop {
    // TODO(jelbourn): reuse sidenav fullscreen mixin.
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;

    z-index: $cdk-z-index-overlay-backdrop;
    pointer-events: auto;
    -webkit-tap-highlight-color: transparent;
    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;
    opacity: 0;

    &.cdk-overlay-backdrop-showing {
      opacity: 1;

      // In high contrast mode the rgba background will become solid so we need to fall back
      // to making it opaque using `opacity`. Note that we can't use the `cdk-high-contrast`
      // mixin, because we can't normalize the import path to the _a11y.scss both for the
      // source and when this file is distributed. See #10908.
      @media screen and (-ms-high-contrast: active) {
        opacity: 0.6;
      }
    }
  }

  .cdk-overlay-dark-backdrop {
    background: $cdk-overlay-dark-backdrop-background;
  }

  .cdk-overlay-transparent-backdrop {
    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from
    // capturing the user's mouse scroll events. Since we also can't use something like
    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at
    // all and using `opacity` to make the element transparent.
    &, &.cdk-overlay-backdrop-showing {
      opacity: 0;
    }
  }

  // Overlay parent element used with the connected position strategy. Used to constrain the
  // overlay element's size to fit within the viewport.
  .cdk-overlay-connected-position-bounding-box {
    position: absolute;
    z-index: $cdk-z-index-overlay;

    // We use `display: flex` on this element exclusively for centering connected overlays.
    // When *not* centering, a top/left/bottom/right will be set which overrides the normal
    // flex layout.
    display: flex;

    // We use the `column` direction here to avoid some flexbox issues in Edge
    // when using the "grow after open" options.
    flex-direction: column;

    // Add some dimensions so the element has an `innerText` which some people depend on in tests.
    min-width: 1px;
    min-height: 1px;
  }

  // Used when disabling global scrolling.
  .cdk-global-scrollblock {
    position: fixed;

    // Necessary for the content not to lose its width. Note that we're using 100%, instead of
    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width
    // that the element had before we made it `fixed`.
    width: 100%;

    // Note: this will always add a scrollbar to whatever element it is on, which can
    // potentially result in double scrollbars. It shouldn't be an issue, because we won't
    // block scrolling on a page that doesn't have a scrollbar in the first place.
    overflow-y: scroll;
  }
}


$black-12-opacity: rgba(black, 0.12);
$black-6-opacity:  rgba(black, 0.06);

$white-12-opacity: rgba(white, 0.12);

$dark-text-default:     #4d4d4d;
$dark-text-secondary:   #999999;
$dark-text-disabled:    #b3b3b3;

$dark-icon-secondary:   #cccccc;

$light-text-default:    #f0f0f0;
$light-text-secondary:  #999999;
$light-text-disabled:   #999999;

$light-icon-secondary:  #999999;

$mc-blue: (
    40: #f5fafd,
    60: #ebf4fb,
    100: #d8eaf7,
    200: #aad1ec,
    300: #7fbae1,
    400: #57a4d7,
    500: #338fcc,
    560: #277bb3,
    600: #206ea2,
    700: #114e77,
    800: #07314d,
    A100: rgba(0, 153, 255, 0.15),
    A200: rgba(0, 153, 255, 0.3),
    contrast: (
        40: $dark-text-default,
        60: $dark-text-default,
        100: $dark-text-default,
        200: $dark-text-default,
        300: $dark-text-default,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: $dark-text-default,
        A200: white,
    )
);

$mc-green: (
    40: #f6fbf4,
    60: #edf8e9,
    100: #dcf1d4,
    200: #b4dea4,
    300: #8fcc79,
    400: #6fba53,
    500: #52a832,
    560: #449327,
    600: #3b8520,
    700: #276211,
    800: #163f07,
    A100: rgba(68, 255, 0, 0.15),
    contrast: (
        40: $dark-text-default,
        60: $dark-text-default,
        100: $dark-text-default,
        200: $dark-text-default,
        300: $dark-text-default,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: $dark-text-default,
    )
);

$mc-red: (
    40: #fef7f6,
    60: #fcefec,
    100: #fadeda,
    200: #f4b7ae,
    300: #ed9284,
    400: #e76e5c,
    500: #e04d36,
    560: #c43e29,
    600: #b23522,
    700: #8.2.1-0911f9a2,
    800: #541208,
    A100: rgba(224, 79, 56, 0.15),
    contrast: (
        40: $dark-text-default,
        60: $dark-text-default,
        100: $dark-text-default,
        200: $dark-text-default,
        300: $dark-text-default,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: $dark-text-default,
    )
);

$mc-grey: (
    40: #f5f5f5,
    60: #f0f0f0,
    100: #e6e6e6,
    200: #cccccc,
    300: #b3b3b3,
    400: #999999,
    500: #808080,
    560: #707070,
    600: #666666,
    700: #4d4d4d,
    800: #333333,
    A40: rgba(0, 0, 0, 0.04),
    A60: rgba(0, 0, 0, 0.06),
    A100: rgba(0, 0, 0, 0.1),
    A200: rgba(0, 0, 0, 0.2),
    A300: rgba(0, 0, 0, 0.3),
    A500: rgba(0, 0, 0, 0.5),
    contrast: (
        40: $dark-text-default,
        60: $dark-text-default,
        100: $dark-text-default,
        200: $dark-text-default,
        300: $dark-text-default,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
    )
);

$mc-yellow: (
    40: #fdfaf3,
    60: #fcf5e8,
    100: #f8ebd1,
    200: #f0d49b,
    300: #e7bd68,
    400: #dfa739,
    500: #d6930d,
    560: #bb800a,
    600: #aa7408,
    700: #7d5504,
    800: #503602,
    A100: rgba(255, 170, 0, 0.15),
    contrast: (
        40: $dark-text-default,
        60: $dark-text-default,
        100: $dark-text-default,
        200: $dark-text-default,
        300: $dark-text-default,
        400: white,
        500: white,
        560: white,
        600: white,
        700: white,
        800: white,
        A100: $dark-text-default,
    )
);


$mc-light-theme-foreground: (
    base:              black, //скорей всего это fg-default-text
    disabled:          $dark-text-disabled,
    disabled-button:   rgba(black, 0.26),
    hint-text:         rgba(black, 0.38),
    icon:              rgba(black, 0.54),
    secondary-text:    rgba(black, 0.54), //скорей всего это fg-less-contrast-text

    // ↓ новое
    text:               $dark-text-default,
    less-contrast-text: $dark-text-secondary,
    disabled-text:      $dark-text-disabled,

    default-icon:       rgba(transparent, 0.45),

    divider:            map-get($mc-grey, 100)
);

$mc-dark-theme-foreground: (
    base:               white,
    disabled:           rgba(white, 0.3),
    disabled-button:    rgba(white, 0.3),
    hint-text:          rgba(white, 0.3),
    icon:               white,
    secondary-text:     rgba(white, 0.7),

    // ↓ новое
    text:               $light-text-default,
    less-contrast-text: $light-text-secondary,
    disabled-text:      $light-text-disabled,

    default-icon:       rgba(white, 1),

    divider:            map-get($mc-grey, 600)
);

$mc-light-theme-background: (
    disabled-button:      $black-12-opacity,
    selected-button:      grey,
    focused-button:       $black-6-opacity,
    disabled-list-option: #CCC,

    // ↓ новое
    background:           white,
    // todo not used
    bg-content:           map-get($mc-grey, 60),
    bg-dropdowns:         map-get($mc-grey, 700),

    button-bg:            map-get($mc-grey, 60),
    button-border:        map-get($mc-grey, 200),
    disabled-overlay:     rgba(white, 0.3),

    hover:                rgba(black, 0.05),

    in-shadow:            inset 0 1px 2px 0 rgba(black, 0.2),
);

$mc-dark-theme-background: (
    disabled-button:      $white-12-opacity,
    selected-button:      grey,
    focused-button:       $black-6-opacity,
    disabled-list-option: #CCC,

    // ↓ новое
    background:           map-get($mc-grey, 800),
    // todo not used
    bg-content:           map-get($mc-grey,  60),
    bg-dropdowns:         white,

    // цвет бордера зависит от палитры
    button-bg:            map-get($mc-grey, 600),
    button-border:        map-get($mc-grey, 500),
    disabled-overlay:     rgba(black, 0.2),

    hover:                rgba(white, 0.05),

    in-shadow:            inset 1px 2px 2px 0 rgba(black, 0.2),
);



@function mc-contrast($palette, $hue) {
    @return map-get(map-get($palette, contrast), $hue);
}

@function mc-palette($base-palette, $lighter: 100, $default: 500, $darker: 700) {
    $result: map_merge($base-palette, (
        default: map-get($base-palette, $default),
        lighter: map-get($base-palette, $lighter),
        darker:  map-get($base-palette, $darker),

        default-contrast: mc-contrast($base-palette, $default),
        lighter-contrast: mc-contrast($base-palette, $lighter),
        darker-contrast:  mc-contrast($base-palette, $darker)
    ));

    // For each hue in the palette, add a "-contrast" color to the map.
    @each $hue, $color in $base-palette {
        $result: map_merge($result, (
            '#{$hue}-contrast': mc-contrast($base-palette, $hue)
        ));
    }

    @return $result;
}

@function mc-color($palette, $hue: default, $opacity: null) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return mc-color($palette, default, $hue);
    }

    $color: map-get($palette, $hue);
    $opacity: if($opacity == null, opacity($color), $opacity);

    @return rgba($color, $opacity);
}

// todo additional palette should be refactored asap (possibly to separated palette)
@function mc-light-theme(
    $primary,
    $second,
    $error,

    $info: mc-palette($mc-blue),
    $success: mc-palette($mc-green),
    $warning: mc-palette($mc-yellow)
) {
    @return (
        is-dark: false,

        primary: $primary,
        second: $second,
        error: $error,

        foreground: $mc-light-theme-foreground,
        background: $mc-light-theme-background,

        warning: $warning,
        success: $success,
        info: $info,
    );
}

@function mc-dark-theme(
    $primary,
    $second,
    $error,

    $info: mc-palette($mc-blue),
    $success: mc-palette($mc-green),
    $warning: mc-palette($mc-yellow)
) {
    @return (
        is-dark: true,

        primary: $primary,
        second: $second,
        error: $error,

        foreground: $mc-dark-theme-foreground,
        background: $mc-dark-theme-background,

        warning: $warning,
        success: $success,
        info: $info,
    );
}



@mixin mc-pseudo-checkbox-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-pseudo-checkbox {
        border-color: mc-color($second);
        background-color: map-get($background, background);;

        & .mc-checkbox-checkmark,
        & .mc-checkbox-mixedmark {
            color: white;
        }

        &.mc-checked {
            border-color: mc-color($primary, if($is-dark-theme, lighter, darker));

            background: if($is-dark-theme, mc-color($primary, 600), mc-color($primary));
        }

        &.mc-disabled {
            border-color: map-get($background, button-border);

            background-color: map-get($background, button-bg);

            .mc-checkbox-checkmark,
            .mc-checkbox-mixedmark {
                color: map-get($foreground, disabled-text);
            }
        }
    }
}



$typography-font-weight-values: (
    thin: 100,
    light: 300,
    regular: 400,
    medium: 500,
    bold: 700,
    black: 900
) !default;


// TODO add caption-height
$fonts: (
    base: (
        font-family: #{Roboto, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif}
    ),
    monospace: (
        font-family: #{'Roboto Mono', 'Consolas', 'Menlo', 'Monaco', monospace}
    )
);




@function mc-typography-level(
    $font-size,
    $line-height: $font-size,
    $letter-spacing: normal,
    $font-weight: normal,
    $font-family: null,
    $text-transform: null
) {
    @return (
        font-size: $font-size,
        line-height: $line-height,
        font-weight: $font-weight,
        font-family: $font-family,
        letter-spacing: $letter-spacing,
        text-transform: $text-transform
    );
}

@function _mc-get-type-value($config, $level, $name) {
    @return map-get(map-get($config, $level), $name);
}

@function mc-font-size($config, $level) {
    @return _mc-get-type-value($config, $level, font-size);
}

@function mc-line-height($config, $level) {
    @return _mc-get-type-value($config, $level, line-height);
}

@function mc-font-weight($config, $level) {
    @return _mc-get-type-value($config, $level, font-weight);
}

@function mc-letter-spacing($config, $level) {
    @return _mc-get-type-value($config, $level, letter-spacing);
}

@function mc-text-transform($config, $level) {
    @return _mc-get-type-value($config, $level, text-transform);
}

// Gets the font-family from a typography config and removes the quotes around it.
@function mc-font-family($config, $level: null) {
    $font-family: map-get($config, font-family);

    @if $level != null {
        $font-family: _mc-get-type-value($config, $level, font-family);
    }

    // Guard against unquoting non-string values, because it's deprecated.
    @return if(type-of($font-family) == string, unquote($font-family), $font-family);
}

@mixin mc-typography-level-to-styles($config, $level) {
    $font-size: mc-font-size($config, $level);
    $font-weight: mc-font-weight($config, $level);
    $line-height: mc-line-height($config, $level);
    $font-family: mc-font-family($config, $level);
    $text-transform: mc-font-family($config, $level);

    font: $font-weight #{$font-size}/#{$line-height} $font-family;
    letter-spacing: mc-letter-spacing($config, $level);
    text-transform: mc-text-transform($config, $level);
}

@mixin mc-base-typography($config) {
    .mc-display-1 {
        @include mc-typography-level-to-styles($config, display-1);
    }

    .mc-display-2 {
        @include mc-typography-level-to-styles($config, display-2);
    }

    .mc-display-3 {
        @include mc-typography-level-to-styles($config, display-3);
    }

    .mc-headline {
        @include mc-typography-level-to-styles($config, headline);
    }

    .mc-subheading {
        @include mc-typography-level-to-styles($config, subheading);
    }

    .mc-title {
        @include mc-typography-level-to-styles($config, title);
    }

    .mc-body {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-body_strong {
        @include mc-typography-level-to-styles($config, body-strong);
    }

    .mc-body_caps {
        @include mc-typography-level-to-styles($config, body-caps);
    }

    .mc-body_mono {
        @include mc-typography-level-to-styles($config, body-mono);
    }

    .mc-caption {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-caption_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }

    .mc-caption_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-small-text {
        @include mc-typography-level-to-styles($config, small-text);
    }

    .mc-extra-small-text {
        @include mc-typography-level-to-styles($config, extra-small-text);
    }
}



@function mc-typography-config(
    $font-family:   map-get(map-get($fonts, base), font-family),
    $font-family-mono:   map-get(map-get($fonts, monospace), font-family),

    $display-1:     mc-typography-level(56px, 76px, -0.4px),
    $display-2:     mc-typography-level(45px, 56px),
    $display-3:     mc-typography-level(34px, 44px, 0.25px),

    $headline:      mc-typography-level(24px, 32px),
    $title:         mc-typography-level(20px, 28px, 0.15px, 500),
    $subheading:    mc-typography-level(15px, 20px, 0.15px, 500),

    $body:          mc-typography-level(15px, 20px, 0.15px),
    $body-strong:   mc-typography-level(15px, 20px, 0.15px, 500),
    $body-caps:     mc-typography-level(15px, 20px, 1.7px, normal, $font-family, uppercase),
    $body-mono:     mc-typography-level(15px, 20px, normal, normal, $font-family-mono),

    $caption:       mc-typography-level(13px, 16px, 0.25px),
    $caption-caps:  mc-typography-level(13px, 16px, 1.5px, normal, $font-family, uppercase),
    $caption-mono:  mc-typography-level(13px, 16px, normal, normal, $font-family-mono),

    $small-text:    mc-typography-level(13px, 16px, 0.25px),
    $extra-small-text:    mc-typography-level(11px, 16px, 0.22px)
) {

    $config: (
        display-1:      $display-1,
        display-2:      $display-2,
        display-3:      $display-3,

        headline:       $headline,
        subheading:     $subheading,
        title:          $title,

        body:           $body,
        body-strong:    $body-strong,
        body-caps:      $body-caps,
        body-mono:      $body-mono,

        caption:        $caption,
        caption-caps:   $caption-caps,
        caption-mono:   $caption-mono,

        small-text:     $small-text,
        extra-small-text: $extra-small-text
    );

    @each $key, $level in $config {
        @if map-get($level, font-family) == null {
            $new-level: map-merge($level, (font-family: $font-family));
            $config: map-merge($config, ($key: $new-level));
        }
    }

    // Add the base font family to the config.
    @return map-merge($config, (font-family: $font-family));
}






.mc-alert {
    display: flex;
    align-items: baseline;

    vertical-align: top;
    text-align: left;

    border: 1px solid transparent;
    border-radius: 4px;

    .mc-link {
        padding-left: 0;
    }

    .mc-alert__icon {
        margin-right: 8px;
    }

    &.mc-alert_small {
        // todo откуда такие паддинги ?
        padding: 11px 15px;

        &.mc-alert_dismissible {
            padding-right: 32px;
        }
    }

    &:not(.mc-alert_small) {
        // todo откуда такие паддинги ?
        padding: 13px 15px;

        &.mc-alert_dismissible {
            padding-right: 32px;
        }
    }
}

.mc-alert_dismissible {
    position: relative;

    .mc-alert__close {
        position: absolute;

        z-index: 10;
        right: 15px;

        border: 1px solid transparent;
        outline: 0;

        margin: 0;

        background: transparent;

        padding: 0;

        cursor: pointer;
        text-align: center;
    }

    &.mc-alert_small {
        .mc-alert__close {
            top: 10px;
        }
    }

    &:not(.mc-alert_small) {
        .mc-alert__close {
            top: 14px;
        }
    }
}

@mixin alert-theme($color, $is-dark) {
    background-color: mc-color($color, if($is-dark, darker, lighter));
    border-color: mc-color($color, if($is-dark, darker, default));

    .mc-alert__icon {
        color: mc-color($color, if($is-dark, default, darker));
    }
}

@mixin mc-alert-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $warning: map-get($theme, warning);
    $success: map-get($theme, success);
    $info: map-get($theme, info);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-alert__close:focus {
        outline: none;
    }

    .mc-alert {
        color: mc-color($foreground, text);
    }

    .mc-alert_error {
        background-color: mc-color($error, if($is-dark, darker, lighter));
        // todo $error более темный в светлой теме
        border-color: mc-color($error, if($is-dark, darker, 200));

        .mc-alert__icon {
            color: mc-color($error, if($is-dark, default, 400));
        }
    }

    .mc-alert_warning {
        @include alert-theme($warning, $is-dark);
    }

    .mc-alert_success {
        @include alert-theme($success, $is-dark);
    }

    .mc-alert_info {
        @include alert-theme($info, $is-dark);
    }

    .mc-alert:not(.mc-alert_error):not(.mc-alert_warning):not(.mc-alert_success):not(.mc-alert_info) {
        background-color: mc-color($second, if($is-dark, darker, lighter));
        border-color: mc-color($second, if($is-dark, darker, 200));

        .mc-alert__icon {
            color: mc-color($second, if($is-dark, default, 400));
        }
    }
}

@mixin mc-alert-typography($config) {

    .mc-alert:not(.mc-alert_small) {
        @include mc-typography-level-to-styles($config, body);

        header {
            @include mc-typography-level-to-styles($config, subheading);
        }
    }

    .mc-alert.mc-alert_small {
        @include mc-typography-level-to-styles($config, caption);

        header {
            @include mc-typography-level-to-styles($config, caption);
        }

        .mc-link__text {
            @include mc-typography-level-to-styles($config, caption);
        }
    }

    .mc-icon {
        letter-spacing: unset;
    }
}






.mc-badge {
    display: inline-block;

    vertical-align: middle;

    min-width: 10px;

    padding: 4px 8px;

    border: {
        width: 1px;
        style: solid;
        radius: 4px;
    }

    text-align: center;
    white-space: nowrap;
}


@mixin mc-badge-color($color, $is-dark) {
    color: white;

    $color: mc-color($color, if($is-dark, 700, 500));

    border-color: $color;
    background-color: $color;
}

@mixin mc-badge-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);
    $warning: map-get($theme, warning);
    $success: map-get($theme, success);
    $info: map-get($theme, info);

    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    .mc-badge {
        color: map-get($foreground, text);
        border-color: mc-color($second, 400);
    }

    .mc-badge_light {
        $color: mc-color($second, if($is-dark, 400, 100));

        border-color: $color;
        background-color: $color;
    }

    .mc-badge_second {
        @include mc-badge-color($second, $is-dark);
    }

    .mc-badge_primary {
        @include mc-badge-color($primary, $is-dark);
    }

    .mc-badge_error {
        @include mc-badge-color($error, $is-dark);
    }

    .mc-badge_info {
        @include mc-badge-color($info, $is-dark);
    }

    .mc-badge_success {
        @include mc-badge-color($success, $is-dark);
    }

    .mc-badge_warning {
        @include mc-badge-color($warning, $is-dark);
    }
}

@mixin mc-badge-typography($config) {

    .mc-badge {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-badge_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }
}



@mixin mc-autocomplete-theme($theme) {
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-autocomplete-panel {
        color: mc-color($foreground, text);

        background-color: if($is-dark, map-get($second, 700), map-get($background, background));

        border-color: mc-color($second);

        box-shadow: 0 3px 3px 0 mc-color($second, A200);

        .mc-selected {
            background-color: if($is-dark, map-get($second, 700), map-get($background, background));
        }
    }
}

@mixin mc-autocomplete-typography($config) {
}




@mixin _mc-button-primary-color($palette, $foreground, $background) {
    border-color: map-get($palette, 560);
    background: mc-color($palette, 500);
    color: mc-contrast($palette, 500);

    .mc-button-overlay {
        background: transparent;
    }

    .mc-icon {
        color: mc-contrast($palette, 500);
    }

    &:hover,
    &.mc-hover {
        & .mc-button-overlay {
            background: map-get($background, hover);
        }
    }

    &:active,
    &.mc-active {
        border-color: darken(mc-color($palette, 560), 5);
        background: darken(mc-color($palette, 500), 5);
        box-shadow: map-get($background, in-shadow);
    }

    &.mc-disabled,
    &[disabled] {
        border-color: map-get($palette, 500);
        color: transparentize(mc-contrast($palette, 500), 0.5);

        & .mc-button-overlay {
            background: mc-color($background, disabled-overlay);
        }

        .mc-icon {
            color: transparentize(mc-contrast($palette, 500), 0.5);
        }
    }
}

@mixin _mc-button-second-color($palette, $foreground, $background) {
    border-color: mc-color($background, button-border);
    background: map-get($background, button-bg);
    color: map-get($foreground, text);

    .mc-icon {
        color: map-get($foreground, text);
    }

    &:hover,
    &.mc-hover {
        & .mc-button-overlay {
            background: map-get($background, hover);
        }
    }

    &:active,
    &.mc-active {
        border-color: darken(mc-color($background, button-border), 5);
        background: darken(map-get($background, button-bg), 5);
        box-shadow: map-get($background, in-shadow);
    }

    &.mc-disabled,
    &[disabled] {
        border-color: mc-color($background, button-bg);
        color: map-get($foreground, disabled-text);

        & .mc-button-overlay {
            background: mc-color($background, disabled-overlay);
        }

        .mc-icon {
            color: map-get($foreground, disabled-text);
        }
    }
}

@mixin _mc-button-error-color($second, $error, $foreground, $background) {
    @include _mc-button-second-color($second, $foreground, $background);

    color: mc-color($error);

    .mc-icon {
        color: mc-color($error, 400);
    }

    &.mc-disabled,
    &[disabled] {
        border-color: mc-color($background, button-bg);
        color: map-get($foreground, disabled-text);

        & .mc-button-overlay {
            background: mc-color($background, disabled-overlay);
        }

        .mc-icon {
            color: map-get($foreground, disabled-text);
        }
    }
}

@mixin _mc-button-theme-color($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);
    $is-dark: map-get($theme, is-dark);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    &.mc-primary {
        @include _mc-button-primary-color($primary, $foreground, $background);
    }

    &.mc-second {
        @include _mc-button-second-color($second, $foreground, $background);
    }

    &.mc-error {
        @include _mc-button-error-color($second, $error, $foreground, $background);
    }

    &.mc-primary,
    &.mc-second,
    &.mc-error {
        -webkit-font-smoothing: antialiased;

        &.cdk-keyboard-focused {
            $focus-color: mc-color($primary);

            border-color: $focus-color;
            box-shadow: 0 0 0 1px $focus-color;
        }
    }
}

@mixin mc-button-theme($theme) {
    .mc-button,
    .mc-icon-button {
        @include _mc-button-theme-color($theme);

        &.mc-button_transparent {
            border-color: transparent;
            background-color: transparent;

            &.mc-disabled,
            &[disabled] {
                border-color: transparent;
            }

            &:active,
            &.mc-active {
                border-color: transparent;
                background-color: transparent;
                box-shadow: none;
            }
        }
    }
}

@mixin mc-button-typography($config) {
    .mc-button,
    .mc-icon-button {
        @include mc-typography-level-to-styles($config, body);

        &.mc-primary {
            @include mc-typography-level-to-styles($config, body-strong);
        }
    }

    .mc-icon-button.mc-button-wrapper {
        .mc-icon {
            line-height: mc-line-height($config, body);
        }
    }
}



@mixin mc-button-toggle-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);
    $divider-color: mc-color($foreground, divider);

    .mc-button-toggle-standalone {
        box-shadow: none;
    }

    .mc-button-toggle-vertical {
        .mc-button-toggle + .mc-button-toggle {
            border-left: none;
            border-right: none;
        }
    }

    .mc-button-toggle[disabled] {
        outline: 0;
    }

    .mc-button-toggle-checked:not([disabled]) {
        .mc-button,
        .mc-icon-button {
            background: darken(map-get($background, button-bg), 5);
        }

        &:not(.cdk-keyboard-focused) {
            .mc-button,
            .mc-icon-button {
                border-color: darken(mc-color($background, button-border), 5);
                box-shadow: map-get($background, in-shadow);
            }
        }
    }
}

@mixin mc-button-toggle-typography($config) {
    .mc-button-toggle {
        font-family: mc-font-family($config);
    }
}




// Width and height of input toggles
$mc-toggle-size: 16px !default;

$zindex-modal-mask      : 1000;
$zindex-modal           : 1000;
$zindex-notification    : 1010;
$zindex-message         : 1010;
$zindex-popover         : 1030;
$zindex-picker          : 1050;
$zindex-dropdown        : 1050;
$zindex-tooltip         : 1060;

// The default animation curves used by material design.
$mc-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;
$mc-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;
$mc-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;

$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;

$swift-ease-out-duration: 400ms !default;
$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;
$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;

$swift-ease-in-duration: 300ms !default;
$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;
$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;

$swift-ease-in-out-duration: 500ms !default;
$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;
$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;

$swift-linear-duration: 80ms !default;
$swift-linear-timing-function: linear !default;
$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;


@mixin mc-checkbox-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    $focus-color: mc-color($primary);

    .mc-checkbox-frame {
        border-color: mc-color($second);

        & .mc-checkbox-checkmark,
        & .mc-checkbox-mixedmark {
            color: white;
        }
    }

    .mc-checkbox {
        color: map-get($foreground, text);

        &:hover {
            .mc-checkbox-frame {
                background: mix(map-get($background, background), map-get($background, hover), 5);
            }
        }

        &.mc-checked,
        &.mc-indeterminate {
            .mc-checkbox-frame {
                border-color: mc-color($primary, if($is-dark, lighter, darker));

                background: if($is-dark, mc-color($primary, 600), mc-color($primary));
            }
        }

        & .mc-checkbox-input.cdk-keyboard-focused {
            + .mc-checkbox-frame {
                border-color: $focus-color;
                box-shadow: inset 0 0 0 1px white, 0 0 0 1px $focus-color;
            }
        }

        &.mc-disabled {
            color: map-get($foreground, disabled-text);

            .mc-checkbox-frame {
                border-color: map-get($background, button-border);

                background-color: map-get($background, button-bg);
            }

            .mc-checkbox-checkmark,
            .mc-checkbox-mixedmark {
                color: map-get($foreground, disabled-text);
            }
        }
    }
}

@mixin mc-checkbox-typography($config) {
    .mc-checkbox {
        @include mc-typography-level-to-styles($config, body);
    }
}






$mc-datepicker-selected-today-box-shadow-width: 1px;
$mc-datepicker-selected-fade-amount: 0.6;
$mc-datepicker-today-fade-amount: 0.2;

@mixin _mc-datepicker-color($color) {
    .mc-calendar__body_selected {
        background: $color;
    }

    .mc-calendar__body_disabled > .mc-calendar__body_selected {
        background-color: fade-out($color, $mc-datepicker-selected-fade-amount);
    }
}

@mixin mc-datepicker-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-calendar {
        border: {
            color: mc-color($second);
            width: 1px;
            style: solid;
        }
    }

    .mc-calendar__table-header {
        color: mc-color($second, 400);
    }

    .mc-datepicker-toggle__button.mc-icon-button {
        border-color: transparent;
        border-radius: 0;
        background: transparent;

        .mc-icon {
            color: mc-color($second, 400);
        }
    }

    .mc-calendar__table-header-divider::after {
        background: mc-color($foreground, divider);
    }

    .mc-calendar__body-label {
        color: mc-color($foreground, text);
    }

    .mc-calendar__body-cell-content {
        color: mc-color($foreground, text);
        border-color: transparent;
    }

    .mc-calendar__body_disabled > .mc-calendar__body-cell-content:not(.mc-calendar__body_selected) {
        color: mc-color($foreground, disabled-text);
    }

    .cdk-keyboard-focused .mc-calendar__body_active,
    .cdk-program-focused .mc-calendar__body_active {
        & > .mc-calendar__body-cell-content {
            $focus-color: mc-color($primary);

            border-color: $focus-color;
            box-shadow: 0 0 0 1px $focus-color;
        }
    }

    .mc-calendar__body-cell:not(.mc-calendar__body_disabled):hover {
        & > .mc-calendar__body-cell-content:not(.mc-calendar__body_selected) {
            background-color: mc-color($second, A60);
        }
    }

    .mc-calendar__controls {
        .mc-button, .mc-icon-button {
            border-radius: 0;
            border-color: transparent;
            background-color: transparent;

            .mc-button-overlay {
                z-index: -1;
            }

            &:hover {
                background: mc-color($second, A60);
            }
        }
    }

    .mc-calendar__body-today {
        color: mc-color($primary, 500);
    }

    .mc-calendar__body_disabled > .mc-calendar__body-today:not(.mc-calendar__body_selected) {
        border-color: fade-out(mc-color($foreground, text), $mc-datepicker-today-fade-amount);
    }

    @include _mc-datepicker-color(mc-color($primary, if($is-dark, 700, 100)));

    .mc-datepicker__content {
        box-shadow: 0 1px 10px 0 rgba(black, 0.12);
        background-color: if($is-dark, map-get($second, 700), map-get($background, background));
        color: mc-color($foreground, text);

        &.mc-warn {
            @include _mc-datepicker-color(mc-color(map-get($theme, error)));
        }
    }

    .mc-datepicker-toggle_active {
        color: mc-color(map-get($theme, primary));

        &.mc-warn {
            color: mc-color(map-get($theme, error));
        }
    }
}

@mixin mc-datepicker-typography($config) {
    .mc-calendar {
        font-family: mc-font-family($config);
    }

    .mc-calendar__body {
        font-size: mc-font-size($config, body);
    }

    .mc-calendar__period-button {
        font: {
            size: mc-font-size($config, body);
            weight: mc-font-weight($config, body);
        }
    }

    .mc-calendar__body-label {
        font: {
            size: mc-font-size($config, body-strong);
            weight: mc-font-weight($config, body-strong);
        }
    }

    .mc-calendar__table-header th {
        font: {
            size: mc-font-size($config, caption);
            weight: mc-font-weight($config, body);
        }
    }

    .mc-calendar__body-today {
        font-weight: mc-font-weight($config, body-strong);
    }
}





@mixin mc-dropdown-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-dropdown__panel {
        border-color: mc-color($second);

        box-shadow: 0 3px 3px 0 mc-color($second, A200);

        background-color: if($is-dark, map-get($second, 700), map-get($background, background));
    }

    .mc-dropdown__item {
        color: mc-color($foreground, text);

        background: transparent;

        &:hover,
        &.mc-hovered {
            background: mc-color($background, hover);
        }

        &.cdk-keyboard-focused {
            outline: mc-color($primary) solid 2px;
            outline-offset: -2px;

            &.mc-link {
                outline-offset: -2px;
            }

        }

        &.mc-selected {
            background: mc-color($primary, if($is-dark, 700, 100));
        }

        &[disabled] {
            color: mc-color($foreground, disabled-text);

            background: transparent;
        }

        .mc-dropdown__item-caption {
            color: mc-color($foreground, less-contrast-text);
        }
    }

    .mc-dropdown__item_highlighted {
        &:not([disabled]) {
            background: mc-color($background, hover);
        }
    }
}

@mixin mc-dropdown-typography($config) {
    .mc-dropdown__item,
    .mc-dropdown__content {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-dropdown__item-caption {
        @include mc-typography-level-to-styles($config, caption);
    }
}





@mixin mc-form-field-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-form-field {
        background: {
            color: map-get($background, background);
        }

        &:not(.mc-form-field_without-borders) {
            .mc-form-field__container {
                border: {
                    color: mc-color($second);
                }
            }

            &:hover .mc-form-field__container {
                border: {
                    color: mc-color($second, if($is-dark-theme, lighter, darker));
                }
            }

            &.mc-focused:not(.ng-invalid) .mc-form-field__container {
                border: {
                    color: mc-color($primary);
                }

                box-shadow: 0 0 0 1px mc-color($primary);
            }

            &.ng-invalid .mc-form-field__container {
                background: {
                    color: if($is-dark-theme, transparent, mc-color($error, lighter));
                }

                border: {
                    color: mc-color($error);
                }

                .mc-input,
                .mc-textarea {
                    color: mc-color($error);
                }
            }

            &.ng-invalid.mc-focused .mc-form-field__container {
                box-shadow: 0 0 0 1px mc-color($error);
            }

            &.mc-disabled .mc-form-field__container {
                border: {
                    color: mix(map-get($background, button-border), map-get($background, disabled-overlay));
                }

                background: {
                    color: mix(map-get($background, button-bg), map-get($background, disabled-overlay));
                }

                .mc-icon,
                .mc-input,
                .mc-textarea {
                    color: mc-color($foreground, disabled-text);
                }
            }
        }
    }

    .mc-form-field__hint {
        color: mc-color($second, 400);
    }

    .mc-form-field__prefix .mc-icon {
        color: map-get($foreground, disabled-text);
    }
}

@mixin mc-form-field-typography($config) {
    .mc-form-field {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-form-field__hint {
        @include mc-typography-level-to-styles($config, caption);
    }
}




@mixin mc-input-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-input {
        color: map-get($foreground, text);;

        &::placeholder {
            color: map-get($foreground, disabled-text);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, disabled-text);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, disabled-text);
        }
    }
}

@mixin mc-input-typography($config) {
    .mc-input {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-input.mc-input_monospace {
        @include mc-typography-level-to-styles($config, body-mono);
    }
}






@mixin mc-link-theme($theme) {
    $primary: map-get($theme, primary);
    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    $color: mc-color($primary);
    $color_hover: mc-color($primary, if($is-dark, lighter, darker));
    $color_disabled: mc-color($foreground, disabled-text);

    .mc-link {
        color: $color;

        text-decoration: none;

        cursor: pointer;

        &:focus {
            outline: none;
        }

        &:visited {
            color: $color;
        }

        &:hover {
            color: $color_hover;
        }

        &.cdk-keyboard-focused {
            outline: $color solid 2px;
            outline-offset: 2px;
        }

        & .mc-link__icon {
            color: inherit;
        }

        & .mc-link__text:not(:first-child) {
            margin-left: 4px;
        }

        & .mc-link__text:not(:last-child) {
            margin-right: 4px;
        }

        &.mc-link_underlined .mc-link__text {
            border-bottom-style: solid;
            border-bottom-color: rgba($color, .32);
        }

        &.mc-link_dashed .mc-link__text {
            border-bottom-style: dashed;
        }

        &.mc-link_dashed .mc-link__text {
            border-bottom-width: 1px;
            border-bottom-color: rgba($color, .5);

            &:visited {
                border-bottom-color: rgba($color, .5);
            }

            &:hover {
                border-bottom-color: rgba($color_hover, .5);
            }
        }

        &.mc-link_underlined .mc-link__text {
            border-bottom-width: 1px;
            border-bottom-color: rgba($color, .32);

            &:visited {
                border-bottom-color: rgba($color, .32);
            }

            &:hover {
                border-bottom-color: rgba($color_hover, .32);
            }
        }

        &[disabled] {
            color: $color_disabled;

            cursor: default;
            pointer-events: none;

            &.mc-link_underlined .mc-link__text {
                border-bottom-color: rgba($color_disabled, .64);
            }

            &.mc-link_dashed .mc-link__text {
                border-bottom-color: $color_disabled;
            }
        }
    }
}

@mixin mc-link-typography($config) {
    .mc-link {
        @include mc-typography-level-to-styles($config, body);
    }
}





// TODO: Its only for testing colors


// This mixin will ensure that lines that overflow the container will hide the overflow and
// truncate neatly with an ellipsis.
@mixin mc-truncate-line() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Mixin to provide all mc-line styles, changing secondary font size based on whether the list is in dense mode.
@mixin mc-line-base($secondary-font-size) {
    .mc-line {
        @include mc-truncate-line();

        display: block;
        box-sizing: border-box;

        // all lines but the top line should have smaller text
        &:nth-child(n + 2) {
            font-size: $secondary-font-size;
        }
    }
}

// This mixin normalizes default element styles, e.g. font weight for heading text.
@mixin mc-normalize-text() {
    & > * {
        margin: 0;
        padding: 0;
        font-weight: normal;
        font-size: inherit;
    }
}

// This mixin provides base styles for the wrapper around mc-line elements in a list.
@mixin mc-line-wrapper-base() {
    @include mc-normalize-text();

    display: flex;
    flex-direction: column;
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;

    // Must remove wrapper when lines are empty or it takes up horizontal
    // space and pushes other elements to the right.
    &:empty {
        display: none;
    }
}

.mc-no-select {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome and Opera */
}



@mixin mc-list-theme($theme) {
    $primary: map-get($theme, primary);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-list,
    .mc-list-selection {
        .mc-subheader {
            color: mc-color($foreground, secondary-text);
        }
    }

    .mc-list-item {
        color: mc-color($foreground, text);
    }

    .mc-list-option {
        outline: none;

        color: mc-color($foreground, text);

        &:hover,
        &.mc-hovered {
            background: mc-color($background, hover);
        }

        &.mc-focused {
            border-color: mc-color($primary);
        }

        &.mc-selected {
            background: mc-color($primary, if($is-dark-theme, 700, 100));
        }

        &[disabled] {
            background: transparent;

            color: mc-color($foreground, disabled-text);
        }
    }
}

@mixin mc-list-typography($config) {
    .mc-list-item,
    .mc-list-option {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-list,
    .mc-list-selection {
        // todo now we are not use it
        .mc-subheader {
            font-family: mc-font-family($config, subheading);
            font-size: mc-font-size($config, subheading);
            font-weight: mc-font-weight($config, subheading);
        }
    }
}







@mixin mc-modal-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    $inner-border: mc-color($second, if($is-dark, 600, 60));

    .mc-modal {
        .mc-modal-content {
            background-color: map-get($background, background);

            box-shadow:
                0 0 0 1px mc-color($second, if($is-dark, 800, 300)),
                0 6px 12px 0 rgba(0, 0, 0, 0.5);
        }

        .mc-modal-title {
            color: map-get($foreground, text);
        }

        .mc-modal-header {
            border-bottom: 1px solid $inner-border;
        }

        .mc-modal-footer {
            border-top: 1px solid $inner-border;
            background-color: if($is-dark, transparent, mc-color($second, 60));
        }

        .mc-modal-close {
            border: $mc-button-border-size solid transparent;

            &:hover .mc-button-overlay {
                background-color: transparent;
            }

            &:hover,
            &.cdk-keyboard-focused {
                .mc-icon {
                    color: mix(map-get($foreground, text), mc-color($second), 90%);
                }
            }
        }
    }

    .mc-confirm {
        // todo почему футер внезапно перестал быть футером ?
        .mc-confirm-btns {
            border-top: 1px solid $inner-border;
            background-color: if($is-dark, transparent, mc-color($second, 60));
        }
    }
}

@mixin mc-modal-typography($config) {
    .mc-modal {
        .mc-modal-title {
            @include mc-typography-level-to-styles($config, title);
        }
    }

    .mc-modal-body {
        @include mc-typography-level-to-styles($config, body);
    }
}




@mixin _mc-navbar-theme-color($theme) {
    $palette: map-get($theme, primary);
    $focus-color: mc-color($primary);

    background-color: mc-color($palette, 700);

    [mc-icon], .mc-icon {
        color: mc-color($palette, 100);
    }

    mc-navbar-item.mc-navbar-item-active {
        $active-lighten: 5%;
        background-color: lighten(mc-color($palette, 700), $active-lighten)
    }

    mc-navbar-item[disabled] {
        > mc-navbar-title, .mc-navbar-title, [mc-icon] {
            opacity: 0.3;
        }
    }

    mc-navbar-item, .mc-navbar-item, .mc-navbar-title {
        color: mc-color($palette, 100);
    }

    mc-navbar-item, .mc-navbar-item {
        outline: 0;
    }

    mc-navbar-item:not([disabled]), .mc-navbar-item:not([disabled]) {
        outline: 0;

        &.cdk-keyboard-focused  {
            box-shadow: inset 0 0 0 2px $focus-color;
        }

    }

    mc-navbar-item:hover:not([disabled]):not(.mc-progress) {
        $hover-lighten: 5%;
        background-color: lighten(mc-color($palette, 700), $hover-lighten)
    }

    mc-navbar-item.mc-progress:hover:not([disabled]) {
        $bg-lighten: 15%;
        background-color: lighten(mc-color($palette, 800), $bg-lighten);
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            opacity: 0.5;
        }
    }
}

@mixin mc-navbar-theme($theme) {
    .mc-navbar {
        @include _mc-navbar-theme-color($theme);
    }
}

@mixin mc-navbar-typography($config) {
    .mc-navbar-title {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-navbar-item {
        .mc-navbar-title {
            @include mc-typography-level-to-styles($config, body);
        }
    }

    .mc-navbar-brand {
        .mc-navbar-title {
            @include mc-typography-level-to-styles($config, title);
        }
    }
}







@mixin mc-popover-theme($theme) {
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    $primary-background-color: map-get($background, background);
    $secondary-background-color: if($is-dark, map-get($background, background), map-get($background, button-bg));
    $border-color: if($is-dark, $primary-background-color, map-get($foreground, disabled));

    .mc-popover {
        border-color: $border-color;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    }

    .mc-popover__container {
        color: map-get($foreground, text);
        background-color: $primary-background-color;
    }

    .mc-popover__header {
        border-bottom-color: map-get($foreground, divider);
    }

    .mc-popover__header, .mc-popover__content {
        background-color: $primary-background-color;
    }

    .mc-popover__footer {
        background-color: $secondary-background-color;
        border-top-color: if($is-dark, map-get($foreground, divider), $secondary-background-color);
    }

    .mc-popover .mc-popover__arrow {
        border-color: $border-color;
    }

    .mc-popover_placement-top .mc-popover__arrow,
    .mc-popover_placement-top-left .mc-popover__arrow,
    .mc-popover_placement-top-right .mc-popover__arrow{
        background-color: $primary-background-color;
        border-top-color: $primary-background-color;
        border-left-color: $primary-background-color;
    }

    .mc-popover_placement-top .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-top-left .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-top-right .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $secondary-background-color;
        border-top-color: $secondary-background-color;
        border-left-color: $secondary-background-color;
    }

    .mc-popover_placement-right .mc-popover__arrow,
    .mc-popover_placement-right-top .mc-popover__arrow,
    .mc-popover_placement-right-bottom .mc-popover__arrow{
        background-color: $primary-background-color;
        border-top-color: $primary-background-color;
        border-right-color: $primary-background-color;
    }

    .mc-popover_placement-right-bottom .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $secondary-background-color;
        border-top-color: $secondary-background-color;
        border-right-color: $secondary-background-color;
    }

    .mc-popover_placement-left .mc-popover__arrow,
    .mc-popover_placement-left-top .mc-popover__arrow,
    .mc-popover_placement-left-bottom .mc-popover__arrow {
        background-color: $primary-background-color;
        border-bottom-color: $primary-background-color;
        border-left-color: $primary-background-color;
    }

    .mc-popover_placement-left-bottom .mc-popover__arrow.mc-popover__arrow_with-footer {
        background-color: $secondary-background-color;
        border-bottom-color: $secondary-background-color;
        border-left-color: $secondary-background-color;
    }

    .mc-popover_placement-bottom .mc-popover__arrow,
    .mc-popover_placement-bottom-left .mc-popover__arrow,
    .mc-popover_placement-bottom-right .mc-popover__arrow,
    .mc-popover_placement-bottom .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-bottom-left .mc-popover__arrow.mc-popover__arrow_with-footer,
    .mc-popover_placement-bottom-right .mc-popover__arrow.mc-popover__arrow_with-footer{
        background-color: $primary-background-color;
        border-right-color: $primary-background-color;
        border-bottom-color: $primary-background-color;
    }
}

@mixin mc-popover-typography($config) {
    .mc-popover__content,
    .mc-popover__footer {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-popover__header {
        @include mc-typography-level-to-styles($config, subheading);
    }
}






@mixin mc-radio-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    $focus-color: mc-color($primary);

    .mc-radio-group {
        color: map-get($foreground, text);
    }

    .mc-radio-button {
        & .mc-radio-button__outer-circle {
            background: map-get($background, background);
            border-color: mc-color($second);
        }

        &:hover {
            & .mc-radio-button__outer-circle {
                background: mix(map-get($background, background), map-get($background, hover), 5);
            }
        }

        &.mc-checked {
            & .mc-radio-button__outer-circle {
                background: white;

                border-color: mc-color($primary, if($is-dark, lighter, darker));
            }

            & .mc-radio-button__inner-circle {
                display: block;

                border-color: if($is-dark, mc-color($primary, 600), mc-color($primary));
            }
        }

        &.cdk-keyboard-focused .mc-radio-input {
            + .mc-radio-label-content .mc-radio-button__outer-circle {
                border-color: $focus-color;

                box-shadow: 0 0 0 2px $focus-color;
            }

            + .mc-radio-label-content .mc-radio-button__inner-circle {
                box-shadow: 0 0 0 1px white;
            }
        }

        &.mc-disabled {
            color: map-get($foreground, disabled-text);

            & .mc-radio-label {
                cursor: default;
            }

            & .mc-radio-button__outer-circle {
                border-color: map-get($background, button-border);

                background: map-get($background, button-bg);
            }

            & .mc-radio-button__inner-circle {
                border-color: map-get($background, button-bg);

                box-shadow: none;

                background: mc-color($second, 200);
            }
        }
    }
}

@mixin mc-radio-typography($config) {
    .mc-radio-group {
        @include mc-typography-level-to-styles($config, body);
    }
}






@mixin mc-select-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-select {
        color: map-get($foreground, text);

        &.ng-invalid {
            color: mc-color($error);
        }

        &.mc-disabled {
            color: mc-color($foreground, disabled-text);
        }
    }

    .mc-select__placeholder {
        color: map-get($foreground, disabled-text);
    }

    .mc-select__panel {
        border: {
            color: mc-color($second);
        }

        box-shadow: 0 3px 3px 0 mc-color($second, A200);

        background-color: if($is-dark, map-get($second, 700), map-get($background, background));
    }

    .mc-select__no-options-message {
        color: mc-color($second, 400);
    }

    .mc-select__search-container {
        border-bottom: {
            width: 1px;
            style: solid;
            color: mc-color($second);
        }
    }
}

@mixin mc-select-typography($config) {
    .mc-select,
    .mc-select__panel {
        @include mc-typography-level-to-styles($config, body);
    }
}





@mixin mc-sidepanel-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    $inner-border: mc-color($second, if($is-dark, 600, 60));

    .mc-sidepanel-content {
        background-color: map-get($background, background);
    }

    .mc-sidepanel-container_shadowed {
        &.mc-sidepanel-container_right {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px mc-color($second, if($is-dark, 800, 300)),
                    -6px 0 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_left {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px mc-color($second, if($is-dark, 800, 300)),
                    6px 0 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_bottom {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px mc-color($second, if($is-dark, 800, 300)),
                    0 -6px 12px 0 rgba(0, 0, 0, 0.24);
            }
        }

        &.mc-sidepanel-container_top {
            .mc-sidepanel-content {
                box-shadow:
                    0 0 0 1px mc-color($second, if($is-dark, 800, 300)),
                    0 6px 12px 0 rgba(0, 0, 0, 0.24);
            }
        }
    }

    .mc-sidepanel-header {
        border-bottom: 1px solid $inner-border;
    }

    .mc-sidepanel-footer {
        border-top: 1px solid $inner-border;
        background-color: if($is-dark, transparent, mc-color($second, 60));
    }

    .mc-sidepanel-close-x:hover .mc-icon,
    .mc-sidepanel-close:hover .mc-sidepanel-close-x .mc-icon {
        color: mix(map-get($foreground, text), mc-color($second), 90%);
    }
}

@mixin mc-sidepanel-typography($config) {
    .mc-sidepanel-container {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-sidepanel-title {
        @include mc-typography-level-to-styles($config, title);
    }
}

@mixin mc-tabs-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    $border-color: mc-color($second, 300);

    .mc-tab-label,
    .mc-tab-light-label,
    .mc-tab-link {
        color: mc-color($foreground, text);

        border-bottom-color: $border-color;

        & .mc-tab-overlay {
            background: transparent;
        }

        &:hover .mc-tab-overlay {
            background: mc-color($background, hover);
        }

        &.cdk-keyboard-focused {
            &:after {
                border-color: mc-color($primary);
            }
        }

        &.mc-disabled {
            color: mc-color($foreground, disabled-text);

            cursor: default;

            background: if($is-dark, mc-color($second, 600), transparent);

            & .mc-tab-overlay {
                background: mc-color($background, disabled-overlay);
            }
        }
    }

    .mc-tab-label {
        border: {
            top-color: transparent;
            bottom-color: $border-color;
        }

        &.mc-active {
            border: {
                color: $border-color;
                bottom-color: transparent;
            }

            & .mc-tab-overlay {
                background: transparent;
            }
        }
    }

    .mc-tab-light-label,
    .mc-tab-link {
        &:hover {
            border-bottom-color: transparent;

            &:before {
                background-color: mc-color($second, 300);
            }
        }

        &.mc-active {
            &:before {
                background-color: mc-color($primary);
            }

            & .mc-tab-overlay {
                background: transparent;
            }
        }

        &.mc-disabled {
            &:before {
                background-color: $border-color;
            }
        }
    }
}

@mixin mc-tabs-typography($config) {
    .mc-tab-label,
    .mc-tab-light-label,
    .mc-tab-link {
        @include mc-typography-level-to-styles($config, body);
    }
}







@mixin _mc-tag-color($main-color, $focus-color, $foreground, $background, $is-dark-theme) {
    color: mc-color($foreground, text);

    background: mc-color($main-color, if($is-dark-theme, 700, 100));
    border-color: mc-color($main-color, if($is-dark-theme, 700, 100));

    &.mc-active,
    &.mc-focused {
        border-color: mc-color($focus-color);
        box-shadow: 0 0 0 1px mc-color($focus-color);
    }

    &.mc-disabled {
        border-color: mix(mc-color($main-color), transparent, 10%);
        background: mix(mc-color($main-color), transparent, 10%);

        color: mix(mc-color($main-color), transparent, 50%);
    }

    &:not(.mc-disabled) .mc-icon {
        color: mix(mc-color($main-color, 400), mc-color($background, hover));

        &:hover {
            cursor: pointer;
            color: mc-color($main-color, if($is-dark-theme, lighter, darker));
        }
    }
}

@mixin mc-tag-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-tag {
        &.mc-primary {
            @include _mc-tag-color($primary, $primary, $foreground, $background, $is-dark-theme);
        }

        &.mc-second {
            @include _mc-tag-color($second, $primary, $foreground, $background, $is-dark-theme);
        }

        &.mc-error {
            @include _mc-tag-color($error, $error, $foreground, $background, $is-dark-theme);
        }

        &:hover:not(.mc-disabled),
        &.mc-hovered:not(.mc-disabled) {
            & .mc-tag-overlay {
                background: mc-color($background, hover);
            }
        }
    }

    .mc-tag-input {
        color: map-get($foreground, text);;

        &::placeholder {
            color: map-get($foreground, disabled-text);;
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, disabled-text);;
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, disabled-text);;
        }
    }
}

@mixin mc-tag-typography($config) {
    .mc-tag:not(.mc-tag_mono):not(.mc-tag_caps) {
        @include mc-typography-level-to-styles($config, caption);
    }

    .mc-tag_mono {
        @include mc-typography-level-to-styles($config, caption-mono);
    }

    .mc-tag_caps {
        @include mc-typography-level-to-styles($config, caption-caps);
    }

    .mc-tag-input {
        @include mc-typography-level-to-styles($config, body);
    }
}





@mixin mc-textarea-theme($theme) {
    $foreground: map-get($theme, foreground);

    .mc-input,
    .mc-textarea {
        color: map-get($foreground, text);

        &::placeholder {
            color: map-get($foreground, disabled-text);
        }

        &::-ms-input-placeholder {
            color: map-get($foreground, disabled-text);
        }

        &::-webkit-input-placeholder {
            color: map-get($foreground, disabled-text);
        }
    }
}

@mixin mc-textarea-typography($config) {
    textarea.mc-textarea {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-textarea.mc-textarea_monospace {
        @include mc-typography-level-to-styles($config, body-mono);
    }
}





$hover-darken: 5%;

@mixin mc-toggle-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    .mc-toggle {
        color: map-get($foreground, text);

        .mc-toggle-bar {
            background: map-get($background, button-bg);
            border-color: mc-color($background, button-border);
        }

        .mc-toggle__circle {
            border-color: mc-color($background, button-border);

            background: linear-gradient(to bottom, white, if($is-dark, white, mc-color($second, lighter)));
        }

        &.mc-toggle_off {
            .mc-toggle-bar {
                background: linear-gradient(to bottom, mc-color($second, lighter), mc-color($background, button-bg));

                @if $is-dark {
                    background: map-get($background, background);
                }
            }
        }

        &:hover {
            & .mc-toggle__focus-frame {
                background: map-get($background, hover);
            }
        }

        &.cdk-keyboard-focused {
            & .mc-toggle__focus-frame {
                box-shadow: inset 0 0 0 1px map-get($background, background), 0 0 0 2px mc-color($primary);
            }
        }

        &.mc-primary:not(.mc-toggle_off) {
            .mc-toggle-bar {
                border-color: mc-color($primary);
                background: mc-color($primary);
            }
        }

        &.mc-error:not(.mc-toggle_off) {
            .mc-toggle-bar {
                border-color: mc-color($error);
                background: mc-color($error);
            }
        }

        &.mc-disabled {
            color: map-get($foreground, disabled-text);

            &.mc-toggle_off {
                .mc-toggle-bar {
                    @if $is-dark {
                        background: map-get($mc-grey, 700);
                    }
                }
            }

            & .mc-toggle__focus-frame {
                background: map-get($background, disabled-overlay);
            }
        }
    }
}


@mixin mc-toggle-typography($config) {
    .mc-toggle:not(.mc-toggle_small) {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-toggle.mc-toggle_small {
        @include mc-typography-level-to-styles($config, caption);
    }
}







@mixin mc-tooltip-theme($theme) {
    $second: map-get($theme, second);
    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $is-dark: map-get($theme, is-dark);

    $background-color: mc-color($background, bg-dropdowns);
    $border-color: if($is-dark, $background-color, map-get($foreground, disabled));

    .mc-tooltip-inner {
        color: if($is-dark, mc-color($second, 700), mc-contrast($second, 700));
        box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);
        background-color: $background-color;
    }

    .mc-tooltip .mc-tooltip-arrow {
        background-color: $background-color;
    }

    .mc-tooltip_placement-top .mc-tooltip-arrow {
        border-top-color: $background-color;
    }

    .mc-tooltip_placement-right .mc-tooltip-arrow {
        border-right-color: $background-color;
    }

    .mc-tooltip_placement-left .mc-tooltip-arrow {
        border-left-color: $background-color;
    }

    .mc-tooltip_placement-bottom .mc-tooltip-arrow {
        border-bottom-color: $background-color;
    }
}

@mixin mc-tooltip-typography($config) {
    .mc-tooltip,
    .mc-tooltip-inner {
        @include mc-typography-level-to-styles($config, caption);
    }
}






@mixin mc-tree-select-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-tree-select {
        color: map-get($foreground, text);

        &.ng-invalid {
            color: mc-color($error);
        }

        &.mc-disabled {
            color: mc-color($foreground, disabled-text);
        }
    }

    .mc-tree-select__placeholder {
        color: mc-color($foreground, disabled-text);
    }

    .mc-tree-select__panel {
        border: {
            color: mc-color($second);
        }

        box-shadow: 0 3px 3px 0 mc-color($second, A200);

        background-color: if($is-dark, map-get($second, 700), map-get($background, background));
    }
}

@mixin mc-tree-select-typography($config) {
    .mc-tree-select,
    .mc-tree-select__panel {
        @include mc-typography-level-to-styles($config, body);
    }
}






@mixin mc-tree-theme($theme) {
    $primary: map-get($theme, primary);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-tree-selection {
        &:focus {
            outline: none;
        }
    }

    .mc-tree-option {
        color: mc-color($foreground, text);

        &:hover,
        &.mc-hovered {
            background-color: mc-color($background, hover);
        }

        &.mc-focused {
            border-color: mc-color($primary);
        }

        &.mc-selected {
            background: mc-color($primary, if($is-dark-theme, 700, 100));
        }

        &[disabled] {
            background-color: transparent;

            color: mc-color($foreground, disabled-text);
        }
    }
}

@mixin mc-tree-typography($config) {
    .mc-tree-node,
    .mc-tree-option {
        @include mc-typography-level-to-styles($config, body);
    }
}




@mixin _mc-vertical-navbar-theme-color($theme) {
    $palette: map-get($theme, primary);

    background-color: mc-color($palette, 700);

    :focus {
        outline: 0;
    }

    .cdk-keyboard-focused, .cdk-program-focused {
        outline: 2px solid mc-color($palette, 500);
        outline-offset: -2px;
    }

    .mc-vertical-navbar__toggle-button {
        color: mc-contrast($palette, 700);
    }

    a[mc-vertical-navbar-header], .mc-vertical-navbar__toggle-button {
        &:hover {
            background-color: lighten(mc-color($palette, 700), 5%)
        }
    }

    .mc-vertical-navbar__title {
        color: mc-contrast($palette, 700);
    }

    mc-vertical-navbar-item, a[mc-vertical-navbar-item] {

        color: mc-contrast($palette, 700);

        &.mc-vertical-navbar__item_active {
            $active-lighten: 5%;
            background-color: lighten(mc-color($palette, 700), $active-lighten)
        }

        &:hover:not([disabled]):not(.mc-progress) {
            $hover-lighten: 5%;
            background-color: lighten(mc-color($palette, 700), $hover-lighten)
        }

        &.mc-progress:hover:not([disabled]) {
            $bg-lighten: 15%;
            background-color: lighten(mc-color($palette, 800), $bg-lighten);
        }

        &[disabled] {
            > mc-vertical-navbar-title, .mc-vertical-navbar__title, [mc-icon] {
                opacity: 0.3;
            }
        }
    }
}

@mixin mc-vertical-navbar-theme($theme) {
    .mc-vertical-navbar {
        @include _mc-vertical-navbar-theme-color($theme);
    }
}

@mixin mc-vertical-navbar-typography($config) {
    .mc-vertical-navbar__item {
        @include mc-typography-level-to-styles($config, body);
    }

    .mc-vertical-navbar__header {
        @include mc-typography-level-to-styles($config, title);
    }
}






@mixin mc-option-theme($theme) {
    $primary: map-get($theme, primary);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark-theme: map-get($theme, is-dark);

    .mc-option {
        color: mc-color($foreground, text);

        &:hover:not(.mc-disabled),
        &.mc-hovered:not(.mc-disabled) {
            .mc-option-overlay {
                background: mc-color($background, hover);
            }
        }

        &.mc-active {
            border-color: mc-color($primary);
        }

        &.mc-selected {
            // todo пока непонятно откуда брать эти цвета
            background: mc-color($primary, if($is-dark-theme, 700, 100));
        }

        &.mc-disabled {
            background: transparent;

            color: mc-color($foreground, disabled-text);
        }
    }
}

@mixin mc-option-typography($config) {
    .mc-option {
        @include mc-typography-level-to-styles($config, body);
    }
}



@mixin mosaic-typography($config: null) {
    @if $config == null {
        $config: mc-typography-config();
    }

    @include mc-base-typography($config);

    @include mc-alert-typography($config);
    @include mc-autocomplete-typography($config);
    @include mc-badge-typography($config);
    @include mc-button-toggle-typography($config);
    @include mc-button-typography($config);
    @include mc-checkbox-typography($config);
    @include mc-datepicker-typography($config);
    @include mc-dropdown-typography($config);
    @include mc-form-field-typography($config);
    @include mc-input-typography($config);
    @include mc-link-typography($config);
    @include mc-list-typography($config);
    @include mc-modal-typography($config);
    @include mc-navbar-typography($config);
    @include mc-option-typography($config);
    @include mc-popover-typography($config);
    @include mc-radio-typography($config);
    @include mc-select-typography($config);
    @include mc-sidepanel-typography($config);
    @include mc-tabs-typography($config);
    @include mc-tag-typography($config);
    @include mc-textarea-typography($config);
    @include mc-toggle-typography($config);
    @include mc-tooltip-typography($config);
    @include mc-tree-select-typography($config);
    @include mc-tree-typography($config);
    @include mc-vertical-navbar-typography($config);
}



// Mixin that renders all of the core styles that are not theme-dependent.
@mixin mc-core($typography-config: null) {
    @include mosaic-typography($typography-config);
    @include cdk-a11y();
    @include cdk-overlay();
}

// Mixin that renders all of the core styles that depend on the theme.
@mixin mc-core-theme($theme) {
    @include mc-pseudo-checkbox-theme($theme);

    .mc-app-background {
        $background: map-get($theme, background);
        $foreground: map-get($theme, foreground);

        background-color: mc-color($background, background);
        color: mc-color($foreground, text);
    }

    .mc-theme-loaded-marker {
        display: none;
    }
}










@mixin normal-state($color, $second, $is-dark) {
    box-shadow:
        inset -1px 0 0 0 mc-color($second, if($is-dark, darker, lighter)),
        inset 0 1px 0 0 mc-color($second, if($is-dark, darker, lighter)),
        inset 0 -1px 0 0 mc-color($second, if($is-dark, darker, lighter));

    background-color: mc-color($color, if($is-dark, darker, lighter));

    border-left-color: mc-color($color);
}

@mixin mc-card-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $info: map-get($theme, info);
    $success: map-get($theme, success);
    $warning: map-get($theme, warning);

    $is-dark: map-get($theme, is-dark);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    .mc-card {
        color: map-get($foreground, text);
        
        &.mc-card_info {
            @include normal-state($info, $second, $is-dark);
        }
        
        &.mc-card_warning {
            @include normal-state($warning, $second, $is-dark);
        }

        &.mc-card_success {
            @include normal-state($success, $second, $is-dark);
        }

        &.mc-card_error {
            @include normal-state($error, $second, $is-dark);
        }

        &.mc-card_white {
            background-color: mix(map-get($background, background), white, 90%);
        }

        &.mc-card_selected {
            background-color: mc-color($primary, if($is-dark, 700, 100));
        }

        // todo мне кажется тут можно сделать без overlay
        &:not(.mc-card_readonly):hover {
            .mc-card__overlay {
                background: map-get($background, hover);
            }
        }

        &.cdk-keyboard-focused {
            box-shadow: 0 0 0 2px mc-color($primary);
        }
    }
}











@mixin mc-icon-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $primary-color: mc-color($primary, 400);
    $second-color: mc-color($second);
    $error-color: mc-color($error);

    // Дефолтные серые иконки default-icon: лупа в поле, иконки дропдаунов v, все иконки вне полей.
    .mc-icon:not(.mc-icon_light) {
        &.mc-primary {
            color: mix(map-get($foreground, default-icon), $primary-color, 30%);

            &[disabled],
            &.mc-disabled {
                color: $primary-color;
            }
        }

        &.mc-second {
            // todo Миша, less-contrast-text - в темной теме не такой как на макетах.
            color: map-get($foreground, less-contrast-text);

            &[disabled],
            &.mc-disabled {
                color: mc-color($second);
            }
        }

        &.mc-error {
            color: mix(map-get($foreground, default-icon), $error-color, 30%);

            &[disabled],
            &.mc-disabled {
                color: $error-color;
            }
        }

        &:not(.mc-primary):not(.mc-second):not(.mc-error) {
            &[disabled],
            &.mc-disabled {
                color: mc-color($second);

                cursor: default;
            }
        }
    }

    // Облегченные серые иконки less-contrast-icon нужны тогда, когда действие, которое они делают не дефолтное и
    // не самое важное. Не используются вне инпутов или селектов.
    .mc-icon.mc-icon_light {
        &.mc-primary {
            color: $primary-color;

            &:hover {
                color: mix(map-get($foreground, text), $primary-color);
            }
        }

        &.mc-second {
            color: $second-color;

            &:hover {
                color: mix(map-get($foreground, text), $second-color, 90%);
            }
        }

        &.mc-error {
            color: $error-color;

            &:hover {
                color: mix(map-get($foreground, text), $error-color);
            }
        }
    }
}

@mixin mc-icon-typography($config) {
    .mc-icon {
        font: {
            size:   mc-font-size($config, button);
            family: mc-font-family($config, button);
            weight: mc-font-weight($config, button);
        }
    }
}











@mixin mc-progress-bar-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    $is-dark: map-get($theme, is-dark);

    .mc-progress-bar {
        background-color: mc-color($second, if($is-dark, 600, 60));

        &.mc-primary .mc-progress-bar__line {
            background-color: mc-color($primary);
        }

        &.mc-second .mc-progress-bar__line {
            background-color: mc-color($second);
        }

        &.mc-error .mc-progress-bar__line {
            background-color: mc-color($error);
        }
    }
}





@mixin mc-progress-spinner-theme($theme) {
    $primary: map-get($theme, primary);
    $second: map-get($theme, second);
    $error: map-get($theme, error);

    .mc-progress-spinner {
        &.mc-primary .mc-progress-spinner__circle {
            stroke: mc-color($primary);
        }

        &.mc-second .mc-progress-spinner__circle {
            stroke: mc-color($second);
        }

        &.mc-error .mc-progress-spinner__circle {
            stroke: mc-color($error);
        }
    }
}





@mixin mc-splitter-theme($theme) {
    $second: map-get($theme, second);

    $foreground: map-get($theme, foreground);
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-gutter {
        cursor: col-resize;

        &:hover {
            background-color: mix(map-get($background, button-bg), map-get($background, hover));
        }

        &.mc-gutter_dragged {
            background-color: mix(map-get($background, button-bg), map-get($background, hover));
        }

        &.mc-gutter_vertical {
            cursor: row-resize;
        }

        &[disabled] {
            background-color: mix(map-get($background, disabled-overlay), map-get($background, hover));

            cursor: default;
        }
    }
}












@mixin mc-highlight-theme($theme) {
    .mc-highlight {
        color: inherit;

        font-weight: bold;
        background-color: transparent;
    }
}




@mixin mc-panel-theme($theme) {
    $background: map-get($theme, background);

    $is-dark: map-get($theme, is-dark);

    .mc-panel {
        background-color: map-get($background, background);
        border: 1px solid map-get($mc-grey, if($is-dark, 700, 60));
    }
}



@mixin mosaic-theme($theme) {

    @include mc-core-theme($theme);
    @include mc-alert-theme($theme);
    @include mc-autocomplete-theme($theme);
    @include mc-badge-theme($theme);
    @include mc-button-theme($theme);
    @include mc-button-toggle-theme($theme);
    @include mc-card-theme($theme);
    @include mc-checkbox-theme($theme);
    @include mc-datepicker-theme($theme);
    @include mc-dropdown-theme($theme);
    @include mc-form-field-theme($theme);
    @include mc-icon-theme($theme);
    @include mc-input-theme($theme);
    @include mc-link-theme($theme);
    @include mc-list-theme($theme);
    @include mc-modal-theme($theme);
    @include mc-navbar-theme($theme);
    @include mc-option-theme($theme);
    @include mc-panel-theme($theme);
    @include mc-popover-theme($theme);
    @include mc-progress-bar-theme($theme);
    @include mc-progress-spinner-theme($theme);
    @include mc-radio-theme($theme);
    @include mc-select-theme($theme);
    @include mc-sidepanel-theme($theme);
    @include mc-splitter-theme($theme);
    @include mc-splitter-theme($theme);
    @include mc-tabs-theme($theme);
    @include mc-tag-theme($theme);
    @include mc-textarea-theme($theme);
    @include mc-textarea-theme($theme);
    @include mc-toggle-theme($theme);
    @include mc-tooltip-theme($theme);
    @include mc-tree-select-theme($theme);
    @include mc-tree-theme($theme);
    @include mc-vertical-navbar-theme($theme);
    @include mc-highlight-theme($theme);
}
