{"version":3,"file":"list.es5.js","sources":["../../../src/lib/list/list.module.ts","../../../src/lib/list/list.component.ts","../../../src/lib/list/list-selection.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler} from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    moduleId: module.id,\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    moduleId: module.id,\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    moduleId: module.id,\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[class.mc-list-option-disabled]': 'disabled',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected) { return; }\n\n        this._selected = selected;\n\n        if (!this.listSelection.selectedOptions) { return; }\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled || this.listSelection.autoSelect) { return; }\n\n        this.toggle();\n        // Emit a change event if the selected state of the option changed through user interaction.\n        this.listSelection._emitChangeEvent(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled) { return; }\n\n        this._hasFocus = true;\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    moduleId: module.id,\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> =\n        new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption> = new SelectionModel<McListOption>(true);\n\n    private _scrollSize: number = 0;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    // непонятна целесообразность сего\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null)\n            .withVerticalOrientation(!this.horizontal);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n\n        // непонятна целесообразность сего\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            if (event.added) {\n                for (const item of event.added) {\n                    item.selected = true;\n                }\n            }\n\n            if (event.removed) {\n                for (const item of event.removed) {\n                    item.selected = false;\n                }\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        // непонятна целесообразность сего\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._scrollSize = Math.floor(this._getHeight() / this.options.first._getHeight());\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n\n        if (this.autoSelect) {\n            this.options.forEach((item) => item.setSelected(false));\n\n            option.setSelected(true);\n\n            this._emitChangeEvent(option);\n            this._reportValueChange();\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        if (this.noUnselect && this.selectedOptions.selected.length === 1) { return; }\n\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        const previousFocusIndex = manager.activeItemIndex;\n\n        switch (event.keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(this._scrollSize); }\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(this._scrollSize); }\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n\n        if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) &&\n            event.shiftKey &&\n            manager.activeItemIndex !== previousFocusIndex\n        ) {\n            this.toggleFocusedOption();\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}